{"config":{"lang":["en"],"prebuild_index":true,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230 Hrbust_ACM\u2018s Wiki\uff01 \u00b6 Let\u2019s Go !!! \u00b6 \u7f16\u5199\u4eba\u5458 \u00b6 \u7ec4\u7ec7\u7f16\u5199\uff1a \u5510\u8fdc\u65b0 \u5185\u5bb9\u5ba1\u6838\uff1a \u5218\u660e\u8f89 \u5185\u5bb9\u7f16\u64b0\uff1a \u8ba1 16-1 \u5218\u660e\u8f89\uff0c\u8ba1 18-9 \u80e1\u5c0f\u6587\uff0c\u8ba1 18-8 \u97a0\u6c38\u5168 \uff0c\u8ba1 18-5 \u738b\u4e1c\u741b \u8ba1 18-8 \u6768\u777f\uff0c\u8ba1 18-7 \u725b\u4ed4\u8d85 \uff0c\u7f51\u7edc 18-2 \u5434\u56fd\u5e86\uff0c\u7f51\u7edc 18-3 \u8463\u6587\u777f \u8ba1 18-5 \u738b\u4f73\u59ae\uff0c \u7f51\u7edc 18-3 \u9ad8\u4e91\u6cfd\uff0c\u7f51\u7edc 18-3 \u51af\u7d2b\u541b\uff0c\u8ba1 18-8 \u8499\u665f\u7ef4 Wiki\u7ef4\u62a4\uff1a \u9c81\u660e\u7ff0 \u66f4\u65b0\u65e5\u5fd7 \u00b6 \u5f53\u524d\u7248\u672c\u7f16\u53f7 - 20200515 20200515\u66f4\u65b0 \u589e\u52a0\u4e86\u57fa\u7840\u7b97\u6cd5\u90e8\u5206\u5185\u5bb9\u3001\u52a0\u8f7d\u4e86\u641c\u7d22\u63d2\u4ef6\u3001\u6700\u540e\u66f4\u65b0\u65f6\u95f4\u63d2\u4ef6 20200501\u66f4\u65b0 \u66f4\u65b0\u4e86\u7f51\u7ad9\u4e3b\u9898\uff0c\u5b8c\u6210\u641c\u7d22\u3001DP\u3001\u6570\u636e\u7ed3\u6784\u3001\u56fe\u8bba\u3001\u5b57\u7b26\u4e32\u3001\u9644\u5f55\u7684\u90e8\u5206\u5185\u5bb9\u3002","title":"Getting Started"},{"location":"#hrbust_acms-wiki","text":"","title":"\u6b22\u8fce\u6765\u5230 Hrbust_ACM\u2018s Wiki\uff01"},{"location":"#lets-go","text":"","title":"Let\u2019s Go !!!"},{"location":"#_1","text":"\u7ec4\u7ec7\u7f16\u5199\uff1a \u5510\u8fdc\u65b0 \u5185\u5bb9\u5ba1\u6838\uff1a \u5218\u660e\u8f89 \u5185\u5bb9\u7f16\u64b0\uff1a \u8ba1 16-1 \u5218\u660e\u8f89\uff0c\u8ba1 18-9 \u80e1\u5c0f\u6587\uff0c\u8ba1 18-8 \u97a0\u6c38\u5168 \uff0c\u8ba1 18-5 \u738b\u4e1c\u741b \u8ba1 18-8 \u6768\u777f\uff0c\u8ba1 18-7 \u725b\u4ed4\u8d85 \uff0c\u7f51\u7edc 18-2 \u5434\u56fd\u5e86\uff0c\u7f51\u7edc 18-3 \u8463\u6587\u777f \u8ba1 18-5 \u738b\u4f73\u59ae\uff0c \u7f51\u7edc 18-3 \u9ad8\u4e91\u6cfd\uff0c\u7f51\u7edc 18-3 \u51af\u7d2b\u541b\uff0c\u8ba1 18-8 \u8499\u665f\u7ef4 Wiki\u7ef4\u62a4\uff1a \u9c81\u660e\u7ff0","title":"\u7f16\u5199\u4eba\u5458"},{"location":"#_2","text":"\u5f53\u524d\u7248\u672c\u7f16\u53f7 - 20200515 20200515\u66f4\u65b0 \u589e\u52a0\u4e86\u57fa\u7840\u7b97\u6cd5\u90e8\u5206\u5185\u5bb9\u3001\u52a0\u8f7d\u4e86\u641c\u7d22\u63d2\u4ef6\u3001\u6700\u540e\u66f4\u65b0\u65f6\u95f4\u63d2\u4ef6 20200501\u66f4\u65b0 \u66f4\u65b0\u4e86\u7f51\u7ad9\u4e3b\u9898\uff0c\u5b8c\u6210\u641c\u7d22\u3001DP\u3001\u6570\u636e\u7ed3\u6784\u3001\u56fe\u8bba\u3001\u5b57\u7b26\u4e32\u3001\u9644\u5f55\u7684\u90e8\u5206\u5185\u5bb9\u3002","title":"\u66f4\u65b0\u65e5\u5fd7"},{"location":"faq/","text":"\u4f9d\u8d56\u73af\u5883 \u00b6 \u535a\u5ba2\u6846\u67b6\u57fa\u4e8epython\uff0c \u4f7f\u7528pip\u5b89\u88c5\u76f8\u5173\u5b89\u88c5\u5305 1 2 3 4 Python 3.0 - 3.7 . x # mkdocs\u8fd8\u672a\u652f\u6301Python 3.8.0 mkdocs >= 1 # \u535a\u5ba2\u6846\u67b6 mkdocs - material # mkdocs\u4e3b\u9898 pymdown - extensions # markdown\u6269\u5c55 \u535a\u5ba2\u7ed3\u6784 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 -.git : - # git\u914d\u7f6e\u6587\u4ef6\u5939\uff0c\u52ff\u52a8 -docs : - _static - Base - Data_Structure - ... # docs\u6587\u4ef6\u5939\u5b58\u653emarkdown\u6587\u4ef6\uff0c\u65e2\u535a\u5ba2\u5185\u5bb9 -site : - xxxx.html - ... # - mkdocs build\u547d\u4ee4\u540e\u751f\u6210\u7684\u9759\u6001\u6587\u4ef6\uff0c\u7531html\u7ec4\u6210\u3002 - CNAME # DNS\u57df\u540d\u914d\u7f6e\u6587\u4ef6\uff0c\u82e5\u4e22\u5931\u4f1a\u9020\u6210\u57df\u540d\u65e0\u6cd5\u89e3\u6790 - mkdocs.yml # mkdocs\u914d\u7f6e\u6587\u4ef6\uff0c\u6587\u7ae0\u76ee\u5f55 - README.md # GitHub\u4ed3\u5e93\u4ecb\u7ecd\u6587\u4ef6 Git\u547d\u4ee4\u7b80\u4ecb \u00b6 \u9700\u8981\u5b89\u88c5git\u73af\u5883\uff0c \u4e0b\u8f7dGit \u6709\u547d\u4ee4\u884c\u548cGUI\u4e24\u79cd\u64cd\u4f5c\u65b9\u5f0f\uff0c\u63a8\u8350\u4e24\u79cd\u7ed3\u5408\u4f7f\u7528 \u4e0b\u8f7dGitHub Desktop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 start a working area ( see also: git help tutorial ) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change ( see also: git help everyday ) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index examine the history and state ( see also: git help revisions ) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate ( see also: git help workflows ) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects \u5e38\u7528\u7684\u547d\u4ee4\u53ea\u6709\u51e0\u6761\u719f\u6089\u5373\u53ef\uff0c\u6211\u4eec\u4e00\u822c\u5728GUI\u4e2d\u64cd\u4f5c git clone url git add -A git commit -m \u201c\u672c\u6b21\u63d0\u4ea4\u7684\u8bf4\u660e\u201d git push MkDocs\u547d\u4ee4 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 MkDocs - Project documentation with Markdown . Options : -V , - -version Show the version and exit . -q , - -quiet Silence warnings -v , - -verbose Enable verbose output -h , - -help Show this message and exit . Commands : build Build the MkDocs documentation gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server \u5e38\u7528\u64cd\u4f5c\u6d41\u7a0b\uff0c\u5728\u4efb\u4e00\u7ec8\u7aef\u4e0b \u8fdb\u5165wiki\u7684\u6839\u76ee\u5f55\u4f7f\u7528mkdocs serve \u542f\u52a8\u672c\u5730\u670d\u52a1\uff0c\u6b64\u65f6\u53ef\u4ee5\u5728 127.0.0.1:8000 \u4f7f\u7528\u6d4f\u89c8\u5668\u8bbf\u95ee \u672c\u5730\u6587\u4ef6\u4fee\u6539\u540e\uff0c\u65e0\u9700\u91cd\u542f\u670d\u52a1\uff0c\u4fdd\u5b58\u540e\u6d4f\u89c8\u5668\u81ea\u52a8\u5237\u65b0 \u4fee\u6539\u5b8c\u6210\u540e\u4f7f\u7528 mkdocs build \u751f\u6210\u9759\u6001\u6587\u4ef6 /site \u6587\u4ef6\u5939 \u65e0\u9700\u4f7f\u7528gh-deploy\u548cnew\u547d\u4ee4 \u53c2\u4e0e\u7f16\u5199 \u00b6 > \u6211\u662f\u840c\u65b0 \u00b6 \u53c2\u4e0eWiki\u7684\u7f16\u5199 \u9700\u8981 \u4e00\u4e2a GitHub \u8d26\u53f7\uff0c \u4e0d\u9700\u8981 \u9ad8\u8d85\u7684 GitHub \u6280\u5de7\u3002 \u7ef4\u4fee\u4e2d\u3002\u3002\u3002 > \u6211\u662f\u5927\u4f6c \u00b6 \u88ab\u8feb\u6210\u4e3a\u5927\u4f6c\uff0c\u63d0\u4ea4\u4f60\u5b9d\u8d35\u7684\u7b2c\u4e00\u6b21 PR\uff08Pull Requests\uff09 \u5427 PR\u4e94\u6b65\u8d70\u6d41\u7a0b fork\u672c\u9879\u76ee\u5230\u81ea\u5df1\u7684\u4ed3\u5e93 \u6210\u529f\u540e\uff1a\uff08\u6ce8\u610f\u8fd9\u91cc\u5df2\u7ecf\u662f\u81ea\u5df1\u7684\u4ed3\u5e93\u4e86\uff0c\u7528\u6237\u540drelifes\uff0c\u5e76\u4e14\u56fe\u6807\u53d8\u6210\u4e86\u53c9\u5b50\uff09 clone\u5230\u672c\u5730\u8fdb\u884c\u4fee\u6539\uff0c\u7531\u4e8e\u662f\u81ea\u5df1\u7684\u4ed3\u5e93\uff0c\u6240\u4ee5\u60f3\u600e\u4e48\u6539\u90fd\u884c \u8fd9\u91cc\u67094\u79cd\u65b9\u5f0f\u514b\u9686\u4e0b\u6765 git clone https://github.com/username/wiki.git git clone git@github.com:username/wiki.git \u4f7f\u7528Destop\u5ba2\u6237\u7aef\u514b\u9686 \u76f4\u63a5\u4e0b\u8f7d\u9879\u76ee\u7684\u6e90\u7801\u538b\u7f29\u5305","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"faq/#_1","text":"\u535a\u5ba2\u6846\u67b6\u57fa\u4e8epython\uff0c \u4f7f\u7528pip\u5b89\u88c5\u76f8\u5173\u5b89\u88c5\u5305 1 2 3 4 Python 3.0 - 3.7 . x # mkdocs\u8fd8\u672a\u652f\u6301Python 3.8.0 mkdocs >= 1 # \u535a\u5ba2\u6846\u67b6 mkdocs - material # mkdocs\u4e3b\u9898 pymdown - extensions # markdown\u6269\u5c55","title":"\u4f9d\u8d56\u73af\u5883"},{"location":"faq/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 -.git : - # git\u914d\u7f6e\u6587\u4ef6\u5939\uff0c\u52ff\u52a8 -docs : - _static - Base - Data_Structure - ... # docs\u6587\u4ef6\u5939\u5b58\u653emarkdown\u6587\u4ef6\uff0c\u65e2\u535a\u5ba2\u5185\u5bb9 -site : - xxxx.html - ... # - mkdocs build\u547d\u4ee4\u540e\u751f\u6210\u7684\u9759\u6001\u6587\u4ef6\uff0c\u7531html\u7ec4\u6210\u3002 - CNAME # DNS\u57df\u540d\u914d\u7f6e\u6587\u4ef6\uff0c\u82e5\u4e22\u5931\u4f1a\u9020\u6210\u57df\u540d\u65e0\u6cd5\u89e3\u6790 - mkdocs.yml # mkdocs\u914d\u7f6e\u6587\u4ef6\uff0c\u6587\u7ae0\u76ee\u5f55 - README.md # GitHub\u4ed3\u5e93\u4ecb\u7ecd\u6587\u4ef6","title":"\u535a\u5ba2\u7ed3\u6784"},{"location":"faq/#git","text":"\u9700\u8981\u5b89\u88c5git\u73af\u5883\uff0c \u4e0b\u8f7dGit \u6709\u547d\u4ee4\u884c\u548cGUI\u4e24\u79cd\u64cd\u4f5c\u65b9\u5f0f\uff0c\u63a8\u8350\u4e24\u79cd\u7ed3\u5408\u4f7f\u7528 \u4e0b\u8f7dGitHub Desktop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 start a working area ( see also: git help tutorial ) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change ( see also: git help everyday ) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index examine the history and state ( see also: git help revisions ) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate ( see also: git help workflows ) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects \u5e38\u7528\u7684\u547d\u4ee4\u53ea\u6709\u51e0\u6761\u719f\u6089\u5373\u53ef\uff0c\u6211\u4eec\u4e00\u822c\u5728GUI\u4e2d\u64cd\u4f5c git clone url git add -A git commit -m \u201c\u672c\u6b21\u63d0\u4ea4\u7684\u8bf4\u660e\u201d git push","title":"Git\u547d\u4ee4\u7b80\u4ecb"},{"location":"faq/#mkdocs","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 MkDocs - Project documentation with Markdown . Options : -V , - -version Show the version and exit . -q , - -quiet Silence warnings -v , - -verbose Enable verbose output -h , - -help Show this message and exit . Commands : build Build the MkDocs documentation gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server \u5e38\u7528\u64cd\u4f5c\u6d41\u7a0b\uff0c\u5728\u4efb\u4e00\u7ec8\u7aef\u4e0b \u8fdb\u5165wiki\u7684\u6839\u76ee\u5f55\u4f7f\u7528mkdocs serve \u542f\u52a8\u672c\u5730\u670d\u52a1\uff0c\u6b64\u65f6\u53ef\u4ee5\u5728 127.0.0.1:8000 \u4f7f\u7528\u6d4f\u89c8\u5668\u8bbf\u95ee \u672c\u5730\u6587\u4ef6\u4fee\u6539\u540e\uff0c\u65e0\u9700\u91cd\u542f\u670d\u52a1\uff0c\u4fdd\u5b58\u540e\u6d4f\u89c8\u5668\u81ea\u52a8\u5237\u65b0 \u4fee\u6539\u5b8c\u6210\u540e\u4f7f\u7528 mkdocs build \u751f\u6210\u9759\u6001\u6587\u4ef6 /site \u6587\u4ef6\u5939 \u65e0\u9700\u4f7f\u7528gh-deploy\u548cnew\u547d\u4ee4","title":"MkDocs\u547d\u4ee4"},{"location":"faq/#_3","text":"","title":"\u53c2\u4e0e\u7f16\u5199"},{"location":"faq/#_4","text":"\u53c2\u4e0eWiki\u7684\u7f16\u5199 \u9700\u8981 \u4e00\u4e2a GitHub \u8d26\u53f7\uff0c \u4e0d\u9700\u8981 \u9ad8\u8d85\u7684 GitHub \u6280\u5de7\u3002 \u7ef4\u4fee\u4e2d\u3002\u3002\u3002","title":"&gt; \u6211\u662f\u840c\u65b0"},{"location":"faq/#_5","text":"\u88ab\u8feb\u6210\u4e3a\u5927\u4f6c\uff0c\u63d0\u4ea4\u4f60\u5b9d\u8d35\u7684\u7b2c\u4e00\u6b21 PR\uff08Pull Requests\uff09 \u5427 PR\u4e94\u6b65\u8d70\u6d41\u7a0b fork\u672c\u9879\u76ee\u5230\u81ea\u5df1\u7684\u4ed3\u5e93 \u6210\u529f\u540e\uff1a\uff08\u6ce8\u610f\u8fd9\u91cc\u5df2\u7ecf\u662f\u81ea\u5df1\u7684\u4ed3\u5e93\u4e86\uff0c\u7528\u6237\u540drelifes\uff0c\u5e76\u4e14\u56fe\u6807\u53d8\u6210\u4e86\u53c9\u5b50\uff09 clone\u5230\u672c\u5730\u8fdb\u884c\u4fee\u6539\uff0c\u7531\u4e8e\u662f\u81ea\u5df1\u7684\u4ed3\u5e93\uff0c\u6240\u4ee5\u60f3\u600e\u4e48\u6539\u90fd\u884c \u8fd9\u91cc\u67094\u79cd\u65b9\u5f0f\u514b\u9686\u4e0b\u6765 git clone https://github.com/username/wiki.git git clone git@github.com:username/wiki.git \u4f7f\u7528Destop\u5ba2\u6237\u7aef\u514b\u9686 \u76f4\u63a5\u4e0b\u8f7d\u9879\u76ee\u7684\u6e90\u7801\u538b\u7f29\u5305","title":"&gt; \u6211\u662f\u5927\u4f6c"},{"location":"home/","text":"\u4e00\uff1a\u5173\u4e8e\u672c\u7ad9 \u00b6 Info \u535a\u5ba2\u6846\u67b6 : MkDocs \u4e3b\u9898 : Material for MkDocs \u7f16\u5199\u6587\u672c \uff1amarkdown \u4e8c\uff1a\u7f16\u5199\u8bf4\u660e \u00b6 \u63a8\u8350\u4f7f\u7528 Typora \u6765\u7f16\u5199markdown\u6587\u4ef6 \u535a\u5ba2\u67b6\u6784\u652f\u6301 LaTeX \u6570\u5b66\u516c\u5f0f\u548cmarkdown\u6269\u5c55 \u4f8b\u5982\u4f60\u6240\u89c1\u5230\u7684 f_{i,j,k} f_{i,j,k} , f(i,j,k) f(i,j,k) \u652f\u6301\u4ee3\u7801\u9ad8\u4eae\u4e0e\u590d\u5236 C++ 1 2 3 4 5 6 7 8 9 10 11 12 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v ; for ( int i = 1 ; i <= 10 ; i ++ ) v . push_back ( i ); for ( auto x : v ) cout << x << \" \" ; printf ( \"Hello World \\n \" ); return 0 ; } python 1 2 3 4 5 6 def blogs_with_type ( request , blog_type_pk ): context = {} blog_type = get_object_or_404 ( BlogType , pk = blog_type_pk ) context [ 'blogs' ] = Blog . objects . filter ( blog_type = blog_type ) context [ 'blog_type' ] = blog_type return render ( request , 'blogs_with_type.html' , context ) \u4e09\uff1a\u7f16\u8f91\u4fee\u6539 \u00b6 \u719f\u6089GitHub\u7684\u540c\u5b66\u53ef\u4ee5\u76f4\u63a5\u63d0\u4ea4PR \u4e0d\u719f\u6089\u7684\u5c06\u5199\u597d\u7684\u6587\u6863\u53d1\u5230 QQ: 1486176948\uff0c \u63a8\u8350\u63d0\u4ea4markdown\u6587\u6863\u3002","title":"Wiki\u4ecb\u7ecd"},{"location":"home/#_1","text":"Info \u535a\u5ba2\u6846\u67b6 : MkDocs \u4e3b\u9898 : Material for MkDocs \u7f16\u5199\u6587\u672c \uff1amarkdown","title":"\u4e00\uff1a\u5173\u4e8e\u672c\u7ad9"},{"location":"home/#_2","text":"\u63a8\u8350\u4f7f\u7528 Typora \u6765\u7f16\u5199markdown\u6587\u4ef6 \u535a\u5ba2\u67b6\u6784\u652f\u6301 LaTeX \u6570\u5b66\u516c\u5f0f\u548cmarkdown\u6269\u5c55 \u4f8b\u5982\u4f60\u6240\u89c1\u5230\u7684 f_{i,j,k} f_{i,j,k} , f(i,j,k) f(i,j,k) \u652f\u6301\u4ee3\u7801\u9ad8\u4eae\u4e0e\u590d\u5236 C++ 1 2 3 4 5 6 7 8 9 10 11 12 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v ; for ( int i = 1 ; i <= 10 ; i ++ ) v . push_back ( i ); for ( auto x : v ) cout << x << \" \" ; printf ( \"Hello World \\n \" ); return 0 ; } python 1 2 3 4 5 6 def blogs_with_type ( request , blog_type_pk ): context = {} blog_type = get_object_or_404 ( BlogType , pk = blog_type_pk ) context [ 'blogs' ] = Blog . objects . filter ( blog_type = blog_type ) context [ 'blog_type' ] = blog_type return render ( request , 'blogs_with_type.html' , context )","title":"\u4e8c\uff1a\u7f16\u5199\u8bf4\u660e"},{"location":"home/#_3","text":"\u719f\u6089GitHub\u7684\u540c\u5b66\u53ef\u4ee5\u76f4\u63a5\u63d0\u4ea4PR \u4e0d\u719f\u6089\u7684\u5c06\u5199\u597d\u7684\u6587\u6863\u53d1\u5230 QQ: 1486176948\uff0c \u63a8\u8350\u63d0\u4ea4markdown\u6587\u6863\u3002","title":"\u4e09\uff1a\u7f16\u8f91\u4fee\u6539"},{"location":"DP/%E5%8C%BA%E9%97%B4DP/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 //n \u5806\u77f3\u5b50\u6392\u6210\u2f00\u5217\uff0c\u6bcf\u5806\u77f3\u5b50\u6709\u4e00\u4e2a\u91cd\u91cf w[i] //\u6bcf\u6b21\u5408\u5e76\u53ef\u4ee5\u5408\u5e76\u76f8\u90bb\u7684\u4e24\u5806\u77f3\u5b50\uff0c\u2f00\u6b21\u5408\u5e76\u7684\u4ee3\u4ef7\u4e3a\u4e24\u5806\u2f6f\u2f26\u7684\u91cd\u91cf\u548c w[i]+w[i+1]\u3002 //\u95ee\u5b89\u6392\u600e\u6837\u7684\u5408\u5e76\u987a\u5e8f\uff0c\u80fd\u591f\u4f7f\u5f97\u603b\u5408\u5e76\u4ee3\u4ef7\u8fbe\u5230\u6700\u5927 long long w [ maxn ], n ; class IntervalDp { public : long long dp [ maxn ][ maxn ], sum [ maxn ]; //dp[i][j]\u8868\u793a\u628a\u7b2c i \u5806\u5230\u7b2c j \u5806\u7684\u77f3\u5b50\u5408\u5e76\u5728\u2f00\u8d77\u7684\u6700\u4f18\u503c //sum[i]\u4e3a\u524d i \u5806\u77f3\u5b50\u7684\u548c long long solve ( LL * w , LL n ) { //\u63a5\u53e3 for ( int i = 1 ; i <= n ; i ++ ){ sum [ i ] = sum [ i - 1 ] + w [ i ]; } for ( int len = 2 ; len <= n ; len ++ ){ for ( int i = 1 ; i <= n - len + 1 ; i ++ ){ int j = i + len - 1 ; for ( int k = i ; k <= j - 1 ; k ++ ){ dp [ i ][ j ] = max ( dp [ i ][ j ], dp [ i ][ k ] + dp [ k + 1 ][ j ] + sum [ j ] - sum [ i - 1 ]); } } } return dp [ 1 ][ n ]; } }; \u6574\u7406\u4eba \u8ba118-8 \u97a0\u6c38\u5168","title":"\u533a\u95f4 DP"},{"location":"DP/%E6%95%B0%E4%BD%8DDP/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 //(\u4e00\u5b9a\u8981\u628a dp \u65b9\u7a0b\u6240\u8868\u793a\u7684\u72b6\u6001\u8bbe\u597d\u518d\u8f6c\u79fb) //hdu2089 \u9898\u610f\uff1a\u533a\u95f4\u5185\u4e0d\u5305\u542b 62 \u548c 4 \u7684\u4e2a\u6570 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int N = 25 ; int n , m ; class DigitDp { public : int dp [ N ][ 2 ], a [ N ]; ///dp[i][j]\u4ee3\u8868\u679a\u4e3e\u5230\u7b2c i \u4f4d\u524d\u4e00\u4f4d\u662f j \u7684\u65b9\u6848\u6570 int dfs ( int now , int pre , int limit ) { if ( ! now ) return 1 ; ///\u679a\u4e3e\u5230\u6700\u540e\u4e00\u4f4d\u540e\u5c31\u8981\u68c0\u67e5\u72b6\u6001\u8fd9\u91cc\u56e0\u4e3a\u679a\u4e3e\u7684\u8fc7\u7a0b \u4e2d\u5c31\u628a\u72b6\u6001\u68c0\u67e5\u5b8c\u4e86\u76f4\u63a5\u8fd4\u56de 1 if ( ! limit && ~ dp [ now ][ pre ]) ///\u5982\u679c\u5f53\u524d\u4f4d\u7684\u503c\u6ca1\u8fbe\u5230\u6700\u9ad8\u4e14\u6b21\u72b6\u6001\u5df2\u7ecf \u8bbf\u95ee\u8fc7 return dp [ now ][ pre ]; int up = limit ? a [ now ] : 9 , ans = 0 ; ///\u6839\u636e limit \u662f\u5426\u662f 1 \u51b3\u5b9a\u4e0b\u4e00\u4f4d\u6700\u591a 17 \u679a\u4e3e\u5230\u591a\u5c11 for ( int i = 0 ; i <= up ; i ++ ) { if (( pre && i == 2 ) || ( i == 4 )) ///\u5982\u679c\u524d\u4e00\u4f4d\u662f 6 \u4e14\u5f53\u524d\u4f4d\u662f 2 \u6216\u8005\u5f53 \u524d\u4f4d\u662f 4 \u76f4\u63a5\u8df3\u8fc7 continue ; ans += dfs ( now - 1 , i == 6 , i == up && limit ); ///\u7edf\u8ba1\u5f53\u524d\u72b6\u6001\u7684\u7b54\u6848 \u4e5f\u5c31\u662f dp \u7684\u8fc7\u7a0b } if ( ! limit ) ///\u5f53\u524d\u4f4d\u503c\u672a\u8fbe\u5230\u6700\u9ad8\u624d\u80fd\u8bb0\u5fc6\u5316 dp [ now ][ pre ] = ans ; return ans ; } int solve ( int num ) { ///\u62c6\u6570\u5b57 int cnt = 0 ; while ( num ) { a [ ++ cnt ] = num % 10 ; num /= 10 ; } memset ( dp , - 1 , sizeof dp ); ///\u521d\u59cb\u5316-1 \u7684\u539f\u56e0\u5c31\u662f\u56e0\u4e3a\u6709\u4e9b\u72b6\u6001\u7684\u65b9\u6848 \u6570\u53ef\u80fd\u662f 0 return dfs ( cnt , 0 , 1 ); } } dp ; int main () { while ( scanf ( \"%d%d\" , & n , & m ) && n + m ) { printf ( \"%d \\n \" , dp . solve ( m ) - dp . solve ( n - 1 )); } } \u6574\u7406\u4eba \u7f51\u7edc 18-2 \u5434\u56fd\u5e86","title":"\u6570\u4f4d DP"},{"location":"DP/%E6%9C%9F%E6%9C%9BDP/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 ( \u4e00\u822c\u662f\u6b63\u63a8 ) ///CF148D \u539f\u6765\u888b\u5b50\u91cc\u6709 w \u53ea\u767d\u9f20\u548c b \u53ea\u9ed1\u9f20 \u9f99\u548c\u738b\u5983\u8f6e\u6d41\u4ece\u888b\u5b50\u91cc\u6293\u8001\u9f20\u3002\u8c01\u5148\u6293\u5230\u767d \u8272\u8001\u5e08\u8c01\u5c31\u8d62\u3002 \u738b\u5983\u6bcf\u6b21\u6293\u4e00\u53ea\u8001\u9f20\uff0c\u9f99\u6bcf\u6b21\u6293\u5b8c\u4e00\u53ea\u8001\u9f20\u4e4b\u540e\u4f1a\u6709\u4e00\u53ea\u8001\u9f20 \u8dd1\u51fa\u6765\u3002 \u6bcf\u6b21\u6293\u8001\u9f20\u548c\u8dd1\u51fa\u6765\u7684\u8001\u9f20\u90fd\u662f\u968f\u673a\u7684\u3002 \u5982\u679c\u4e24\u4e2a\u4eba\u90fd\u6ca1\u6709\u6293\u5230\u767d\u8272 \u8001\u9f20\u5219\u9f99\u8d62\u3002\u738b\u5983\u5148\u6293\u3002 \u95ee\u738b\u5983\u8d62\u7684\u6982\u7387\u3002 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1005 ; const int mod = 1e9 + 7 ; int w , b ; class Pdp { public : double dp [ maxn ][ maxn ]; ///\u8bbe dp[i][j]\u8868\u793a\u73b0\u5728\u8f6e\u5230\u738b\u5983\u6293\u65f6\u6709 i \u53ea\u767d\u9f20\uff0cj \u53ea \u9ed1\u9f20\uff0c\u738b\u5983\u8d62\u7684\u6982\u7387 void init () { ///\u521d\u59cb\u5316 for ( int i = 1 ; i <= w ; i ++ ) ///\u56e0\u4e3a\u90fd\u662f\u767d\u8272\u8001\u9f20\uff0c\u6293\u4e00\u6b21\u80af\u5b9a\u8d62\u4e86\u3002 dp [ i ][ 0 ] = 1 ; for ( int i = 0 ; i <= b ; i ++ ) ///\u56e0\u4e3a\u6ca1\u6709\u767d\u8272\u8001\u9f20\u4e86 dp [ 0 ][ i ] = 0 ; } void solve () { ///\u63a8\u51fa\u9012\u63a8\u516c\u5f0f for ( int i = 1 ; i <= w ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { if ( i + j == 0 ) continue ; dp [ i ][ j ] += i * 1.0 / ( i + j ); ///\u767d if ( j >= 3 ) dp [ i ][ j ] += ( j * 1.0 ) / ( i + j ) * ( j - 1 ) * 1.0 / ( i + j - 1 ) * ( j - 2 ) / ( i + j - 2 ) * dp [ i ][ j - 3 ]; ///\u9ed1\u9ed1\u9ed1 if ( j >= 2 ) dp [ i ][ j ] += ( j * 1.0 ) / ( i + j ) * ( j - 1 ) * 1.0 / ( i + j - 1 ) * ( i ) * 1.0 / ( i + j - 2 ) * dp [ i - 1 ][ j - 2 ]; ///\u9ed1\u9ed1\u767d } } } void printans () { ///\u8f93\u51fa\u7b54\u6848 printf ( \"%.10f \\n \" , dp [ w ][ b ]); } } dp ; int main () { while ( ~ scanf ( \"%d%d\" , & w , & b )) { dp . init (); dp . solve (); dp . printans (); } } \u6574\u7406\u4eba \u7f51\u7edc 18-2 \u5434\u56fd\u5e86","title":"\u671f\u671b DP"},{"location":"DP/%E6%A0%91%E5%BD%A2DP/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 ///\u6c42\u6811\u7684\u91cd\u5fc3 class TreeRoot { public : int sz [ maxn ], f [ maxn ], vis [ maxn ], root ; //sz[i] i \u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f // f[i] i \u8282\u70b9\u4e3a\u6839\u7684\u6700\u5927\u5b50\u6811\u5927\u5c0f //root \u91cd\u5fc3 n \u6811\u7684\u8282\u70b9\u6570\u91cf void solve ( int u ) { sz [ u ] = 1 ; f [ u ] = 0 ; vis [ u ] = 1 ; for ( int i = head [ u ]; i != - 1 ; i = edge [ i ]. next ) { int v = edge [ i ]. to ; if ( vis [ v ]) continue ; solve ( v ); sz [ u ] += sz [ v ]; f [ u ] = max ( f [ u ], sz [ v ]); 15 } f [ u ] = max ( f [ u ], n - sz [ u ]); if ( f [ root ] > f [ u ] || root == 0 ) root = u ; } int get_root ( int x ) { //\u63a5\u53e3 root = 0 ; memset ( vis , 0 , sizeof vis ); solve ( x ); return root ; } }; //\u6c42\u6811\u7684\u6700\u5927\u72ec\u7acb\u96c6 vector < int > G [ maxn ]; class TreeNum { public : int sz [ maxn ], dp [ maxn ][ 2 ], vis [ maxn ]; ///\u5b50\u6811\u5927\u5c0f\uff0cdp[i][0/1]\u8282\u70b9 i \u9009/\u4e0d\u9009\u7684\u5b50\u6811\u6700\u4f18\u89e3\uff0c\u91cd\u590d\u70b9\u4e0d\u8bbf\u95ee void dfs ( int x ) { vis [ x ] = 1 ; dp [ x ][ 0 ] = 0 ; dp [ x ][ 1 ] = 1 ; for ( int i = 0 ; i < G [ x ]. size (); i ++ ) { int y = G [ x ][ i ]; if ( vis [ y ]) continue ; dfs ( y ); dp [ x ][ 0 ] += max ( dp [ y ][ 0 ], dp [ y ][ 1 ]); dp [ x ][ 1 ] += dp [ y ][ 0 ]; } } int get_num ( int x ) { //\u63a5\u53e3 memset ( vis , 0 , sizeof vis ); solve ( x ); return max ( dp [ x ][ 0 ], dp [ x ][ 1 ]); } }; \u6574\u7406\u4eba \u8ba118-8 \u97a0\u6c38\u5168","title":"\u6811\u5f62 DP"},{"location":"DP/%E6%A6%82%E7%8E%87DP/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // (\u4e00\u822c\u662f\u9006\u63a8)19 // ///POJ2096 \u4e00\u4e2a\u8f6f\u4ef6\u6709 s \u4e2a\u5b50\u7cfb\u7edf\uff0c\u4f1a\u4ea7\u751f n \u79cd bug // \u67d0\u4eba\u4e00\u5929\u53d1\u73b0\u4e00\u4e2a bug, // \u8fd9\u4e2a bug \u5c5e\u4e8e\u4e00\u4e2a\u5b50\u7cfb\u7edf\uff0c\u5c5e\u4e8e\u4e00\u4e2a\u5206\u7c7b // \u6bcf\u4e2a bug \u5c5e\u4e8e\u67d0\u4e2a\u5b50\u7cfb\u7edf\u7684\u6982\u7387\u662f 1 / // s, // \u5c5e\u4e8e\u67d0\u79cd\u5206\u7c7b\u7684\u6982\u7387\u662f 1 / n // \u95ee\u53d1\u73b0 n \u79cd bug, // \u6bcf\u4e2a\u5b50\u7cfb\u7edf\u90fd\u53d1\u73b0 bug \u7684\u5929\u6570\u7684\u671f\u671b\u3002 const int N = 1005 ; const int mod = 1e9 + 7 ; int n , m ; class Edp { public : double dp [ N ][ N ]; ///dp[i][j]\u8868\u793a\u5df2\u7ecf\u627e\u5230 i \u79cd bug,j \u4e2a\u7cfb\u7edf\u7684 bug\uff0c\u8fbe\u5230\u76ee\u6807\u72b6 \u6001\u7684\u5929\u6570\u7684\u671f\u671b void init () { ///\u521d\u59cb\u5316 dp [ n ][ m ] = 0 ; ///dp[n][m]=0; } void solve () { ///\u63a8\u5bfc\u51fa\u9012\u63a8\u65b9\u7a0b\uff0c\u6bcf\u4e00\u79cd\u72b6\u6001\u7684\u6982\u7387\u4e0d\u8981\u7b97\u9519(\u8981\u7528 double) for ( int i = n ; i >= 0 ; i -- ) { for ( int j = m ; j >= 0 ; j -- ) { if ( i == n && j == m ) continue ; double p1 = ( i * j ) * 1.0 / ( n * m ); double p2 = (( n - i ) * j ) * 1.0 / ( n * m ); double p3 = ( i * ( m - j )) * 1.0 / ( n * m ); double p4 = (( n - i ) * ( m - j )) * 1.0 / ( n * m ); dp [ i ][ j ] = ( dp [ i + 1 ][ j ] * p2 + dp [ i ][ j + 1 ] * p3 + dp [ i + 1 ][ j + 1 ] * p4 + 1.0 ) / ( 1 - p1 ); } } } void printans () { ///\u8f93\u51fa printf ( \"%.4f \\n \" , dp [ 0 ][ 0 ]); ///\u8981\u6c42\u7684\u7b54\u6848 } } dp ; \u6574\u7406\u4eba \u7f51\u7edc 18-2 \u5434\u56fd\u5e86","title":"\u6982\u7387 DP"},{"location":"DP/%E7%8A%B6%E5%8E%8BDP/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 ///hdu5418 \u9898\u610f\uff1an \u4e2a\u57ce\u5e02\uff0cm \u6761\u65e0\u5411\u8fb9\uff0c\u95ee\u4ece 1 \u53f7\u57ce\u5e02\u7ecf\u8fc7\u6240\u6709\u57ce\u5e02\u5728\u56de\u5230 1 \u53f7\u57ce\u5e02\u7684 \u6700\u5c11\u82b1\u8d39 #include <bits/stdc++.h> using namespace std ; const int maxn = 2e6 + 6 ; const int N = 20 ; ///\u57ce\u5e02\u70b9\u6570 const int inf = 0x3f3f3f3f ; const int mod = 1e9 + 7 ; int n , m ; ///\u57ce\u5e02\u6570\u91cf\uff0c\u8fb9\u6570\u91cf int a [ N ][ N ]; ///\u90bb\u63a5\u77e9\u9635\u5b58\u56fe class State { public : int dp [ N ][( 1 << N ) + 10 ]; ///dp[i][S] \u4e3a\u5f53\u524d\u5728 i \u8d70\u8fc7\u7684\u96c6\u5408\u4e3a S \u7684\u82b1\u8d39, int solve () { for ( int k = 0 ; k < n ; k ++ ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ][ j ] = min ( a [ i ][ j ], a [ i ][ k ] + a [ k ][ j ]); } } } ///floyd \u6c42\u4e24\u70b9\u95f4\u6700\u77ed\u8ddd\u79bb memset ( dp , inf , sizeof dp ); dp [ 0 ][ 1 ] = 0 ; int limit = 1 << n ; for ( int S = 0 ; S < limit ; S ++ ) { for ( int i = 0 ; i < n ; i ++ ) if (( 1 << i ) & S ) { ///\u8d77\u70b9 for ( int j = 0 ; j < n ; j ++ ) if ( ! (( 1 << j ) & S )) { ///\u7ec8\u70b9 dp [ j ][ S | ( 1 << j )] = min ( dp [ j ][ S | ( 1 << j )], dp [ i ][ S ] + a [ i ][ j ]); } } } int ans = inf ; 14 for ( int i = 0 ; i < n ; i ++ ) { ans = min ( ans , dp [ i ][ limit - 1 ] + a [ 0 ][ i ]); } return ans ; } } zdp ; int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) a [ i ][ j ] = ( i == j ? 0 : inf ); } for ( int i = 1 ; i <= m ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); u -- ; v -- ; ///\u8fb9\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff0c\u65b9\u4fbf\u8f6c\u79fb a [ u ][ v ] = min ( a [ u ][ v ], w ); ///\u907f\u514d\u6709\u91cd\u8fb9 a [ v ][ u ] = a [ u ][ v ]; } printf ( \"%d \\n \" , zdp . solve ()); } } \u6574\u7406\u4eba \u8ba118-8 \u97a0\u6c38\u5168","title":"\u72b6\u6001\u538b\u7f29DP"},{"location":"Data_Structure/","text":"","title":"Index"},{"location":"Data_Structure/RMQ/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 //poj3264 \u9759\u6001\u533a\u95f4\u6700\u5927\u503c\u51cf\u6700\u5c0f\u503c #include <map> #include <cmath> #include <vector> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; #define LL long long const int maxn = 1e5 + 7 ; const int mod = 99991 ; const int INF = 0x3f3f3f3f ; int MIN [ maxn << 2 ], MAX [ maxn << 2 ]; class RMQ { public : #define lson l, m, rt << 1 #define rson m + 1, r, rt << 1 | 1 void push_up ( int rt ) { MIN [ rt ] = min ( MIN [ rt << 1 ], MIN [ rt << 1 | 1 ]); MAX [ rt ] = max ( MAX [ rt << 1 ], MAX [ rt << 1 | 1 ]); } void build ( int l , int r , int rt ) { if ( l == r ) { scanf ( \"%d\" , & MIN [ rt ]); MAX [ rt ] = MIN [ rt ]; return ; } int m = ( l + r ) >> 1 ; build ( lson ); build ( rson ); push_up ( rt ); } int query_min ( int L , int R , int l , int r , int rt ) { 26 if ( L <= l && r <= R ) { return MIN [ rt ]; } int IMIN = INF ; int m = ( l + r ) >> 1 ; if ( L <= m ) IMIN = min ( IMIN , query_min ( L , R , lson )); if ( R > m ) IMIN = min ( IMIN , query_min ( L , R , rson )); return IMIN ; } int query_max ( int L , int R , int l , int r , int rt ) { if ( L <= l && r <= R ) { return MAX [ rt ]; } int IMAX = 0 ; int m = ( l + r ) >> 1 ; if ( L <= m ) IMAX = max ( IMAX , query_max ( L , R , lson )); if ( R > m ) IMAX = max ( IMAX , query_max ( L , R , rson )); return IMAX ; } } rmq ; int main () { int n , q ; while ( ~ scanf ( \"%d%d\" , & n , & q )) { rmq . build ( 1 , n , 1 ); while ( q -- ) { int l , r ; scanf ( \"%d%d\" , & l , & r ); printf ( \"%d \\n \" , rmq . query_max ( l , r , 1 , n , 1 ) - rmq . query_min ( l , r , 1 , n , 1 )); } } return 0 ; } \u6ce8\uff1a\u8fd9\u662f\u57fa\u4e8e\u7ebf\u6bb5\u6811\u5b9e\u73b0 RMQ\uff0c\u5b83\u652f\u6301\u52a8\u6001 RMQ \u95ee\u9898\u7684\u6c42\u89e3\uff0c\u81f3\u4e8e\u533a\u95f4\u4fee\u6539\u7684\u4ee3\u7801\uff0c\u8bf7\u8be6 \u89c1\u7ebf\u6bb5\u6811\u6a21\u677f\u3002 \u6574\u7406\u4eba\uff1a\u8ba1 18-9 \u80e1\u5c0f\u6587","title":"RMQ"},{"location":"Data_Structure/ST/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 //\u6d1b\u8c37 p3865 \u9898\u610f\uff1a\u67e5\u8be2\u9759\u6001\u533a\u95f4\u6700\u5927\u503c #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> 24 using namespace std ; #define LL long long const int maxn = 1e5 + 7 ; int dp [ maxn ][ 30 ]; int a [ maxn ]; class ST { public : void init_ST ( int n ) { memset ( dp , 0 , sizeof ( dp )); for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ][ 0 ] = a [ i ]; } for ( int j = 1 ; ( 1 << j ) <= n ; j ++ ) { for ( int i = 1 ; i + ( 1 << j ) - 1 <= n ; i ++ ) { dp [ i ][ j ] = max ( dp [ i ][ j - 1 ], dp [ i + ( 1 << ( j - 1 ))][ j - 1 ]); } } } int query ( int l , int r ) { int k = log ( r - l + 1.0 ) / log ( 2.0 ); return max ( dp [ l ][ k ], dp [ r - ( 1 << k ) + 1 ][ k ]); } } st ; int main () { int n , m ; while ( ~ scanf ( \"%d%d\" , & n , & m )) { for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ]); } st . init_ST ( n ); while ( m -- ) { int l , r ; scanf ( \"%d%d\" , & l , & r ); printf ( \"%d \\n \" , st . query ( l , r )); } } return 0 ; } \u6574\u7406\u4eba \u8ba118-9 \u80e1\u5c0f\u6587","title":"ST\u8868"},{"location":"Data_Structure/%E5%88%86%E5%9D%97/","text":"1 2 HDU3468 \u9898\u610f\uff1an \u4e2a\u6570\uff0cq \u6b21\u8be2\u95ee\u5417\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa\u4e00\u4e2a\u5b57\u6bcd s\uff0c\u82e5 s = \u2018C\u2019\uff0c\u5219\u7ed9\u51fa\u4e00\u7ec4 x\uff0c y\uff0cz \u5c06[x, y]\u4e2d\u6240\u6709\u6570\u52a0\u4e0a z\u3002\u82e5 s = \u2018Q\u2019\uff0c\u5219\u7ed9\u51fa\u4e00\u7ec4 x\uff0cy\uff0c\u95ee[x, y]\u7684\u533a\u95f4\u548c\u662f\u591a\u5c11\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 #include <iostream> #include <cstdio> #include <cstring> #include <cmath> using namespace std ; const int N = 1e5 + 7 ; typedef long long ll ; 42 class Block { public : int pos [ N ], L [ N ], R [ N ], block , num , n , m ; ll add [ N ], a [ N ], sum [ N ]; void build () //\u521d\u59cb\u5316 { block = sqrt ( n ); num = block ; if ( n % block ) num ++ ; //num \u8868\u793a\u5757\u7684\u4e2a\u6570\uff0cblock \u8868\u793a\u5757\u7684\u5927\u5c0f\u3002 for ( int i = 1 ; i <= num ; i ++ ) { L [ i ] = ( i - 1 ) * block + 1 ; //\u8be5\u5757\u5de6\u7aef\u70b9\u4f4d\u7f6e R [ i ] = i * block ; //\u8be5\u5757\u53f3\u7aef\u70b9\u4f4d\u7f6e } R [ num ] = n ; for ( int i = 1 ; i <= num ; i ++ ) { for ( int j = L [ i ]; j <= R [ i ]; j ++ ) { pos [ j ] = i ; //\u7b2c\u51e0\u4e2a\u5757 sum [ i ] += a [ j ]; //\u5757\u7684\u533a\u95f4\u548c add [ j ] = 0 ; //\u589e\u91cf\u6807\u8bb0 } } } void change ( int l , int r , ll d ) //\u4fee\u6539\u64cd\u4f5c { int p = pos [ l ]; int q = pos [ r ]; if ( p == q ) { for ( int i = l ; i <= r ; i ++ ) a [ i ] += d ; sum [ p ] += ( r - l + 1 ) * d ; } else { for ( int i = p + 1 ; i <= q - 1 ; i ++ ) add [ i ] += d ; for ( int i = l ; i <= R [ p ]; i ++ ) a [ i ] += d ; sum [ p ] += ( R [ p ] - l + 1 ) * d ; for ( int i = L [ q ]; i <= r ; i ++ ) 43 a [ i ] += d ; sum [ q ] += ( r - L [ q ] + 1 ) * d ; } } ll ask ( int l , int r ) //\u67e5\u8be2\u64cd\u4f5c { int p = pos [ l ]; int q = pos [ r ]; ll ans = 0 ; if ( p == q ) { for ( int i = l ; i <= r ; i ++ ) ans += a [ i ]; ans += ( r - l + 1 ) * add [ p ]; } else { for ( int i = p + 1 ; i <= q - 1 ; i ++ ) ans += sum [ i ] + add [ i ] * ( R [ i ] - L [ i ] + 1 ); for ( int i = l ; i <= R [ p ]; i ++ ) ans += a [ i ]; ans += add [ p ] * ( R [ p ] - l + 1 ); for ( int i = L [ q ]; i <= r ; i ++ ) ans += a [ i ]; ans += add [ q ] * ( r - L [ q ] + 1 ); } return ans ; } } q ; int main () { scanf ( \"%d %d\" , & q . n , & q . m ); for ( int i = 1 ; i <= q . n ; i ++ ) scanf ( \"%lld\" , & q . a [ i ]); q . build (); while ( q . m -- ) { char c ; int x , y ; ll z ; scanf ( \" %c\" , & c ); if ( c == 'Q' ) { scanf ( \"%d %d\" , & x , & y ); printf ( \"%lld \\n \" , q . ask ( x , y )); 44 } else { scanf ( \"%d %d %lld\" , & x , & y , & z ); q . change ( x , y , z ); } } return 0 ; } \u6574\u7406\u4eba\uff1a\u7f51\u7edc 18-3 \u8463\u6587\u777f","title":"\u5206\u5757\u7b97\u6cd5"},{"location":"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 #include <bits/stdc++.h> using namespace std ; #define rep(i, j, k) for (int i = j; i <= k; i++) #define debug puts(\"*\"); const int N = 220 ; int n , cnt , t = 1 ; struct node { int l , r , cnt ; double len ; } tree [ N << 2 ]; struct knode { double x1 , y1 , y2 ; int k ; friend bool operator < ( knode a , knode b ) { return a . x1 < b . x1 ; } } line [ N ]; double raw [ N ], b [ N ], val [ N ]; void discrete () { sort ( raw + 1 , raw + 2 * n + 1 ); // rep(i,1,2*n)cout<<raw[i]<<\" \";puts(\"\"); rep ( i , 1 , 2 * n ) if ( i == 1 || raw [ i ] != raw [ i - 1 ]) b [ ++ cnt ] = raw [ i ]; // rep(i,1,cnt)cout<<b[i]<<\" \"; } int findx ( double x ) { return lower_bound ( b + 1 , b + cnt + 1 , x ) - b ; } void pushup ( int rt , int l , int r ) { if ( tree [ rt ]. cnt ) { tree [ rt ]. len = b [ r + 1 ] - b [ l ]; } else if ( l != r ) { tree [ rt ]. len = tree [ rt << 1 ]. len + tree [ rt << 1 | 1 ]. len ; } else tree [ rt ]. len = 0 ; return ; } void build ( int rt , int l , int r ) { tree [ rt ]. l = l , tree [ rt ]. r = r ; tree [ rt ]. len = 0.0 ; tree [ rt ]. cnt = 0 ; // cout<<l<<\" \"<<r<<endl; if ( l == r ) return ; int mid = ( l + r ) >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } void update ( int rt , int l , int r , int x ) { if ( l <= tree [ rt ]. l && tree [ rt ]. r <= r ) { tree [ rt ]. cnt += x ; pushup ( rt , tree [ rt ]. l , tree [ rt ]. r ); return ; } int mid = ( tree [ rt ]. l + tree [ rt ]. r ) >> 1 ; ///2 if ( l <= mid ) update ( rt << 1 , l , r , x ); if ( r > mid ) update ( rt << 1 | 1 , l , r , x ); pushup ( rt , tree [ rt ]. l , tree [ rt ]. r ); } int main () { while ( ~ scanf ( \"%d\" , & n )) { if ( ! n ) break ; cnt = 0 ; /// 1 rep ( i , 1 , n ) { double x1 , y1 , x2 , y2 ; scanf ( \"%lf%lf%lf%lf\" , & x1 , & y1 , & x2 , & y2 ); raw [ i * 2 - 1 ] = y1 , raw [ i * 2 ] = y2 ; line [ i * 2 - 1 ]. x1 = x1 , line [ i * 2 - 1 ]. y1 = y1 , line [ i * 2 - 1 ]. y2 = y2 ; line [ i * 2 - 1 ]. k = 1 ; line [ i * 2 ]. x1 = x2 , line [ i * 2 ]. y1 = y1 , line [ i * 2 ]. y2 = y2 ; line [ i * 2 ]. k = - 1 ; } discrete (); sort ( line + 1 , line + 2 * n + 1 ); double ans = 0 ; build ( 1 , 1 , cnt ); rep ( i , 1 , 2 * n ) { ans += tree [ 1 ]. len * ( line [ i ]. x1 - line [ i - 1 ]. x1 ); update ( 1 , findx ( line [ i ]. y1 ), findx ( line [ i ]. y2 ) - 1 , line [ i ]. k ); } printf ( \"Test case #%d \\n Total explored area: %.2lf \\n\\n \" , t ++ , ans ); } } \u6574\u7406\u4eba\uff1a\u8ba1 18-8 \u6768\u777f","title":"\u626b\u63cf\u7ebf"},{"location":"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 //\u6d1b\u8c37 p3368 \u533a\u95f4\u66f4\u65b0\uff0c\u5355\u70b9\u67e5\u8be2 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; #define LL long long const int maxn = 5e5 + 7 ; LL C [ maxn ]; int n , m ; class BITree { public : int lowbit ( int x ) { return x & ( - x ); } void update ( int x , LL y ) { for ( int i = x ; i <= n ; i += lowbit ( i )) { C [ i ] += y ; } } LL query ( int x ) { LL ans = 0 ; for ( int i = x ; i > 0 ; i -= lowbit ( i )) { ans += C [ i ]; } return ans ; } } bitree ; int main () { while ( ~ scanf ( \"%d%d\" , & n , & m )) { memset ( C , 0 , sizeof ( C )); LL temp = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { LL x ; scanf ( \"%lld\" , & x ); bitree . update ( i , x - temp ); temp = x ; } while ( m -- ) { int opt ; scanf ( \"%d\" , & opt ); if ( opt == 1 ) { int x , y ; LL k ; scanf ( \"%d%d%lld\" , & x , & y , & k ); bitree . update ( x , k ); bitree . update ( y + 1 , - k ); } else { int x ; scanf ( \"%d\" , & x ); printf ( \"%lld \\n \" , bitree . query ( x )); } } } return 0 ; } \u6574\u7406\u4eba \u8ba118-9 \u80e1\u5c0f\u6587","title":"\u4e00\u7ef4\u6811\u72b6\u6570\u7ec4"},{"location":"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 //hdu1892 \u5355\u70b9\u66f4\u65b0\uff0c\u533a\u95f4\u6c42\u548c #include <map> #include <cmath> #include <vector> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; #define LL long long const int maxn = 1010 ; const int mod = 99991 ; 22 const int INF = 0x3f3f3f3f ; int c [ maxn ][ maxn ]; class BITree_2 { public : int lowbit ( int x ) { return x & ( - x ); } void update ( int x , int y , int val ) { for ( int i = x ; i <= 1001 ; i += lowbit ( i )) { for ( int j = y ; j <= 1001 ; j += lowbit ( j )) { c [ i ][ j ] += val ; } } } int query ( int x , int y ) { int ans = 0 ; for ( int i = x ; i > 0 ; i -= lowbit ( i )) { for ( int j = y ; j > 0 ; j -= lowbit ( j )) { ans += c [ i ][ j ]; } } return ans ; } } bitree_2 ; int main () { int T ; scanf ( \"%d\" , & T ); int cas = 1 ; while ( T -- ) { int Q ; scanf ( \"%d\" , & Q ); printf ( \"Case %d: \\n \" , cas ++ ); memset ( c , 0 , sizeof ( c )); while ( Q -- ) { char c ; scanf ( \" %c\" , & c ); if ( c == 'S' ) { int x1 , y1 , x2 , y2 ; scanf ( \"%d%d%d%d\" , & x1 , & y1 , & x2 , & y2 ); x1 ++ , y1 ++ , x2 ++ , y2 ++ ; 23 if ( x1 > x2 ) swap ( x1 , x2 ); if ( y1 > y2 ) swap ( y1 , y2 ); printf ( \"%d \\n \" , bitree_2 . query ( x2 , y2 ) - bitree_2 . query ( x2 , y1 - 1 ) - bitree_2 . query ( x1 - 1 , y2 ) + bitree_2 . query ( x1 - 1 , y1 - 1 ) + ( x2 - x1 + 1 ) * ( y2 - y1 + 1 )); } else if ( c == 'A' ) { int x , y , val ; scanf ( \"%d%d%d\" , & x , & y , & val ); x ++ , y ++ ; bitree_2 . update ( x , y , val ); } else if ( c == 'D' ) { int x , y , val ; scanf ( \"%d%d%d\" , & x , & y , & val ); x ++ , y ++ ; int temp = bitree_2 . query ( x , y ) - bitree_2 . query ( x , y - 1 ) - bitree_2 . query ( x - 1 , y ) + bitree_2 . query ( x - 1 , y - 1 ); temp ++ ; temp = min ( temp , val ); bitree_2 . update ( x , y , - temp ); } else { int x1 , y1 , x2 , y2 , val ; scanf ( \"%d%d%d%d%d\" , & x1 , & y1 , & x2 , & y2 , & val ); x1 ++ , y1 ++ , x2 ++ , y2 ++ ; int temp = bitree_2 . query ( x1 , y1 ) - bitree_2 . query ( x1 , y1 - 1 ) - bitree_2 . query ( x1 - 1 , y1 ) + bitree_2 . query ( x1 - 1 , y1 - 1 ); temp ++ ; temp = min ( temp , val ); bitree_2 . update ( x1 , y1 , - temp ); bitree_2 . update ( x2 , y2 , temp ); } } } return 0 ; } \u6574\u7406\u4eba \u8ba118-9 \u80e1\u5c0f\u6587","title":"\u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4"},{"location":"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/","text":"\u4f8b\u4e00\u3001\u6811\u4e0a\u8ddd\u79bb\u4e3a k \u7684\u70b9\u5bf9\u662f\u5426\u5b58\u5728. \u00b6 ///\u6d1b\u8c37 P3806 \u7ed9\u5b9a\u4e00\u9897 n \u4e2a\u7ed3\u70b9\u7684\u65e0\u6839\u6811,\u6709 m \u6b21\u8be2\u95ee,\u6bcf\u6b21\u8be2\u95ee\u6811\u4e0a\u8ddd\u79bb\u4e3a k \u7684\u70b9\u5bf9\u662f\u5426\u5b58\u5728. \u601d\u60f3: \u7528\u6876\u8bb0\u5f55\u8def\u5f84,\u5224\u65ad\u662f\u5426\u5b58\u5728\u8ddd\u79bb\u4e3a k \u7684\u70b9\u5bf9 \u4f7f\u7528\u65b9\u6cd5: \u8c03\u7528 DFZ.sovle() \u51fd\u6570\u540e\u7b54\u6848\u5b58\u5165 ans[] \u6570\u7ec4 \u6a21\u5757\u8bf4\u660e: 1. \u6c42\u6811\u7684\u91cd\u5fc3\u51fd\u6570 Root.getroot() \u00b6 \u8f93\u5165 : \u4f7f\u7528 Root.getroot(u,fa,sum) , u \u4e3a\u5f53\u524d\u7ed3\u70b9, fa \u4e3a u \u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9, sum \u662f\u5f53\u524d\u8fde\u901a\u5757\u7684\u5927\u5c0f \u8f93\u51fa: \u8fd4\u56de\u91cd\u5fc3\u7ed3\u70b9\u7f16\u53f7 rt 2. \u8ba1\u7b97\u6240\u6709\u7ed3\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u51fd\u6570 CalDis.caldis() \u00b6 \u8f93\u5165\uff1a\u4f7f\u7528 CalDis.caldis(int u,int fa) , u \u4e3a\u5f53\u524d\u7ed3\u70b9, fa \u4e3a u \u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9 \u8f93\u51fa : \u5f97\u5230 di[] \u6570\u7ec4, dis[] \u6570\u7ec4\u5927\u5c0f\u4e3a tp ,\u5b58\u6709\u6240\u6709\u57fa\u672c\u8def\u5f84\u7684\u957f\u5ea6,\u8fd8\u6709 dis[] \u6570\u7ec4,\u5b58\u7684\u662f\u7ed3\u70b9 u \u5230\u5f53\u524d\u6839\u8282\u70b9\u7684\u957f\u5ea6 3. \u8ba1\u7b97\u5408\u6cd5\u8def\u5f84\u51fd\u6570 SovleDis.sovle() \u00b6 \u8f93\u5165: \u4f7f\u7528 SovleDis.sovle(int u) , u \u4e3a\u5f53\u524d\u7ed3\u70b9 \u8f93\u51fa: \u5f97\u5230\u5f53\u524d ans[] \u6570\u7ec4,,\u5b58\u6709\u6bcf\u6b21\u66f4\u65b0\u7684\u7b54\u6848\u4fe1\u606f 4. \u70b9\u5206\u6cbb\u51fd\u6570 DFZ.dfz() \u00b6 \u8f93\u5165: \u4f7f\u7528 DFZ.dfz(int u) , u \u4e3a\u5f53\u524d\u7ed3\u70b9 \u8f93\u51fa: \u9012\u5f52\u5404\u7ed3\u70b9 5. \u70b9\u5206\u6cbb\u8c03\u7528 DFZ.solve() \u00b6 \u8f93\u5165 : \u65e0 \u8f93\u51fa: \u5f97\u5230\u6700\u7ec8 ans[] \u6570\u7ec4,\u5b58\u6709\u7b54\u6848\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 #include <bits/stdc++.h> using namespace std ; const int amn = 1e5 + 5 , inf = 1e9 ; int n , m , K [ amn ]; ///\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe int head [ amn ], etot ; struct edge { int nxt , v , w ; } eg [ amn ]; void add ( int u , int v , int w ) { eg [ ++ etot ] = { head [ u ], v , w }; head [ u ] = etot ; } int vis [ amn ]; ///\u6c42\u6811\u7684\u91cd\u5fc3 class Root { public : int siz [ amn ], maxt [ amn ], rt ; void calsiz ( int u , int fa , int sum ) { siz [ u ] = 1 ; maxt [ u ] = 0 ; for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v ; if ( vis [ v ] || v == fa ) continue ; 48 calsiz ( v , u , sum ); siz [ u ] += siz [ v ]; maxt [ u ] = max ( maxt [ u ], siz [ v ]); } maxt [ u ] = max ( maxt [ u ], sum - siz [ u ]); if ( maxt [ u ] < maxt [ rt ]) rt = u ; } void getroot ( int u , int fa , int sum ) { rt = 0 ; maxt [ rt ] = inf ; calsiz ( u , fa , sum ); } }; ///\u6c42\u57fa\u672c\u8def\u5f84 dis class CalDis { public : int dis [ amn ], di [ amn ], tp ; void caldis ( int u , int fa ) { if ( dis [ u ] > ( int ) 1e7 ) return ; di [ ++ tp ] = dis [ u ]; for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v , w = eg [ i ]. w ; if ( vis [ v ] || v == fa ) continue ; dis [ v ] = dis [ u ] + w ; caldis ( v , u ); } } void init ( int v , int w ) { tp = 0 ; dis [ v ] = w ; } }; ///\u5224\u65ad\u8def\u5f84 bool jg [( int ) 1e7 + 1 ]; int ans [ amn ]; class SovleDis { public : CalDis cd ; queue < int > bk ; void sovle ( int u ) { jg [ 0 ] = 1 ; bk . push ( 0 ); for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v , w = eg [ i ]. w ; 49 if ( vis [ v ]) continue ; cd . init ( v , w ); cd . caldis ( v , u ); for ( int j = 1 ; j <= cd . tp ; j ++ ) { for ( int k = 1 ; k <= m ; k ++ ) { if ( K [ k ] >= cd . di [ j ]) ans [ k ] += jg [ K [ k ] - cd . di [ j ]]; } } for ( int j = 1 ; j <= cd . tp ; j ++ ) { jg [ cd . di [ j ]] = 1 ; bk . push ( cd . di [ j ]); } } while ( bk . size ()) { jg [ bk . front ()] = 0 ; bk . pop (); } } }; ///\u70b9\u5206\u6cbb class DFZ { public : Root rt ; SovleDis s ; void dfz ( int u ) { vis [ u ] = 1 ; s . sovle ( u ); for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v ; if ( vis [ v ]) continue ; rt . getroot ( v , u , rt . siz [ v ]); dfz ( rt . rt ); } } void sovle () { rt . getroot ( 1 , - 1 , n ); dfz ( rt . rt ); } }; int main () { DFZ df ; int a , b , c ; scanf ( \"%d%d\" , & n , & m ); 50 for ( int i = 1 ; i <= n - 1 ; i ++ ) { scanf ( \"%d%d%d\" , & a , & b , & c ); add ( a , b , c ); add ( b , a , c ); } for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d\" , & K [ i ]); } df . sovle (); for ( int i = 1 ; i <= m ; i ++ ) { if ( ans [ i ]) printf ( \"AYE \\n \" ); else printf ( \"NAY \\n \" ); } } \u4f8b\u4e8c\u3001\u6811\u4e0a\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e K \u7684\u70b9\u5bf9\u6570\u91cf \u00b6 ///\u6d1b\u8c37 P4178 \u7ed9\u5b9a\u4e00\u68f5 n \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u6761\u8fb9\u6709\u8fb9\u6743\uff0c\u6c42\u51fa\u6811\u4e0a\u4e24\u70b9\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e k \u7684\u70b9\u5bf9\u6570\u91cf\u3002 \u601d\u60f3: \u7528\u5bb9\u65a5\u548c\u53cc\u6307\u9488\u8bb0\u5f55\u8def\u5f84,\u8ba1\u7b97\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e k \u7684\u70b9\u5bf9\u6709\u591a\u5c11\u4e2a. \u4f7f\u7528\u65b9\u6cd5: \u8c03\u7528 DFZ.sovle()\u51fd\u6570\u540e\u7b54\u6848\u5b58\u5165 ans \u6a21\u5757\u8bf4\u660e: 1. \u6c42\u6811\u7684\u91cd\u5fc3\u51fd\u6570 Root.getroot() \u00b6 \u8f93\u5165: \u4f7f\u7528 Root.getroot(u,fa,sum),u \u4e3a\u5f53\u524d\u7ed3\u70b9,fa \u4e3au\u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9,sum \u662f\u5f53\u524d\u8fde\u901a\u5757\u7684\u5927 \u5c0f \u8f93\u51fa: \u8fd4\u56de\u91cd\u5fc3\u7ed3\u70b9\u7f16\u53f7 rt 2. \u8ba1\u7b97\u6240\u6709\u7ed3\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u51fd\u6570 CalDis.caldis() \u00b6 \u8f93\u5165: \u4f7f\u7528 CalDis.caldis(int u,int fa),u \u4e3a\u5f53\u524d\u7ed3\u70b9,fa \u4e3a u \u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9 \u8f93\u51fa: \u5f97\u5230 di[]\u6570\u7ec4,di[]\u6570\u7ec4\u5927\u5c0f\u4e3a tp,\u5b58\u6709\u6240\u6709\u57fa\u672c\u8def\u5f84\u7684\u957f\u5ea6,\u8fd8\u6709 dis[]\u6570\u7ec4,\u5b58\u7684\u662f\u7ed3\u70b9 u \u5230\u5f53\u524d\u6839\u8282\u70b9\u7684\u957f\u5ea6 3. \u8ba1\u7b97\u5408\u6cd5\u8def\u5f84\u51fd\u6570 SovleDis.sovle() \u00b6 \u8f93\u5165: \u4f7f\u7528 SovleDis.sovle(int u,int fa,int w),u \u4e3a\u5f53\u524d\u7ed3\u70b9,fa \u4e3a u \u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9,w \u4e3a fa \u5230 u \u7684 \u8fb9\u6743 \u8f93\u51fa: \u5f97\u5230\u5f53\u524d ans,\u5b58\u6709\u6bcf\u6b21\u66f4\u65b0\u7684\u7b54\u6848\u4fe1\u606f 4. \u70b9\u5206\u6cbb\u51fd\u6570 DFZ.dfz() \u00b6 \u8f93\u5165: \u4f7f\u7528 DFZ.dfz(int u),u \u4e3a\u5f53\u524d\u7ed3\u70b9 \u8f93\u51fa: \u9012\u5f52\u5404\u7ed3\u70b9 5. \u70b9\u5206\u6cbb\u8c03\u7528 DFZ.solve() \u00b6 \u8f93\u5165: \u65e0 \u8f93\u51fa: \u5f97\u5230\u6700\u7ec8 ans,\u5b58\u6709\u7b54\u6848\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 #include <bits/stdc++.h> using namespace std ; const int amn = 1e5 + 5 , inf = 1e9 ; int n , m , K ; ///\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe int head [ amn ], etot ; struct edge { int nxt , v , w ; } eg [ amn ]; void add ( int u , int v , int w ) { eg [ ++ etot ] = { head [ u ], v , w }; head [ u ] = etot ; } int vis [ amn ]; ///\u6c42\u6811\u7684\u91cd\u5fc3 class Root { public : int siz [ amn ], maxt [ amn ], rt ; void calsiz ( int u , int fa , int sum ) { siz [ u ] = 1 ; maxt [ u ] = 0 ; for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v ; if ( vis [ v ] || v == fa ) continue ; calsiz ( v , u , sum ); siz [ u ] += siz [ v ]; maxt [ u ] = max ( maxt [ u ], siz [ v ]); } 52 maxt [ u ] = max ( maxt [ u ], sum - siz [ u ]); if ( maxt [ u ] < maxt [ rt ]) rt = u ; } void getroot ( int u , int fa , int sum ) { rt = 0 ; maxt [ rt ] = inf ; calsiz ( u , fa , sum ); } }; ///\u6c42\u57fa\u672c\u8def\u5f84 dis class CalDis { public : int dis [ amn ], di [ amn ], tp ; void caldis ( int u , int fa ) { if ( dis [ u ] > K ) return ; di [ ++ tp ] = dis [ u ]; for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v , w = eg [ i ]. w ; if ( vis [ v ] || v == fa ) continue ; dis [ v ] = dis [ u ] + w ; caldis ( v , u ); } } void init ( int v , int w ) { tp = 0 ; dis [ v ] = w ; } }; ///\u5224\u65ad\u8def\u5f84 int ans ; class SovleDis { public : CalDis cd ; int sovle ( int u , int fa , int w ) { cd . init ( u , w ); cd . caldis ( u , fa ); sort ( cd . di + 1 , cd . di + 1 + cd . tp ); int l = 1 , r = cd . tp , ans = 0 ; while ( l < r ) { if ( cd . di [ l ] + cd . di [ r ] <= K ) { ans += r - l ; l ++ ; } else r -- ; 53 } return ans ; } }; ///\u70b9\u5206\u6cbb class DFZ { public : Root rt ; SovleDis s ; void dfz ( int u ) { vis [ u ] = 1 ; ans += s . sovle ( u , - 1 , 0 ); for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v , w = eg [ i ]. w ; if ( vis [ v ]) continue ; ans -= s . sovle ( v , u , w ); rt . getroot ( v , u , rt . siz [ v ]); dfz ( rt . rt ); } } void sovle () { rt . getroot ( 1 , - 1 , n ); dfz ( rt . rt ); } }; int main () { DFZ df ; int a , b , c ; scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n - 1 ; i ++ ) { scanf ( \"%d%d%d\" , & a , & b , & c ); add ( a , b , c ); add ( b , a , c ); } ans = 0 ; scanf ( \"%d\" , & K ); df . sovle (); printf ( \"%d \\n \" , ans ); } \u6574\u7406\u4eba\uff1a\u8ba1 18-8 \u8499\u665f\u7ef4","title":"\u70b9\u5206\u6cbb"},{"location":"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k","text":"///\u6d1b\u8c37 P3806 \u7ed9\u5b9a\u4e00\u9897 n \u4e2a\u7ed3\u70b9\u7684\u65e0\u6839\u6811,\u6709 m \u6b21\u8be2\u95ee,\u6bcf\u6b21\u8be2\u95ee\u6811\u4e0a\u8ddd\u79bb\u4e3a k \u7684\u70b9\u5bf9\u662f\u5426\u5b58\u5728. \u601d\u60f3: \u7528\u6876\u8bb0\u5f55\u8def\u5f84,\u5224\u65ad\u662f\u5426\u5b58\u5728\u8ddd\u79bb\u4e3a k \u7684\u70b9\u5bf9 \u4f7f\u7528\u65b9\u6cd5: \u8c03\u7528 DFZ.sovle() \u51fd\u6570\u540e\u7b54\u6848\u5b58\u5165 ans[] \u6570\u7ec4 \u6a21\u5757\u8bf4\u660e:","title":"\u4f8b\u4e00\u3001\u6811\u4e0a\u8ddd\u79bb\u4e3a k \u7684\u70b9\u5bf9\u662f\u5426\u5b58\u5728."},{"location":"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot","text":"\u8f93\u5165 : \u4f7f\u7528 Root.getroot(u,fa,sum) , u \u4e3a\u5f53\u524d\u7ed3\u70b9, fa \u4e3a u \u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9, sum \u662f\u5f53\u524d\u8fde\u901a\u5757\u7684\u5927\u5c0f \u8f93\u51fa: \u8fd4\u56de\u91cd\u5fc3\u7ed3\u70b9\u7f16\u53f7 rt","title":"1. \u6c42\u6811\u7684\u91cd\u5fc3\u51fd\u6570Root.getroot()"},{"location":"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis","text":"\u8f93\u5165\uff1a\u4f7f\u7528 CalDis.caldis(int u,int fa) , u \u4e3a\u5f53\u524d\u7ed3\u70b9, fa \u4e3a u \u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9 \u8f93\u51fa : \u5f97\u5230 di[] \u6570\u7ec4, dis[] \u6570\u7ec4\u5927\u5c0f\u4e3a tp ,\u5b58\u6709\u6240\u6709\u57fa\u672c\u8def\u5f84\u7684\u957f\u5ea6,\u8fd8\u6709 dis[] \u6570\u7ec4,\u5b58\u7684\u662f\u7ed3\u70b9 u \u5230\u5f53\u524d\u6839\u8282\u70b9\u7684\u957f\u5ea6","title":"2. \u8ba1\u7b97\u6240\u6709\u7ed3\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u51fd\u6570 CalDis.caldis()"},{"location":"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle","text":"\u8f93\u5165: \u4f7f\u7528 SovleDis.sovle(int u) , u \u4e3a\u5f53\u524d\u7ed3\u70b9 \u8f93\u51fa: \u5f97\u5230\u5f53\u524d ans[] \u6570\u7ec4,,\u5b58\u6709\u6bcf\u6b21\u66f4\u65b0\u7684\u7b54\u6848\u4fe1\u606f","title":"3. \u8ba1\u7b97\u5408\u6cd5\u8def\u5f84\u51fd\u6570 SovleDis.sovle()"},{"location":"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz","text":"\u8f93\u5165: \u4f7f\u7528 DFZ.dfz(int u) , u \u4e3a\u5f53\u524d\u7ed3\u70b9 \u8f93\u51fa: \u9012\u5f52\u5404\u7ed3\u70b9","title":"4. \u70b9\u5206\u6cbb\u51fd\u6570 DFZ.dfz()"},{"location":"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve","text":"\u8f93\u5165 : \u65e0 \u8f93\u51fa: \u5f97\u5230\u6700\u7ec8 ans[] \u6570\u7ec4,\u5b58\u6709\u7b54\u6848\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 #include <bits/stdc++.h> using namespace std ; const int amn = 1e5 + 5 , inf = 1e9 ; int n , m , K [ amn ]; ///\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe int head [ amn ], etot ; struct edge { int nxt , v , w ; } eg [ amn ]; void add ( int u , int v , int w ) { eg [ ++ etot ] = { head [ u ], v , w }; head [ u ] = etot ; } int vis [ amn ]; ///\u6c42\u6811\u7684\u91cd\u5fc3 class Root { public : int siz [ amn ], maxt [ amn ], rt ; void calsiz ( int u , int fa , int sum ) { siz [ u ] = 1 ; maxt [ u ] = 0 ; for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v ; if ( vis [ v ] || v == fa ) continue ; 48 calsiz ( v , u , sum ); siz [ u ] += siz [ v ]; maxt [ u ] = max ( maxt [ u ], siz [ v ]); } maxt [ u ] = max ( maxt [ u ], sum - siz [ u ]); if ( maxt [ u ] < maxt [ rt ]) rt = u ; } void getroot ( int u , int fa , int sum ) { rt = 0 ; maxt [ rt ] = inf ; calsiz ( u , fa , sum ); } }; ///\u6c42\u57fa\u672c\u8def\u5f84 dis class CalDis { public : int dis [ amn ], di [ amn ], tp ; void caldis ( int u , int fa ) { if ( dis [ u ] > ( int ) 1e7 ) return ; di [ ++ tp ] = dis [ u ]; for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v , w = eg [ i ]. w ; if ( vis [ v ] || v == fa ) continue ; dis [ v ] = dis [ u ] + w ; caldis ( v , u ); } } void init ( int v , int w ) { tp = 0 ; dis [ v ] = w ; } }; ///\u5224\u65ad\u8def\u5f84 bool jg [( int ) 1e7 + 1 ]; int ans [ amn ]; class SovleDis { public : CalDis cd ; queue < int > bk ; void sovle ( int u ) { jg [ 0 ] = 1 ; bk . push ( 0 ); for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v , w = eg [ i ]. w ; 49 if ( vis [ v ]) continue ; cd . init ( v , w ); cd . caldis ( v , u ); for ( int j = 1 ; j <= cd . tp ; j ++ ) { for ( int k = 1 ; k <= m ; k ++ ) { if ( K [ k ] >= cd . di [ j ]) ans [ k ] += jg [ K [ k ] - cd . di [ j ]]; } } for ( int j = 1 ; j <= cd . tp ; j ++ ) { jg [ cd . di [ j ]] = 1 ; bk . push ( cd . di [ j ]); } } while ( bk . size ()) { jg [ bk . front ()] = 0 ; bk . pop (); } } }; ///\u70b9\u5206\u6cbb class DFZ { public : Root rt ; SovleDis s ; void dfz ( int u ) { vis [ u ] = 1 ; s . sovle ( u ); for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v ; if ( vis [ v ]) continue ; rt . getroot ( v , u , rt . siz [ v ]); dfz ( rt . rt ); } } void sovle () { rt . getroot ( 1 , - 1 , n ); dfz ( rt . rt ); } }; int main () { DFZ df ; int a , b , c ; scanf ( \"%d%d\" , & n , & m ); 50 for ( int i = 1 ; i <= n - 1 ; i ++ ) { scanf ( \"%d%d%d\" , & a , & b , & c ); add ( a , b , c ); add ( b , a , c ); } for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d\" , & K [ i ]); } df . sovle (); for ( int i = 1 ; i <= m ; i ++ ) { if ( ans [ i ]) printf ( \"AYE \\n \" ); else printf ( \"NAY \\n \" ); } }","title":"5. \u70b9\u5206\u6cbb\u8c03\u7528 DFZ.solve()"},{"location":"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k_1","text":"///\u6d1b\u8c37 P4178 \u7ed9\u5b9a\u4e00\u68f5 n \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u6761\u8fb9\u6709\u8fb9\u6743\uff0c\u6c42\u51fa\u6811\u4e0a\u4e24\u70b9\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e k \u7684\u70b9\u5bf9\u6570\u91cf\u3002 \u601d\u60f3: \u7528\u5bb9\u65a5\u548c\u53cc\u6307\u9488\u8bb0\u5f55\u8def\u5f84,\u8ba1\u7b97\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e k \u7684\u70b9\u5bf9\u6709\u591a\u5c11\u4e2a. \u4f7f\u7528\u65b9\u6cd5: \u8c03\u7528 DFZ.sovle()\u51fd\u6570\u540e\u7b54\u6848\u5b58\u5165 ans \u6a21\u5757\u8bf4\u660e:","title":"\u4f8b\u4e8c\u3001\u6811\u4e0a\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e K \u7684\u70b9\u5bf9\u6570\u91cf"},{"location":"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot_1","text":"\u8f93\u5165: \u4f7f\u7528 Root.getroot(u,fa,sum),u \u4e3a\u5f53\u524d\u7ed3\u70b9,fa \u4e3au\u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9,sum \u662f\u5f53\u524d\u8fde\u901a\u5757\u7684\u5927 \u5c0f \u8f93\u51fa: \u8fd4\u56de\u91cd\u5fc3\u7ed3\u70b9\u7f16\u53f7 rt","title":"1. \u6c42\u6811\u7684\u91cd\u5fc3\u51fd\u6570 Root.getroot()"},{"location":"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1","text":"\u8f93\u5165: \u4f7f\u7528 CalDis.caldis(int u,int fa),u \u4e3a\u5f53\u524d\u7ed3\u70b9,fa \u4e3a u \u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9 \u8f93\u51fa: \u5f97\u5230 di[]\u6570\u7ec4,di[]\u6570\u7ec4\u5927\u5c0f\u4e3a tp,\u5b58\u6709\u6240\u6709\u57fa\u672c\u8def\u5f84\u7684\u957f\u5ea6,\u8fd8\u6709 dis[]\u6570\u7ec4,\u5b58\u7684\u662f\u7ed3\u70b9 u \u5230\u5f53\u524d\u6839\u8282\u70b9\u7684\u957f\u5ea6","title":"2. \u8ba1\u7b97\u6240\u6709\u7ed3\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u51fd\u6570 CalDis.caldis()"},{"location":"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1","text":"\u8f93\u5165: \u4f7f\u7528 SovleDis.sovle(int u,int fa,int w),u \u4e3a\u5f53\u524d\u7ed3\u70b9,fa \u4e3a u \u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9,w \u4e3a fa \u5230 u \u7684 \u8fb9\u6743 \u8f93\u51fa: \u5f97\u5230\u5f53\u524d ans,\u5b58\u6709\u6bcf\u6b21\u66f4\u65b0\u7684\u7b54\u6848\u4fe1\u606f","title":"3. \u8ba1\u7b97\u5408\u6cd5\u8def\u5f84\u51fd\u6570 SovleDis.sovle()"},{"location":"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz_1","text":"\u8f93\u5165: \u4f7f\u7528 DFZ.dfz(int u),u \u4e3a\u5f53\u524d\u7ed3\u70b9 \u8f93\u51fa: \u9012\u5f52\u5404\u7ed3\u70b9","title":"4. \u70b9\u5206\u6cbb\u51fd\u6570 DFZ.dfz()"},{"location":"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1","text":"\u8f93\u5165: \u65e0 \u8f93\u51fa: \u5f97\u5230\u6700\u7ec8 ans,\u5b58\u6709\u7b54\u6848\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 #include <bits/stdc++.h> using namespace std ; const int amn = 1e5 + 5 , inf = 1e9 ; int n , m , K ; ///\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe int head [ amn ], etot ; struct edge { int nxt , v , w ; } eg [ amn ]; void add ( int u , int v , int w ) { eg [ ++ etot ] = { head [ u ], v , w }; head [ u ] = etot ; } int vis [ amn ]; ///\u6c42\u6811\u7684\u91cd\u5fc3 class Root { public : int siz [ amn ], maxt [ amn ], rt ; void calsiz ( int u , int fa , int sum ) { siz [ u ] = 1 ; maxt [ u ] = 0 ; for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v ; if ( vis [ v ] || v == fa ) continue ; calsiz ( v , u , sum ); siz [ u ] += siz [ v ]; maxt [ u ] = max ( maxt [ u ], siz [ v ]); } 52 maxt [ u ] = max ( maxt [ u ], sum - siz [ u ]); if ( maxt [ u ] < maxt [ rt ]) rt = u ; } void getroot ( int u , int fa , int sum ) { rt = 0 ; maxt [ rt ] = inf ; calsiz ( u , fa , sum ); } }; ///\u6c42\u57fa\u672c\u8def\u5f84 dis class CalDis { public : int dis [ amn ], di [ amn ], tp ; void caldis ( int u , int fa ) { if ( dis [ u ] > K ) return ; di [ ++ tp ] = dis [ u ]; for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v , w = eg [ i ]. w ; if ( vis [ v ] || v == fa ) continue ; dis [ v ] = dis [ u ] + w ; caldis ( v , u ); } } void init ( int v , int w ) { tp = 0 ; dis [ v ] = w ; } }; ///\u5224\u65ad\u8def\u5f84 int ans ; class SovleDis { public : CalDis cd ; int sovle ( int u , int fa , int w ) { cd . init ( u , w ); cd . caldis ( u , fa ); sort ( cd . di + 1 , cd . di + 1 + cd . tp ); int l = 1 , r = cd . tp , ans = 0 ; while ( l < r ) { if ( cd . di [ l ] + cd . di [ r ] <= K ) { ans += r - l ; l ++ ; } else r -- ; 53 } return ans ; } }; ///\u70b9\u5206\u6cbb class DFZ { public : Root rt ; SovleDis s ; void dfz ( int u ) { vis [ u ] = 1 ; ans += s . sovle ( u , - 1 , 0 ); for ( int i = head [ u ]; i ; i = eg [ i ]. nxt ) { int v = eg [ i ]. v , w = eg [ i ]. w ; if ( vis [ v ]) continue ; ans -= s . sovle ( v , u , w ); rt . getroot ( v , u , rt . siz [ v ]); dfz ( rt . rt ); } } void sovle () { rt . getroot ( 1 , - 1 , n ); dfz ( rt . rt ); } }; int main () { DFZ df ; int a , b , c ; scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n - 1 ; i ++ ) { scanf ( \"%d%d%d\" , & a , & b , & c ); add ( a , b , c ); add ( b , a , c ); } ans = 0 ; scanf ( \"%d\" , & K ); df . sovle (); printf ( \"%d \\n \" , ans ); } \u6574\u7406\u4eba\uff1a\u8ba1 18-8 \u8499\u665f\u7ef4","title":"5. \u70b9\u5206\u6cbb\u8c03\u7528 DFZ.solve()"},{"location":"Data_Structure/%E7%82%B9%E5%88%A8/","text":"1 2 3 4 5 6 ///\u6d1b\u8c37 P3384 \u9898\u610f\uff1a\u5bf9\u4e8e\u4e00\u9897\u6811\u6709\u5982\u4e0b\u64cd\u4f5c \u64cd\u4f5c 1: 1 x y z \u8868\u793a\u5c06\u6811\u4ece x \u5230 y \u7ed3\u70b9\u6700\u77ed\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u52a0\u4e0a z\u3002 \u64cd\u4f5c 2: 2 x y \u8868\u793a\u6c42\u6811\u4ece x \u5230 y \u7ed3\u70b9\u6700\u77ed\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u4e4b\u548c\u3002 \u64cd\u4f5c 3: 3 x z \u8868\u793a\u5c06\u4ee5 x \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u503c\u90fd\u52a0\u4e0a z\u3002 \u64cd\u4f5c 4: 4 x \u8868\u793a\u6c42\u4ee5 x \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u503c\u4e4b\u548c\uinclude <bits/stdc++.h> #define ls rt << 1 #define rs rt << 1 | 1 using namespace std ; typedef long long ll ; const int N = 1e5 + 5 ; int n , m , mod ; struct Edge { int next , to ; } edge [ N << 1 ]; ///\u8fb9 int etot , head [ N ], Root ; int a [ N ]; inline void add ( int u , int v ) { edge [ etot ] = { head [ u ], v }; 34 head [ u ] = etot ++ ; } inline void init () { memset ( head , - 1 , sizeof ( head )); dfscnt = etot = 0 ; } class treeChainSubdivision { public : int son [ N ], tid [ N ], fa [ N ], dep [ N ], siz [ N ], top [ N ], rnk [ N ], dfscnt ; ///son \u91cd\u513f\u5b50\u7f16\u53f7,tid \u662f dfs \u5e8f,fa \u7236\u4eb2\u8282\u70b9,dep \u6df1\u5ea6\u4ece 1 \u5f00\u59cb\u7684 ///siz \u5b50\u6811\u5927\u5c0f,top \u5f53\u524d\u94fe\u9876\u7aef\u8282\u70b9,dfscnt \u662f dfs \u5e8f,rnk \u662f dfs \u5e8f\u4e3a i \u7684\u8282\u70b9 ///\u591a\u7ec4\u8f93\u5165\u65f6 son \u8981\u521d\u59cb\u5316\uff01\uff01\uff01 inline void dfs1 ( int x , int f , int deep ) { dep [ x ] = deep ; fa [ x ] = f ; siz [ x ] = 1 ; int maxson = - 1 ; for ( int i = head [ x ]; i != - 1 ; i = edge [ i ]. next ) { int to = edge [ i ]. to ; if ( to == f ) continue ; dfs1 ( to , x , deep + 1 ); siz [ x ] += siz [ to ]; if ( siz [ to ] > maxson ) son [ x ] = to , maxson = siz [ to ]; } } inline void dfs2 ( int x , int topf ) { tid [ x ] = ++ dfscnt ; rnk [ dfscnt ] = x ; top [ x ] = topf ; if ( ! son [ x ]) return ; dfs2 ( son [ x ], topf ); for ( int i = head [ x ]; i != - 1 ; i = edge [ i ]. next ) { int to = edge [ i ]. to ; if ( to == fa [ x ] || to == son [ x ]) continue ; dfs2 ( to , to ); } } inline void updpath ( int x , int y , int val ) { val %= mod ; while ( top [ x ] != top [ y ]) { if ( dep [ top [ x ]] < dep [ top [ y ]]) swap ( x , y ); Tree . update ( 1 , 1 , n , tid [ top [ x ]], tid [ x ], val ); x = fa [ top [ x ]]; } if ( dep [ x ] > dep [ y ]) swap ( x , y ); Tree . update ( 1 , 1 , n , tid [ x ], tid [ y ], val ); } inline int Qpath ( int x , int y ) { int ans = 0 ; while ( top [ x ] != top [ y ]) { if ( dep [ top [ x ]] < dep [ top [ y ]]) swap ( x , y ); ans = ( ans + Tree . query ( 1 , 1 , n , tid [ top [ x ]], tid [ x ])) % mod ; x = fa [ top [ x ]]; } if ( dep [ x ] > dep [ y ]) swap ( x , y ); ans = ( ans + Tree . query ( 1 , 1 , n , tid [ x ], tid [ y ])) % mod ; return ans % mod ; } inline void updson ( int x , int val ) { Tree . update ( 1 , 1 , n , tid [ x ], tid [ x ] + siz [ x ] - 1 , val ); } inline int Qson ( int x ) { return Tree . query ( 1 , 1 , n , tid [ x ], tid [ x ] + siz [ x ] - 1 ); } } TCS ; class segmentTree { public : int tree [ N << 2 ], laz [ N << 2 ]; inline void build ( int rt , int l , int r ) { if ( l == r ) { tree [ rt ] = a [ TCS . rnk [ l ]] % mod ; return ; } int mid = ( l + r ) >> 1 ; build ( ls , l , mid ); build ( rs , mid + 1 , r ); tree [ rt ] = ( tree [ ls ] + tree [ rs ]) % mod ; } inline void pushdown ( int rt , int l , int r ) { if ( laz [ rt ]) { int mid = ( l + r ) >> 1 ; laz [ ls ] = ( laz [ ls ] + laz [ rt ]) % mod ; laz [ rs ] = ( laz [ rs ] + laz [ rt ]) % mod ; tree [ ls ] = ( tree [ ls ] + laz [ rt ] * ( mid - l + 1 ) % mod ) % mod ; tree [ rs ] = ( tree [ rs ] + laz [ rt ] * ( r - mid ) % mod ) % mod ; laz [ rt ] = 0 ; } } inline void update ( int rt , int l , int r , int ql , int qr , int val ) { if ( ql <= l && r <= qr ) { laz [ rt ] = ( laz [ rt ] + val ) % mod ; tree [ rt ] = ( tree [ rt ] + ( r - l + 1 ) * val % mod ) % mod ; return ; } pushdown ( rt , l , r ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) update ( ls , l , mid , ql , qr , val ); if ( qr > mid ) update ( rs , mid + 1 , r , ql , qr , val ); tree [ rt ] = ( tree [ ls ] + tree [ rs ]) % mod ; } inline int query ( int rt , int l , int r , int ql , int qr ) { if ( ql <= l && r <= qr ) return tree [ rt ]; pushdown ( rt , l , r ); int mid = ( l + r ) >> 1 ; int res = 0 ; if ( ql <= mid ) res += query ( ls , l , mid , ql , qr ); if ( qr > mid ) res += query ( rs , mid + 1 , r , ql , qr ); return res % mod ; } } Tree ; int main () { scanf ( \"%d%d%d%d\" , & n , & m , & Root , & mod ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i < n ; i ++ ) { int u , v ; scanf ( \"%d%d\" , & u , & v ); add ( u , v ); add ( v , u ); } TCS . dfs1 ( Root , 0 , 1 ); TCS . dfs2 ( Root , Root ); Tree . build ( 1 , 1 , n ); while ( m -- ) { int op , x , y , val ; scanf ( \"%d\" , & op ); if ( op == 1 ) { scanf ( \"%d%d%d\" , & x , & y , & val ); Tree . updpath ( x , y , val ); } else if ( op == 2 ) { scanf ( \"%d%d\" , & x , & y ); printf ( \"%d \\n \" , TCS . Qpath ( x , y )); } else if ( op == 3 ) { scanf ( \"%d%d\" , & x , & y ); 37 TCS . updson ( x , y ); } else { scanf ( \"%d\" , & x ); printf ( \"%d \\n \" , TCS . Qson ( x )); } } return 0 ; } \u6574\u7406\u4eba\uff1a\u8ba1 18-7 \u725b\u4ed4\u8d85","title":"\u70b9\u5256"},{"location":"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 ///poj3468 \u9898\u610f\uff1an \u4e2a\u6570\uff0cm \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u533a\u95f4\u52a0\u4e0a\u4e00\u4e2a\u6570\uff0c\u533a\u95f4\u67e5\u8be2\u548c #include <bits/stdc++.h> using namespace std ; #define rep(i, j, k) for (int i = j; i <= k; i++) #define debug puts(\"*\"); const int N = 220 ; int n , cnt , t = 1 ; struct node { int l , r , cnt ; double len ; } tree [ N << 2 ]; struct knode { double x1 , y1 , y2 ; int k ; friend bool operator < ( knode a , knode b ) { return a . x1 < b . x1 ; } } line [ N ]; double raw [ N ], b [ N ], val [ N ]; void discrete () { sort ( raw + 1 , raw + 2 * n + 1 ); // rep(i,1,2*n)cout<<raw[i]<<\" \";puts(\"\"); rep ( i , 1 , 2 * n ) if ( i == 1 || raw [ i ] != raw [ i - 1 ]) b [ ++ cnt ] = raw [ i ]; // rep(i,1,cnt)cout<<b[i]<<\" \"; } int findx ( double x ) { return lower_bound ( b + 1 , b + cnt + 1 , x ) - b ; } void pushup ( int rt , int l , int r ) { if ( tree [ rt ]. cnt ) { tree [ rt ]. len = b [ r + 1 ] - b [ l ]; } else if ( l != r ) { tree [ rt ]. len = tree [ rt << 1 ]. len + tree [ rt << 1 | 1 ]. len ; } else tree [ rt ]. len = 0 ; return ; } void build ( int rt , int l , int r ) { tree [ rt ]. l = l , tree [ rt ]. r = r ; 28 tree [ rt ]. len = 0.0 ; tree [ rt ]. cnt = 0 ; // cout<<l<<\" \"<<r<<endl; if ( l == r ) return ; int mid = ( l + r ) >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } void update ( int rt , int l , int r , int x ) { if ( l <= tree [ rt ]. l && tree [ rt ]. r <= r ) { tree [ rt ]. cnt += x ; pushup ( rt , tree [ rt ]. l , tree [ rt ]. r ); return ; } int mid = ( tree [ rt ]. l + tree [ rt ]. r ) >> 1 ; ///2 if ( l <= mid ) update ( rt << 1 , l , r , x ); if ( r > mid ) update ( rt << 1 | 1 , l , r , x ); pushup ( rt , tree [ rt ]. l , tree [ rt ]. r ); } int main () { while ( ~ scanf ( \"%d\" , & n )) { if ( ! n ) break ; cnt = 0 ; /// 1 rep ( i , 1 , n ) { double x1 , y1 , x2 , y2 ; scanf ( \"%lf%lf%lf%lf\" , & x1 , & y1 , & x2 , & y2 ); raw [ i * 2 - 1 ] = y1 , raw [ i * 2 ] = y2 ; line [ i * 2 - 1 ]. x1 = x1 , line [ i * 2 - 1 ]. y1 = y1 , line [ i * 2 - 1 ]. y2 = y2 ; line [ i * 2 - 1 ]. k = 1 ; line [ i * 2 ]. x1 = x2 , line [ i * 2 ]. y1 = y1 , line [ i * 2 ]. y2 = y2 ; line [ i * 2 ]. k = - 1 ; } discrete (); sort ( line + 1 , line + 2 * n + 1 ); double ans = 0 ; build ( 1 , 1 , cnt ); rep ( i , 1 , 2 * n ) { ans += tree [ 1 ]. len * ( line [ i ]. x1 - line [ i - 1 ]. x1 ); update ( 1 , findx ( line [ i ]. y1 ), findx ( line [ i ]. y2 ) - 1 , line [ i ]. k ); } printf ( \"Test case #%d \\n Total explored area: %.2lf \\n\\n \" , t ++ , ans ); } } \u6574\u7406\u4eba\uff1a\u8ba1 18-8 \u6768\u777f","title":"\u7ebf\u6bb5\u6811lazy\u6807\u8bb0"},{"location":"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 ///HDU 3911 \u9898\u610f\uff1a\u53cd\u8f6c\u64cd\u4f5c\uff1a\u6bcf\u6b21\u53cd\u8f6c\u4e00\u4e2a\u533a\u95f4\u5185 0 1 \u7684\u503c\uff0c\u67e5\u8be2\u64cd\u4f5c\uff1a\u67e5\u8be2\u6700\u957f\u7684 1 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; #define lson rt << 1 #define rson rt << 1 | 1 const int N = 1e5 + 9 ; int a [ N ], n , m ; int tree0 [ N << 2 ], tree1 [ N << 2 ], lazy [ N << 2 ], lmax0 [ N << 2 ]; int lmax1 [ N << 2 ], rmax0 [ N << 2 ], rmax1 [ N << 2 ]; void swp ( int rt ) { swap ( tree0 [ rt ], tree1 [ rt ]); swap ( rmax0 [ rt ], rmax1 [ rt ]); swap ( lmax0 [ rt ], lmax1 [ rt ]); return ; } void pushup ( int rt ) { if ( ! tree0 [ lson ]) lmax1 [ rt ] = lmax1 [ lson ] + lmax1 [ rson ]; else lmax1 [ rt ] = lmax1 [ lson ]; if ( ! tree1 [ lson ]) lmax0 [ rt ] = lmax0 [ lson ] + lmax0 [ rson ]; else lmax0 [ rt ] = lmax0 [ lson ]; if ( ! tree0 [ rson ]) rmax1 [ rt ] = rmax1 [ rson ] + rmax1 [ lson ]; else rmax1 [ rt ] = rmax1 [ rson ]; if ( ! tree1 [ rson ]) rmax0 [ rt ] = rmax0 [ rson ] + rmax0 [ lson ]; else rmax0 [ rt ] = rmax0 [ rson ]; tree0 [ rt ] = max ( rmax0 [ lson ] + lmax0 [ rson ], max ( tree0 [ lson ], tree0 [ rson ])); tree0 [ rt ] = max ( tree0 [ rt ], max ( tree0 [ lson ], tree0 [ rson ])); tree0 [ rt ] = max ( tree0 [ rt ], max ( lmax0 [ rt ], rmax0 [ rt ])); tree1 [ rt ] = max ( rmax1 [ lson ] + lmax1 [ rson ], max ( tree1 [ lson ], tree1 [ rson ])); tree1 [ rt ] = max ( tree1 [ rt ], max ( tree1 [ lson ], tree1 [ rson ])); tree1 [ rt ] = max ( tree1 [ rt ], max ( lmax1 [ rt ], rmax1 [ rt ])); } void pushdown ( int rt ) { if ( lazy [ rt ]) { swp ( lson ); swp ( rson ); lazy [ lson ] ^= 1 ; lazy [ rson ] ^= 1 ; lazy [ rt ] = 0 ; } return ; 30 } void build ( int rt , int l , int r ) { lazy [ rt ] = 0 ; if ( l == r ) { scanf ( \"%d\" , & a [ l ]); if ( a [ l ] == 1 ) { tree0 [ rt ] = 0 ; tree1 [ rt ] = 1 ; lmax0 [ rt ] = 0 ; rmax0 [ rt ] = 0 ; lmax1 [ rt ] = 1 ; rmax1 [ rt ] = 1 ; } else { tree0 [ rt ] = 1 ; tree1 [ rt ] = 0 ; lmax0 [ rt ] = 1 ; rmax0 [ rt ] = 1 ; lmax1 [ rt ] = 0 ; rmax1 [ rt ] = 0 ; } // cout<<l<<endl; return ; } int mid = ( l + r ) >> 1 ; build ( lson , l , mid ); build ( rson , mid + 1 , r ); pushup ( rt ); } void change ( int rt , int l , int r , int x , int y ) { if ( l >= x && r <= y ) { lazy [ rt ] ^= 1 ; swp ( rt ); return ; } int mid = ( l + r ) >> 1 ; pushdown ( rt ); if ( x <= mid ) change ( lson , l , mid , x , y ); if ( y > mid ) change ( rson , mid + 1 , r , x , y ); pushup ( rt ); } int query ( int rt , int l , int r , int x , int y ) { if ( l >= x && r <= y ) { return tree1 [ rt ]; } int ans = 0 ; pushdown ( rt ); int mid = ( l + r ) >> 1 ; if ( x <= mid ) { ans = max ( query ( lson , l , mid , x , y ), ans ); } if ( y > mid ) { ans = max ( query ( rson , mid + 1 , r , x , y ), ans ); } ans = max ( ans , min ( mid - x + 1 , rmax1 [ lson ]) + min ( y - mid , lmax1 [ rson ])); return ans ; 31 } int main () { while ( ~ scanf ( \"%d\" , & n )) { build ( 1 , 1 , n ); scanf ( \"%d\" , & m ); while ( m -- ) { int op , l , r ; scanf ( \"%d%d%d\" , & op , & l , & r ); if ( op == 0 ) { printf ( \"%d \\n \" , query ( 1 , 1 , n , l , r )); } else { change ( 1 , 1 , n , l , r ); } // for(int i=1;i<=4*n;i++){ // printf(\"%d \",tree1[i]); // }puts(\"\"); } } } \u6574\u7406\u4eba\uff1a\u8ba1 18-8 \u6768\u777f","title":"\u7ebf\u6bb5\u6811\u533a\u95f4\u5408\u5e76"},{"location":"Data_Structure/%E8%8E%AB%E9%98%9F/","text":"1 2 3 BZOJ 2038 \u9898\u610f\uff1a\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570 n \u548c m\uff0c\u4e4b\u540e\u7ed9\u51fa n \u4e2a\u6570\u4ee3\u8868 n \u4e2a\u889c\u5b50\u7684\u989c\u8272\uff0cm \u6b21\u8be2\u95ee\uff0c \u6bcf\u6b21\u7ed9\u51fa\u4e00\u4e2a[l, r]\uff0c\u95ee\u533a\u95f4\u5185\u7684\u968f\u673a\u62bd\u53d6\u4e24\u4e2a\u889c\u5b50\u989c\u8272\u76f8\u540c\u7684\u6982\u7387\u4e3a\u591a\u5c11\uff0c\u8f93\u51fa\u6700\u7b80\u5206\u6570 A/B \u7684\u5f62\u5f0f\uff0c\u82e5\u6982\u7387\u4e3a\u96f6\u5219\u8f93\u51fa 0/1\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int N = 1e5 + 7 ; const int M = 1e6 + 7 ; const int INF = 1e9 + 8 ; int block ; struct node { int l , r , id ; }; ll gcd ( ll x , ll y ) { return y == 0 ? x : gcd ( y , x % y ); } bool cmp ( node xx , node yy ) //\u5947\u5076\u6392\u5e8f\u4f18\u5316 { if ( xx . l / block == yy . l / block ) { if ( xx . l / block & 1 ) return xx . r < yy . r ; else return xx . r > yy . r ; } return xx . l / block < yy . l / block ; } class Moteam { 45 public : int a [ N ], sum [ N ], n , m ; ll ansx [ N ], ansy [ N ], ans ; node q [ N ]; void Add ( int i ) //\u6dfb\u52a0\u64cd\u4f5c { ans -= sum [ a [ i ]] * sum [ a [ i ]]; sum [ a [ i ]] ++ ; ans += sum [ a [ i ]] * sum [ a [ i ]]; } void Sub ( int i ) { ans -= sum [ a [ i ]] * sum [ a [ i ]]; sum [ a [ i ]] -- ; ans += sum [ a [ i ]] * sum [ a [ i ]]; } void solve () //\u4fee\u6539\u64cd\u4f5c { sort ( q + 1 , q + m + 1 , cmp ); int l = 1 ; int r = 1 ; sum [ a [ 1 ]] ++ ; ans = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { if ( q [ i ]. l == q [ i ]. r ) //\u7279\u5224\u4e00\u4e0b ansx [ q [ i ]. id ] = 0 , ansy [ q [ i ]. id ] = 1 ; while ( l < q [ i ]. l ) Sub ( l ), l ++ ; while ( l > q [ i ]. l ) l -- , Add ( l ); while ( r < q [ i ]. r ) r ++ , Add ( r ); while ( r > q [ i ]. r ) Sub ( r ), r -- ; ll x = ( ans - ( q [ i ]. r - q [ i ]. l + 1 )); ll y = ( ll )( q [ i ]. r - q [ i ]. l + 1 ) * ( ll )( q [ i ]. r - q [ i ]. l ); ll d = gcd ( x , y ); ansx [ q [ i ]. id ] = x / d ; ansy [ q [ i ]. id ] = y / d ; } for ( int i = 1 ; i <= m ; i ++ ) printf ( \"%lld/%lld \\n \" , ansx [ i ], ansy [ i ]); } } mo ; int main () { memset ( mo . sum , 0 , sizeof mo . sum ); scanf ( \"%d %d\" , & mo . n , & mo . m ); for ( int i = 1 ; i <= mo . n ; i ++ ) scanf ( \"%d\" , & mo . a [ i ]); block = sqrt ( mo . n ); for ( int i = 1 ; i <= mo . m ; i ++ ) { scanf ( \"%d %d\" , & mo . q [ i ]. l , & mo . q [ i ]. r ); mo . q [ i ]. id = i ; } mo . solve (); return 0 ; } \u6574\u7406\u4eba\uff1a\u7f51\u7edc 18-3 \u8463\u6587\u777f","title":"\u83ab\u961f\u7b97\u6cd5"},{"location":"Data_Structure/%E8%BE%B9%E5%89%96/","text":"1 2 3 4 5 6 ///\u6d1b\u8c37 P4315 \u9898\u610f\uff1a\u5bf9\u4e8e\u4e00\u9897\u6811\u6709\u5982\u4e0b\u64cd\u4f5c \u64cd\u4f5c 1: Change k w\uff1a\u5c06\u7b2c k \u6761\u6811\u679d\u4e0a\u6bdb\u6bdb\u679c\u7684\u4e2a\u6570\u6539\u53d8\u4e3a w \u4e2a\u3002 \u64cd\u4f5c 2: Cover u v w\uff1a\u5c06\u8282\u70b9 u \u4e0e\u8282\u70b9 v \u4e4b\u95f4\u7684\u6811\u679d\u4e0a\u6bdb\u6bdb\u679c\u7684\u4e2a\u6570\u90fd\u6539\u53d8\u4e3a w \u4e2a\u3002 \u64cd\u4f5c 3: Add u v w\uff1a\u5c06\u8282\u70b9 u \u4e0e\u8282\u70b9 v \u4e4b\u95f4\u7684\u6811\u679d\u4e0a\u6bdb\u6bdb\u679c\u7684\u4e2a\u6570\u90fd\u589e\u52a0 w \u4e2a\u3002 \u64cd\u4f5c 4: Max u v\uff1a\u8be2\u95ee\u8282\u70b9 u \u4e0e\u8282\u70b9 v \u4e4b\u95f4\u6811\u679d\u4e0a\u6bdb\u6bdb\u679c\u4e2a\u6570\u6700\u591a\u6709\u591a\u5c11\u4e2a\uinclude <bits/stdc++.h> #define ls rt << 1 #define rs rt << 1 | 1 using namespace std ; typedef long long ll ; const int N = 1e5 + 5 ; int n , m , t , Root ; int a [ N ], rnk [ N ]; ///a \u7528\u6bcf\u6761\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e2d\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e2a\u8282\u70b9\u4ee3\u8868\u8fd9\u6761\u8fb9\u7684\u6743\u503c\uff0crnk \u662f dfs \u5e8f\u4e3a i \u7684\u8282\u70b9 struct Edge { int next , to , val ; } edge [ N << 1 ]; ///\u8fb9 int head [ N ], etot ; void add ( int u , int v , int val ) { edge [ etot ] = { head [ u ], v , val }; head [ u ] = etot ++ ; } void init () { ///\u521d\u59cb\u5316 memset ( head , - 1 , sizeof ( head )); etot = 0 ; } class segmentTree { public : int tree [ N << 2 ], laz [ N << 2 ], laz2 [ N << 2 ]; ///laz \u662f\u8d4b\u503c laz\uff0claz2 \u662f\u52a0\u6cd5 laz void build ( int rt , int l , int r ) { laz [ rt ] = - 1 ; laz2 [ rt ] = 0 ; if ( l == r ) { tree [ rt ] = a [ rnk [ l ]]; return ; } int mid = ( l + r ) >> 1 ; build ( ls , l , mid ); build ( rs , mid + 1 , r ); tree [ rt ] = max ( tree [ ls ], tree [ rs ]); } void pushdown ( int rt , int l , int r ) { if ( laz [ rt ] != - 1 ) { laz2 [ ls ] = laz2 [ rs ] = 0 ; tree [ ls ] = laz [ ls ] = laz [ rt ]; tree [ rs ] = laz [ rs ] = laz [ rt ]; laz [ rt ] = - 1 ; } if ( laz2 [ rt ]) { tree [ ls ] += laz2 [ rt ]; tree [ rs ] += laz2 [ rt ]; laz2 [ ls ] += laz2 [ rt ]; laz2 [ rs ] += laz2 [ rt ]; laz2 [ rt ] = 0 ; } } void updateadd ( int rt , int l , int r , int ql , int qr , int val ) { if ( ql > qr ) return ; if ( ql <= l && r <= qr ) { tree [ rt ] += val ; laz2 [ rt ] += val ; return ; } pushdown ( rt , l , r ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) updateadd ( ls , l , mid , ql , qr , val ); if ( qr > mid ) updateadd ( rs , mid + 1 , r , ql , qr , val ); tree [ rt ] = max ( tree [ ls ], tree [ rs ]); } void updatefu ( int rt , int l , int r , int ql , int qr , int val ) { if ( ql > qr ) return ; if ( ql <= l && r <= qr ) { tree [ rt ] = val ; laz [ rt ] = val ; laz2 [ rt ] = 0 ; 39 return ; } pushdown ( rt , l , r ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) updatefu ( ls , l , mid , ql , qr , val ); if ( qr > mid ) updatefu ( rs , mid + 1 , r , ql , qr , val ); tree [ rt ] = max ( tree [ ls ], tree [ rs ]); } inline int query ( int rt , int l , int r , int ql , int qr ) { if ( ql > qr ) return 0 ; if ( ql <= l && r <= qr ) return tree [ rt ]; pushdown ( rt , l , r ); int mid = ( l + r ) >> 1 ; int res = 0 ; if ( ql <= mid ) res = max ( res , query ( ls , l , mid , ql , qr )); if ( qr > mid ) res = max ( res , query ( rs , mid + 1 , r , ql , qr )); return res ; } } Tree ; class TreeChainSubdivision { public : int son [ N ], tid [ N ], fa [ N ], dep [ N ], siz [ N ], top [ N ], dfscnt = 0 ; ///son \u91cd\u513f\u5b50\u7f16\u53f7,tid \u662f dfs \u5e8f,fa \u7236\u4eb2\u8282\u70b9,dep \u6df1\u5ea6\u4ece 1 \u5f00\u59cb\u7684 ///siz \u5b50\u6811\u5927\u5c0f,top \u5f53\u524d\u94fe\u9876\u7aef\u8282\u70b9,dfscnt \u662f dfs \u5e8f, ///\u591a\u7ec4\u8f93\u5165\u65f6 son \u8981\u521d\u59cb\u5316\uff01\uff01\uff01 void dfs1 ( int x , int f , int deep ) { dep [ x ] = deep ; siz [ x ] = 1 ; fa [ x ] = f ; int maxson = - 1 ; for ( int i = head [ x ]; i != - 1 ; i = edge [ i ]. next ) { int to = edge [ i ]. to ; if ( to == f ) continue ; a [ to ] = edge [ i ]. val ; dfs1 ( to , x , deep + 1 ); siz [ x ] += siz [ to ]; if ( siz [ to ] > maxson ) son [ x ] = to , maxson = siz [ to ]; } } void dfs2 ( int x , int topf ) { tid [ x ] = ++ dfscnt ; rnk [ dfscnt ] = x ; top [ x ] = topf ; if ( ! son [ x ]) return ; dfs2 ( son [ x ], topf ); 40 for ( int i = head [ x ]; i != - 1 ; i = edge [ i ]. next ) { int to = edge [ i ]. to ; if ( to == fa [ x ] || to == son [ x ]) continue ; dfs2 ( to , to ); } } void updpathadd ( int x , int y , int val ) { while ( top [ x ] != top [ y ]) { if ( dep [ top [ x ]] < dep [ top [ y ]]) swap ( x , y ); Tree . updateadd ( 1 , 1 , n , tid [ top [ x ]], tid [ x ], val ); x = fa [ top [ x ]]; } if ( dep [ x ] > dep [ y ]) swap ( x , y ); Tree . updateadd ( 1 , 1 , n , tid [ x ] + 1 , tid [ y ], val ); } void updpathfu ( int x , int y , int val ) { while ( top [ x ] != top [ y ]) { if ( dep [ top [ x ]] < dep [ top [ y ]]) swap ( x , y ); Tree . updatefu ( 1 , 1 , n , tid [ top [ x ]], tid [ x ], val ); x = fa [ top [ x ]]; } if ( dep [ x ] > dep [ y ]) swap ( x , y ); Tree . updatefu ( 1 , 1 , n , tid [ x ] + 1 , tid [ y ], val ); } int Qpath ( int x , int y ) { int ans = 0 ; while ( top [ x ] != top [ y ]) { if ( dep [ top [ x ]] < dep [ top [ y ]]) swap ( x , y ); ans = max ( ans , Tree . query ( 1 , 1 , n , tid [ top [ x ]], tid [ x ])); x = fa [ top [ x ]]; } if ( dep [ x ] > dep [ y ]) swap ( x , y ); ans = max ( ans , Tree . query ( 1 , 1 , n , tid [ x ] + 1 , tid [ y ])); return ans ; } } TCS ; int main () { init (); scanf ( \"%d\" , & n ); int u , v , k , val ; for ( int i = 1 ; i <= n - 1 ; i ++ ) { scanf ( \"%d%d%d\" , & u , & v , & val ); add ( u , v , val ); add ( v , u , val ); } 41 Root = 1 ; TCS . dfs1 ( Root , 0 , 1 ); TCS . dfs2 ( Root , Root ); Tree . build ( 1 , 1 , n ); char op [ 10 ]; while ( ~ scanf ( \"%s\" , op )) { if ( op [ 1 ] == 'h' ) { scanf ( \"%d%d\" , & k , & val ); k -- ; u = edge [ k << 1 ]. to ; v = edge [ k << 1 | 1 ]. to ; int now = TCS . dep [ u ] > TCS . dep [ v ] ? u : v ; Tree . updatefu ( 1 , 1 , n , TCS . tid [ now ], TCS . tid [ now ], val ); } else if ( op [ 1 ] == 'o' ) { scanf ( \"%d%d%d\" , & u , & v , & val ); TCS . updpathfu ( u , v , val ); } else if ( op [ 1 ] == 'd' ) { scanf ( \"%d%d%d\" , & u , & v , & val ); TCS . updpathadd ( u , v , val ); } else if ( op [ 1 ] == 'a' ) { scanf ( \"%d%d\" , & u , & v ); printf ( \"%d \\n \" , TCS . Qpath ( u , v )); } else break ; } return 0 ; } \u6574\u7406\u4eba\uff1a\u8ba1 18-7 \u725b\u4ed4\u8d85","title":"\u8fb9\u5256"},{"location":"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/","text":"poj 1912; \u9898\u610f\uff1a\u7ed9\u5b9a\u5e73\u9762\u4e0a n \u4e2a\u70b9\uff0c\u4e4b\u540e\u7ed9\u5b9a\u82e5\u5e72\u76f4\u7ebf\uff0c\u8be2\u95ee\u6240\u6709\u70b9\u65f6\u5019\u5728\u76f4\u7ebf\u7684\u4e00\u4fa7\uff1b \u601d\u8def\uff1a \u9996\u5148\u6c42\u53d6\u51f8\u5305\uff0c\u4e4b\u540e\u5c06\u51f8\u5305\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u7684\u503e\u659c\u89d2\u6c42\u51fa\uff0c\u5bf9\u503e\u659c\u89d2\u4e8c\u5206\uff0c\u627e\u51fa\u503e\u659c \u89d2\u6700\u63a5\u8fd1\u7ed9\u5b9a\u76f4\u7ebf\u503e\u659c\u89d2\u7684\u8fb9\u6240\u5bf9\u5e94\u7684\u70b9\uff0c\u5c06\u76f4\u7ebf\u65cb\u8f6c 180\u00b0\u540e\u5728\u6c42\u51fa\u5bf9\u5e94\u70b9\uff0c\u5224\u5b9a\u6240\u6c42\u4e24 \u70b9\u662f\u5426\u5728\u76f4\u7ebf\u4e24\u4fa7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 struct Line { Point p ; Vector v ; double ang ; Line () {} Line ( Point p , Vector v ) : p ( p ), v ( v ) { ang = atan2 ( v . y , v . x ); } Point point ( double t ) { return p + v * t ; } //\u6c42\u53d6\u76f4\u7ebf\u4e0a\u7684\u67d0\u4e00\u4e2a\u70b9 bool operator < ( Line & l ) { return ang < l . ang ; } //\u76f4\u7ebf\u9ed8\u8ba4\u4ee5\u503e\u659c\u89d2\u6392\u5e8f int Onleft ( Point P ) { return dcmp ( v ^ ( P - p )); } //\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u76f4\u7ebf\u7684\u5de6 \u4fa7 Point operator & ( Line & l ) //\u6c42\u53d6\u4e24\u76f4\u7ebf\u7684\u4ea4\u70b9 { Vector u = p - l . p ; double t = ( l . v ^ u ) / ( v ^ l . v ); return p + v * t ; } }; Point p [ N ], sta [ N ]; int n , top ; double af [ N ]; //\u7528\u4e8e\u8bb0\u5f55\u51f8\u5305\u6bcf\u4e00\u6761\u8fb9\u7684\u503e\u659c\u89d2 Line l ; bool cmp ( Point a , Point b ) //\u6781\u89d2\u6392\u5e8f { Vector v = a - p [ 0 ], w = b - p [ 0 ]; //\u4ee5\u67d0\u4e00\u70b9\u4e3a\u57fa\u51c6\u6c42\u51fa\u5176\u4ed6\u6240\u6709\u70b9\u76f8\u5bf9\u4e8e\u5b83\u7684\u6781\u89d2 83 if ( dcmp ( v ^ w ) < 0 ) return false ; else if ( ! dcmp ( v ^ w ) && dcmp ( sqr ( v ) - sqr ( w )) > 0 ) return false ; //\u6781\u89d2\u76f8\u540c\u4ee5\u5411\u91cf\u6a21\u957f \u6392\u5e8f return true ; } void graham () //\u51f8\u5305 { sort ( p + 1 , p + n , cmp ); n = unique ( p , p + n ) - p ; int t = n - 1 ; while ( t && ! (( p [ n - 1 ] - p [ 0 ]) ^ ( p [ t ] - p [ 0 ]))) t -- ; if ( ! t ) //\u5f53\u51f8\u5305\u9000\u5316\u4e3a\u4e00\u4e2a\u70b9\u6216\u8005\u4e00\u6761\u76f4\u7ebf\u65f6\u7684\u60c5\u51b5 { sta [ 0 ] = p [ 0 ]; top = 1 ; if ( n > 1 ) sta [ 1 ] = p [ n - 1 ], top = 2 ; return ; } reverse ( p + t + 1 , p + n ); //\u4e3a\u6c42\u53d6\u6240\u6709\u5728\u51f8\u5305\u8fb9\u754c\u4e0a\u7684\u70b9 sta [ top ++ ] = p [ 0 ]; sta [ top ++ ] = p [ 1 ]; p [ n ++ ] = p [ 0 ]; for ( int i = 2 ; i < n ; i ++ ) { while ( top > 1 && (( sta [ top - 1 ] - sta [ top - 2 ]) ^ ( p [ i ] - sta [ top - 2 ])) <= 0 ) top -- ; \u786e\u5b9a\u6bcf \u4e00\u4e2a\u89d2\u90fd\u4e0d\u4e3a\u4f18\u89d2 sta [ top ++ ] = p [ i ]; } top -- ; for ( int i = 0 ; i < top ; i ++ ) af [ i ] = atan2 ( sta [ i + 1 ]. y - sta [ i ]. y , sta [ i + 1 ]. x - sta [ i ]. x ); //\u6c42\u53d6\u6240\u6709\u8fb9\u7684\u503e\u659c\u89d2 } int main () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lf %lf\" , & p [ i ]. x , & p [ i ]. y ); if ( p [ i ] < p [ 0 ]) swap ( p [ i ], p [ 0 ]); } if ( n > 1 ) graham (); double a , b , c , d ; while ( ~ scanf ( \"%lf %lf %lf %lf\" , & a , & b , & c , & d )) { if ( n < 2 ) { puts ( \"GOOD\" ); 84 continue ; } l = Line ( Point ( a , b ), Vector ( c - a , d - b )); double l1 = atan2 ( l . v . y , l . v . x ), l2 = atan2 ( - l . v . y , - l . v . x ); int p1 = lower_bound ( af , af + top , l1 ) - af ; int p2 = lower_bound ( af , af + top , l2 ) - af ; if ( l . Onleft ( sta [ p1 ]) * l . Onleft ( sta [ p2 ]) < 0 ) puts ( \"BAD\" ); else puts ( \"GOOD\" ); } } \u6574\u7406\u4eba\uff1a\u7f51\u7edc 18 \u2013 3 \u51af\u7d2b\u541b","title":"\u51f8\u5305\u7684\u6c42\u53d6"},{"location":"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/","text":"poj3525\uff1b \u9898\u610f\u7ed9\u51fa\u4e00\u4e2a\u51f8\u591a\u8fb9\u5f62\uff0c\u6c42\u53d6\u5728\u8be5\u51f8\u591a\u8fb9\u5f62\u5185\u6700\u5927\u7684\u5706\u7684\u534a\u5f84\u4e3a\u591a\u5c11 \u601d\u8def\uff1a \u6bcf\u6b21\u5c06\u51f8\u591a\u8fb9\u7684\u6bcf\u4e00\u6761\u8fb9\u5411\u5185\u90e8\u79fb\u52a8\u4e00\u5b9a\u8ddd\u79bb\uff0c\u76f4\u5230\u51f8\u591a\u8fb9\u9762\u79ef\u6070\u597d\u4e3a\u96f6\u65f6\u8be5\u8ddd\u79bb\u8fb9 \u662f\u6240\u6c42\u5706\u7684\u534a\u5f84 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 int HAI ( Line * L , int n ) { sort ( L , L + n ); //\u76f4\u7ebf\u5411\u6309\u7167\u503e\u659c\u89d2\u6392\u5e8f int first , last ; Point * p = new Point [ n ]; //\u5229\u7528\u53cc\u7aef\u961f\u5217\u5b58\u53d6\u534a\u5e73\u9762\u4ea4\u7684\u4ea4\u70b9\uff0c\u4ee5\u53ca\u534a\u5e73\u9762 Line * l = new Line [ n ]; l [ first = last = 0 ] = L [ 0 ]; for ( int i = 1 ; i < n ; i ++ ) { while ( first < last && ! L [ i ]. Onleft ( p [ last - 1 ])) last -- ; while ( first < last && ! L [ i ]. Onleft ( p [ first ])) first ++ ; l [ ++ last ] = L [ i ]; if ( ! dcmp ( l [ last ]. v ^ l [ last - 1 ]. v )) //\u82e5\u5b58\u5728\u4e24\u4e2a\u503e\u659c\u89d2\u76f8\u7b49\u7684\u534a\u5e73\u9762\uff0c\u9009\u62e9\u8ddd\u79bb\u76f8\u4ea4 \u533a\u57df\u66f4\u8fd1\u7684\u4e00\u4e2a { last -- ; if ( l [ last ]. Onleft ( L [ i ]. p )) l [ last ] = L [ i ]; } if ( first < last ) p [ last - 1 ] = l [ last - 1 ] & l [ last ]; } while ( first < last && ! l [ first ]. Onleft ( p [ last - 1 ])) last -- ; if ( last - first <= 1 ) return 0 ; p [ last ] = l [ last ] & l [ first ]; return last - first + 1 ; } 85 int n ; Point p [ N ]; Vector dir [ N ], nor [ N ]; Line line [ N ]; int main () { while ( scanf ( \"%d\" , & n ), n ) { for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%lf %lf\" , & p [ i ]. x , & p [ i ]. y ); p [ n ] = p [ 0 ]; for ( int i = 0 ; i < n ; i ++ ) dir [ i ] = p [ i + 1 ] - p [ i ], nor [ i ] = normal ( dir [ i ]); double l = 0.0 , r = INF ; while ( dcmp ( r - l ) > 0 ) { double mid = ( l + r ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) line [ i ] = Line ( p [ i ] + nor [ i ] * mid , dir [ i ]); if ( HAI ( line , n )) l = mid ; else r = mid ; } printf ( \"%.6f \\n \" , l ); } return 0 ; } \u6574\u7406\u4eba\uff1a\u7f51\u7edc 18 \u2013 3 \u51af\u7d2b\u541b","title":"\u534a\u5e73\u9762\u4ea4"},{"location":"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //Aizu CGL_4_B; \u9898\u610f\uff1a\u7ed9\u5b9a\u5e73\u9762 n \u4e2a\u70b9\uff0c\u6c42\u53d6\u8ddd\u79bb\u6700\u5927\u7684\u70b9\u5bf9\uff1b double diame () { int i , j , k ; double res , t ; graham (); sta [ top ] = sta [ 0 ], res = 0.0 , j = 1 ; for ( i = 0 ; i < top ; i ++ ) { while ( dcmp ( fabs (( sta [ i ] - sta [ j ]) ^ ( sta [ i + 1 ] - sta [ j ])) - fabs (( sta [ i ] - sta [ j + 1 ]) ^ ( sta [ i + 1 ] - sta [ j + 1 ]))) < 0 ) //\u5bfb\u627e\u8ddd\u79bb\u56fa\u5b9a\u76f4\u7ebf\u8ddd\u79bb\u6700\u5927\u7684\u70b9 j = ( j + 1 ) % top ; t = sqr ( sta [ i ] - sta [ j ]); 86 if ( dcmp ( t - res ) > 0 ) res = t ; } return sqrt ( res ); } \u6574\u7406\u4eba\uff1a\u7f51\u7edc 18 \u2013 3 \u51af\u7d2b\u541b","title":"\u65cb\u8f6c\u5361\u58f3"},{"location":"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 //poj2318 \u9898\u610f: \u5728\u4e00\u4e2a\u77e9\u5f62\u76d2\u5b50\u5185\u7528 n \u5757\u9694\u677f\u5c06\u77e9\u5f62\u5206\u6210\u82e5\u4e2a\u4e2a\u533a\u57df(\u9694\u677f\u4e0d\u76f8\u4ea4), \u7ed9\u5b9a m \u4e2a\u70b9\uff0c\u95ee\uff08 n + 1 \uff09\u4e2a\u533a\u57df\u5185\u5206\u522b\u6709\u591a\u5c11\u4e2a\u70b9\uff1b \u601d\u8def\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u4e8c\u5206\u6c42\u51fa\u5b83\u6240\u5728\u7684\u533a\u57df #include <iostream> #include <cmath> #include <cstdio> #include <vector> #include <algorithm> #include <cstring> #define mem(a) memset(a, 0, sizeof a) using namespace std ; const int N = 1e5 + 7 ; const double eps = 1e-6 ; //\u63a7\u5236\u7cbe\u5ea6 int dcmp ( double x ) { if ( fabs ( x ) < eps ) return 0 ; else return x < 0 ? - 1 : 1 ; } struct Point { double x ; double y ; Point ( double x = 0 , double y = 0 ) : x ( x ), y ( y ) {} }; typedef Point Vector ; double operator * ( const Vector & v , const Vector & w ) { return v . x * w . x + v . y * w . y ; } //\u70b9\u79ef double operator ^ ( const Vector & v , const Vector & w ) { return v . x * w . y - v . y * w . x ; } //\u53c9\u79ef double sqr ( Vector v ) { return v * v ; } //\u5411\u91cf\u6a21\u7684\u5e73\u65b9 double length ( Vector v ) { return sqrt ( v * v ); } \u5411\u91cf\u7684\u6a21\u957f Vector operator - ( const Vector & v , const Vector & w ) { return Vector ( v . x - w . x , v . y - w . y ); } //\u5411\u91cf\u51cf\u6cd5 Vector operator + ( const Vector & v , const Vector & w ) { return Vector ( v . x + w . x , v . y + w . y ); } //\u5411\u91cf\u52a0\u6cd5 Vector operator * ( const Vector & v , double k ) { return Vector ( v . x * k , v . y * k ); } //\u5411\u91cf\u7684\u6570\u4e58 81 Vector rotate ( Vector v , double rad ) { return Vector ( v . x * cos ( rad ) - v . y * sin ( rad ), v . x * sin ( rad ) + v . y * cos ( rad )); } // \u5c06\u5411\u91cf\u9006\u65f6\u9488\u65cb\u8f6c rad Vector normal ( Vector v ) { return Vector ( - v . y / length ( v ), v . x / length ( v )); } //\u5411\u91cf\u7684\u5355\u4f4d\u6cd5\u5411\u91cf bool OnSeg ( Point O , Point A , Point B ) { return ! dcmp (( A - O ) ^ ( B - O )) && dcmp (( A - O ) * ( B - O )) <= 0 ; } //\u5224\u5b9a\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a bool operator == ( const Vector & A , const Vector & B ) { return ! dcmp ( A . x - B . x ) && ! dcmp ( A . y - B . y ); } //\u76f8\u91cf\u76f8\u7b49 bool operator < ( const Vector & v , const Vector & w ) { return v . x == w . x ? v . y < w . y : v . x < w . x ; } Point segs [ N ][ 2 ]; int n , m , res [ N ]; int find ( Point P ) { int l = 1 , r = n + 1 ; while ( l < r ) { int mid = l + r >> 1 ; Vector v = segs [ mid ][ 0 ] - segs [ mid ][ 1 ], w = P - segs [ mid ][ 1 ]; if (( v ^ w ) > 0 ) r = mid ; else l = mid + 1 ; } return l - 1 ; } int main () { bool flag = 0 ; while ( scanf ( \"%d\" , & n ), n ) { int x1 , x2 , y1 , y2 ; scanf ( \"%d%d%d%d%d\" , & m , & x1 , & y1 , & x2 , & y2 ); segs [ 0 ][ 0 ] = Point ( x1 , y1 ), segs [ 0 ][ 1 ] = Point ( x1 , y2 ); segs [ n + 1 ][ 0 ] = Point ( x2 , y1 ), segs [ n + 1 ][ 1 ] = Point ( x2 , y2 ); for ( int i = 1 ; i <= n ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); segs [ i ][ 0 ] = Point ( a , y1 ); segs [ i ][ 1 ] = Point ( b , y2 ); } mem ( res ); for ( int i = 0 ; i < m ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); 82 res [ find ( Point ( a , b ))] ++ ; } if ( ! flag ) flag = 1 ; else puts ( \"\" ); for ( int i = 0 ; i <= n ; i ++ ) printf ( \"%d: %d \\n \" , i , res [ i ]); } return 0 ; } \u6574\u7406\u4eba\uff1a\u7f51\u7edc 18 \u2013 3 \u51af\u7d2b\u541b","title":"\u70b9\u79ef\u53c9\u79ef\u7684\u8fd0\u7528"},{"location":"Graph/Dinic/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 ///\u6d1b\u8c37 P3376 typedef long long ll ; using namespace std ; const int INF = 2e9 + 7 ; 60 const int N = 2e4 + 7 ; const int M = 2e5 + 7 ; const int base = 100 ; struct edge { int to , nex , cap ; edge ( int to = 0 , int nex = 0 , int cap = 0 ) : to ( to ), nex ( nex ), cap ( cap ) {} }; class Dinic { public : int S , T , n , m , cnt ; int head [ N ], d [ N ], cur [ N ]; edge e [ M ]; void addedge ( int u , int v , int cap ) { e [ ++ cnt ] = edge ( v , head [ u ], cap ); head [ u ] = cnt ; } // \u5efa\u56fe void buildGraph ( int _n , int _m , int _S , int _T ) { // \u521d\u59cb\u5316\u90e8\u5206 n = _n ; m = _m ; S = _S ; T = _T ; mem ( head ); cnt = 1 ; // \u6784\u56fe\u90e8\u5206 for ( int i = 1 , u , v , cap ; i <= m ; i ++ ) { read ( u ); read ( v ); read ( cap ); addedge ( u , v , cap ); addedge ( v , u , 0 ); } } // \u627e\u589e\u5e7f\u8def bool bfs () { mem ( d ); queue < int > q ; 61 q . push ( S ); d [ S ] = 1 ; int u , v ; while ( q . size ()) { u = q . front (); q . pop (); for ( int i = head [ u ]; i ; i = e [ i ]. nex ) { v = e [ i ]. to ; if ( d [ v ] || e [ i ]. cap <= 0 ) continue ; d [ v ] = d [ u ] + 1 ; q . push ( v ); } } for ( int i = 0 ; i <= n ; i ++ ) cur [ i ] = head [ i ]; return d [ T ]; } int dfs ( int u , int flow ) { if ( u == T ) return flow ; for ( int & i = cur [ u ], v ; i ; i = e [ i ]. nex ) { v = e [ i ]. to ; if ( d [ v ] != d [ u ] + 1 || e [ i ]. cap <= 0 ) continue ; int delta = dfs ( v , min ( flow , e [ i ]. cap )); if ( delta <= 0 ) continue ; e [ i ]. cap -= delta ; e [ i ^ 1 ]. cap += delta ; return delta ; } return 0 ; } int get_maxFlow () { int maxFlow = 0 , tmp ; while ( bfs ()) while ( tmp = dfs ( S , INF )) maxFlow += tmp ; return maxFlow ; 62 } }; Dinic ways ; signed main () { int n , m , S , T ; while ( ~ scanf ( \"%d%d%d%d\" , & n , & m , & S , & T )) { ways . buildGraph ( n , m , S , T ); printf ( \"%d \\n \" , ways . get_maxFlow ()); } return 0 ; } \u6574\u7406\u4eba\uff1a\u7f51\u7edc 18-3 \u9ad8\u4e91\u6cfd","title":"Dinic+\u5f53\u524d\u5f27\u4f18\u5316"},{"location":"Graph/EK/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 ///\u6d1b\u8c37 P3376 typedef long long ll ; using namespace std ; const int INF = 2e9 + 7 ; const int N = 2e4 + 7 ; const int M = 2e5 + 7 ; struct edge { int to , nex , cap ; edge ( int to = 0 , int nex = 0 , int cap = 0 ) : to ( to ), nex ( nex ), cap ( cap ) {} }; class EK { public : int S , T , n , m , cnt ; int head [ N ], vis [ N ]; int pre [ N ], flow [ N ]; edge e [ M ]; void addedge ( int u , int v , int cap ) 58 { e [ ++ cnt ] = edge ( v , head [ u ], cap ); head [ u ] = cnt ; } // \u5efa\u56fe void buildGraph ( int _n , int _m , int _S , int _T ) { // \u521d\u59cb\u5316\u90e8\u5206 n = _n ; m = _m ; S = _S ; T = _T ; mem ( head ); mem ( vis ); cnt = 1 ; // \u6784\u56fe\u90e8\u5206 for ( int i = 1 , u , v , cap ; i <= m ; i ++ ) { read ( u ); read ( v ); read ( cap ); addedge ( u , v , cap ); addedge ( v , u , 0 ); } } // \u627e\u589e\u5e7f\u8def bool bfs () { mem ( vis ); queue < int > q ; q . push ( S ); vis [ S ] = 1 ; flow [ S ] = INF ; int u , v ; while ( q . size ()) { u = q . front (); q . pop (); for ( int i = head [ u ]; i ; i = e [ i ]. nex ) { v = e [ i ]. to ; if ( vis [ v ] || e [ i ]. cap <= 0 ) continue ; flow [ v ] = min ( flow [ u ], e [ i ]. cap ); pre [ v ] = i ; q . push ( v ); vis [ v ] = 1 ; if ( v == T ) return 1 ; } } return 0 ; 59 } int update () { int u = T ; while ( u != S ) { int i = pre [ u ]; e [ i ]. cap -= flow [ T ]; e [ i ^ 1 ]. cap += flow [ T ]; u = e [ i ^ 1 ]. to ; } return flow [ T ]; } int get_maxFlow () { int maxFlow = 0 ; while ( bfs ()) maxFlow += update (); return maxFlow ; } }; EK ways ; signed main () { int n , m , S , T ; while ( ~ scanf ( \"%d%d%d%d\" , & n , & m , & S , & T )) { ways . buildGraph ( n , m , S , T ); printf ( \"%d \\n \" , ways . get_maxFlow ()); } return 0 ; } \u6574\u7406\u4eba\uff1a\u7f51\u7edc 18-3 \u9ad8\u4e91\u6cfd","title":"EK \u7b97\u6cd5"},{"location":"Graph/ISAP/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 //\u6d1b\u8c37 P3376 typedef long long ll ; using namespace std ; const int INF = 2e9 + 7 ; const int N = 2e4 + 7 ; const int M = 2e5 + 7 ; const int base = 100 ; int n , m , S , T ; struct edge { int to , nex , cap ; edge ( int to = 0 , int nex = 0 , int cap = 0 ) : to ( to ), nex ( nex ), cap ( cap ) {} }; class ISAP { public : int S , T , n , m , cnt ; int head [ N ], d [ N ], cur [ N ], gap [ N ]; edge e [ M ]; void addedge ( int u , int v , int cap ) { e [ ++ cnt ] = edge ( v , head [ u ], cap ); 63 head [ u ] = cnt ; } // \u5efa\u56fe void buildGraph ( int _n , int _m , int _S , int _T ) { // \u521d\u59cb\u5316\u90e8\u5206 n = _n ; m = _m ; S = _S ; T = _T ; mem ( head ); cnt = 1 ; // \u6784\u56fe\u90e8\u5206 for ( int i = 1 , u , v , cap ; i <= m ; i ++ ) { read ( u ); read ( v ); read ( cap ); addedge ( u , v , cap ); addedge ( v , u , 0 ); } } // \u627e\u589e\u5e7f\u8def void bfs () { queue < int > q ; for ( int i = 1 ; i <= n ; i ++ ) { cur [ i ] = head [ i ]; d [ i ] = gap [ i ] = 0 ; } q . push ( T ); d [ T ] = gap [ 1 ] = 1 ; int u , v ; while ( q . size ()) { u = q . front (); q . pop (); for ( int i = head [ u ]; i ; i = e [ i ]. nex ) { v = e [ i ]. to ; if ( d [ v ]) continue ; d [ v ] = d [ u ] + 1 ; ++ gap [ d [ v ]]; q . push ( v ); } 64 } } int dfs ( int u , int flow ) { if ( u == T ) return flow ; int delta = 0 , v , temp ; for ( int & i = cur [ u ]; i ; i = e [ i ]. nex ) { v = e [ i ]. to ; if ( d [ v ] + 1 != d [ u ]) continue ; temp = dfs ( v , min ( flow - delta , e [ i ]. cap )); if ( temp ) { e [ i ]. cap -= temp ; e [ i ^ 1 ]. cap += temp ; delta += temp ; } if ( flow == delta ) return flow ; } if ( ! ( -- gap [ d [ u ]])) d [ S ] = n + 1 ; ++ gap [ ++ d [ u ]]; cur [ u ] = head [ u ]; return delta ; } int get_maxFlow () { bfs (); int maxFlow = 0 ; while ( d [ S ] <= n ) maxFlow += dfs ( S , INF ); return maxFlow ; } }; ISAP ways ; signed main () { int n , m , S , T ; while ( ~ scanf ( \"%d%d%d%d\" , & n , & m , & S , & T )) { ways . buildGraph ( n , m , S , T ); 65 printf ( \"%d \\n \" , ways . get_maxFlow ()); } return 0 ; } \u4f8b\u9898\uff1a \u7f51\u7edc\u6d41 24 \u9898 \u661f\u9645\u8f6c\u79fb Loj 6015 \u9898\u610f\uff1a \u73b0\u6709 n \u4e2a\u592a\u7a7a\u7ad9\u4f4d\u4e8e\u5730\u7403\u4e0e\u6708\u7403\u4e4b\u95f4\uff0c\u4e14\u6709 m \u8258\u516c\u5171\u4ea4\u901a\u592a\u7a7a\u8239\u5728\u5176\u95f4\u6765\u56de \u7a7f\u68ad\u3002\u6bcf\u4e2a\u592a\u7a7a\u7ad9\u53ef\u5bb9\u7eb3\u65e0\u9650\u591a\u7684\u4eba\uff0c\u800c\u6bcf\u8258\u592a\u7a7a\u8239 i \u53ea\u53ef\u5bb9\u7eb3 Hi \u4e2a\u4eba\u3002\u6bcf\u8258\u592a\u7a7a\u8239\u5c06 \u5468\u671f\u6027\u5730\u505c\u9760\u4e00\u7cfb\u5217\u7684\u592a\u7a7a\u7ad9\uff0c\u4f8b\u5982\uff1a1,3,4 \u8868\u793a\u8be5\u592a\u7a7a\u8239\u5c06\u5468\u671f\u6027\u5730\u505c\u9760\u592a\u7a7a\u7ad9 134134134\u22ef \u6bcf\u4e00\u8258\u592a\u7a7a\u8239\u4ece\u4e00\u4e2a\u592a\u7a7a\u7ad9\u9a76\u5f80\u4efb\u4e00\u592a\u7a7a\u7ad9\u8017\u65f6\u5747\u4e3a 1\u3002\u4eba\u4eec\u53ea\u80fd\u5728\u592a\u7a7a\u8239\u505c \u9760\u592a\u7a7a\u7ad9\uff08\u6216\u6708\u7403\u3001\u5730\u7403\uff09\u65f6\u4e0a\u3001\u4e0b\u8239\u3002 \u521d\u59cb\u65f6\u6240\u6709\u4eba\u5168\u5728\u5730\u7403\u4e0a\uff0c\u592a\u7a7a\u8239\u5168\u5728\u521d\u59cb\u7ad9\u3002 \u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u627e\u51fa\u8ba9\u6240\u6709\u4eba\u5c3d\u5feb\u5730\u5168\u90e8\u8f6c\u79fb\u5230\u6708\u7403\u4e0a\u7684\u8fd0\u8f93\u65b9\u6848\u3002 \u5206\u6790\uff1a \u8fd9\u4e2a\u9898\u5176\u5b9e\u548c\u201c\u9b54\u672f\u7403\u201d\u8fd9\u4e2a\u9898\u7c7b\u4f3c\u3002\u9898\u610f\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e9b\u4eba\u8981\u4ece A ---> B \uff0c\u7a7a\u95f4 \u7ad9\u4e3a\u4e2d\u8f6c\u70b9\uff0c\u901a\u8fc7\u98de\u8239\u8f6c\u79fb\uff0c\u8fd9\u4e9b\u98de\u8239\u6bcf\u4e00\u5929\u51fa\u73b0\u5728\u56fa\u5b9a\u7a7a\u95f4\u7ad9\uff0c\u4e5f\u5373\u662f\u8bf4\u5929\u6570\u4e0d\u4e00\u5b9a\u7684\u65f6 \u5019\uff0c\u6574\u4e2a\u8fd0\u8f93\u56fe\u5c31\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u800c\u6bcf\u4e00\u5929\u4e4b\u95f4\u53c8\u662f\u6709\u5173\u7cfb\u7684\u3002 \u5c31\u597d\u50cf\uff0c\u6bcf\u4e00\u5929\u7684\u7a7a\u95f4\u7ad9\u662f\u4e0d \u4e00\u6837\u7684\uff08\u56e0\u4e3a\u98de\u8239\u98de\u884c\u7ebf\u8def\u4e0d\u4e00\u6837\u4e86\uff09\uff0c\u6240\u4ee5\u8003\u8651\u5230 \u5730\u7403\uff080 \u53f7\u70b9\uff09\u3001n \u4e2a\u7a7a\u95f4\u7ad9\u548c\u6708\u4eae\uff08n + 1 \u53f7\u70b9\uff09\u5171 n + 2 \u4e2a\u70b9\uff0c\u6bcf\u4e00\u5929\u5206\u88c2\u4e00\u6b21\uff08\u5373\u62e5\u6709\u4e00\u4e2a\u65b0\u7684\u72b6\u6001\uff09\uff0c\u6709\u56e0\u4e3a\u5171\u7ecf\u5386 t \u5929\uff0c \u5b8c\u6210\u8fd0\u8f93\uff0c\u6545 \u5c06\u8981\u5206\u88c2\u51fa t * (n + 2) \u4e2a\u70b9\u3010\u5373\u662f\u8bf4\u5c06\u6bcf\u4e00\u5929\u7684\u8fd9 n + 2 \u4e2a\u70b9\u770b\u6210\u4e00\u4e2a\u65b0\u7684 \u70b9\u3011\uff0c\u679a\u4e3e\u6bcf\u4e00\u5929 day\uff0c\u4ee4 yesterday = (n + 2) * (day \u2013 1)\uff0ctoday = (n + 2) * day\uff1b \u5219\u6bcf\u4e00\u4e2a \u70b9 i\u2019 = yesterday + i \uff08\u4ee3\u8868\u6628\u5929\u5bf9\u5e94\u7684\u70b9\uff09, i = today + i \uff08\u4ee3\u8868\u4eca\u5929\u7684\u70b9\uff09\uff1b\u6545 i\u2019--->i \uff0c\u5bb9 \u91cf\u4e3a INF\uff0c (n + 1) + today ---> T \uff0c\u5bb9\u91cf\u4e3a INF; \u5728\u4ece\u6bcf\u4e00\u4e2a\u98de\u8239\u524d\u4e00\u5929\u6240\u5728\u7684\u592a\u7a7a\u7ad9\u8fde\u5411\u540e\u4e00\u5929\u7684\u592a\u7a7a\u7ad9\uff0c\u6d41\u91cf\u4e3a\u98de\u8239\u53ef\u5bb9\u7eb3\u4eba \u6570\uff1b \u5728\u6700\u5f00\u59cb\u7684\u65f6\u5019 \u94fe\u63a5\u4e00\u6761\uff0c S ----> 0 \uff0c\u5bb9\u91cf\u4e3a INF \u7684\u8fb9 \u8dd1\u6700\u5927\u6d41\u76f4\u5230\u4e0d\u5c0f\u4e8e\u603b\u4eba\u6570\u5373\u53ef\u3002\uff08\u6bcf\u4e00\u5929\u7684\u6700\u5927\u6d41\u5e94\u7d2f\u52a0\u8d77\u6765\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 #pragma GCC optimize(2) #include <bits/stdc++.h> #define read(a) scanf(\"%d\", &a) #define readl(a) scanf(\"%lld\", &a) #define reads(a) scanf(\"%s\", a) #define readc(a) scanf(\"%c\", &a) #define pb push_back #define mem(a) memset(a, 0, sizeof(a)) #define Buff ios::sync_with_stdio(false) typedef long long ll ; using namespace std ; const int INF = 2e9 + 7 ; const int N = 1e5 + 7 ; const int M = 1e6 + 7 ; const int _N = 102 ; const int base = 100 ; int n , m , S , T ; struct edge 66 { int to , nex , cap ; edge ( int to = 0 , int nex = 0 , int cap = 0 ) : to ( to ), nex ( nex ), cap ( cap ) {} }; int pre [ _N ], station [ _N ][ _N ], r [ _N ], H [ _N ]; int head [ N ], d [ N ], cur [ N ], gap [ N ]; edge e [ M ]; class ISAP { public : int S , T , n , m , cnt , K ; void addedge ( int u , int v , int cap ) { e [ ++ cnt ] = edge ( v , head [ u ], cap ); head [ u ] = cnt ; e [ ++ cnt ] = edge ( u , head [ v ], 0 ); head [ v ] = cnt ; // printf(\"%d --- %d, %d\\n\", u, v, cap); } // \u5efa\u56fe void buildGraph () { // \u521d\u59cb\u5316\u90e8\u5206 read ( n ); read ( m ); read ( K ); mem ( head ); cnt = 1 ; S = N - 2 ; T = N - 1 ; for ( int i = 1 ; i <= m ; i ++ ) { read ( H [ i ]); read ( r [ i ]); for ( int j = 1 ; j <= r [ i ]; j ++ ) read ( station [ i ][ j ]); pre [ i ] = 1 ; } n += 2 ; addedge ( S , 0 , INF ); int ans = 0 ; for ( int day = 1 ; day <= 30 ; day ++ ) 67 { int today = n * day , yesterday = n * ( day - 1 ), now ; for ( int i = 0 ; i < n ; i ++ ) addedge ( yesterday + i , today + i , INF ); addedge ( today + n - 1 , T , INF ); for ( int i = 1 ; i <= m ; i ++ ) { now = pre [ i ] + 1 ; if ( now > r [ i ]) now = 1 ; addedge ( station [ i ][ pre [ i ]] + yesterday , station [ i ][ now ] + today , H [ i ]); pre [ i ] = now ; } ans += get_maxFlow (); if ( ans >= K ) { printf ( \"%d \\n \" , day ); return ; } } printf ( \"%d \\n \" , 0 ); } // \u627e\u589e\u5e7f\u8def void bfs () { queue < int > q ; for ( int i = 0 ; i <= T ; i ++ ) { cur [ i ] = head [ i ]; d [ i ] = gap [ i ] = 0 ; } q . push ( T ); d [ T ] = gap [ 1 ] = 1 ; int u , v ; while ( q . size ()) { u = q . front (); q . pop (); for ( int i = head [ u ]; i ; i = e [ i ]. nex ) { v = e [ i ]. to ; if ( d [ v ]) continue ; 68 d [ v ] = d [ u ] + 1 ; ++ gap [ d [ v ]]; q . push ( v ); } } } int dfs ( int u , int flow ) { if ( u == T ) return flow ; int delta = 0 , v , temp ; for ( int & i = cur [ u ]; i ; i = e [ i ]. nex ) { v = e [ i ]. to ; if ( d [ v ] + 1 != d [ u ]) continue ; temp = dfs ( v , min ( flow - delta , e [ i ]. cap )); if ( temp ) { e [ i ]. cap -= temp ; e [ i ^ 1 ]. cap += temp ; delta += temp ; } if ( flow == delta ) return flow ; } if ( ! ( -- gap [ d [ u ]])) d [ S ] = T + 1 ; ++ gap [ ++ d [ u ]]; cur [ u ] = head [ u ]; return delta ; } int get_maxFlow () { bfs (); int maxFlow = 0 ; while ( d [ S ] <= T ) maxFlow += dfs ( S , INF ); return maxFlow ; } }; 69 ISAP ways ; signed main () { ways . buildGraph (); return 0 ; } \u6574\u7406\u4eba\uff1a\u7f51\u7edc 18-3 \u9ad8\u4e91\u6cfd","title":"ISAP\u7b97\u6cd5"},{"location":"Graph/KM%E7%AE%97%E6%B3%95/","text":"///HDU2255 \u6c42\u6700\u4f18\u5339\u914d \u9898\u610f\uff1a\u6709 N \u5bb6\u8001\u767e\u59d3\u548c N \u95f4\u623f\u5b50\uff0c\u8981\u7ed9\u6bcf\u5bb6\u5206\u914d\u4e00\u95f4\u623f\uff0c\u6bcf\u4e2a\u6751 \u6c11\u5bf9\u4e0d\u540c\u7684\u623f\u5b50\u51fa\u4ef7\u4e0d\u540c\uff0c\u73b0\u5728\u6751\u957f\u8981\u8ba9\u5229\u76ca\u6700\u5927\u5316\uff0c\u95ee\u5e94\u600e\u4e48\u5206\u914d\u624d\u80fd\u8ba9\u6751\u6c11\u51fa\u7684\u94b1\u6570\u603b \u548c\u6700\u5927\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 #include <cstdio> #include <cstring> #include <algorithm> using namespace std ; int mp [ 303 ][ 303 ]; //\u8bb0\u5f55\u6751\u6c11\u5bf9\u5404\u4e2a\u623f\u5b50\u51fa\u4ef7\u60c5\u51b5 int lin [ 303 ]; //\u6807\u8bb0\u623f\u5b50\u6240\u5339\u914d\u5230\u7684\u6751\u6c11 int viy [ 303 ]; //\u6807\u8bb0\u623f\u5b50\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 int vix [ 303 ]; //\u6807\u8bb0\u6751\u6c11\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 int x [ 303 ]; //\u8bb0\u5f55\u6751\u6c11\u7684\u70b9\u6743 int y [ 303 ]; //\u8bb0\u5f55\u623f\u5b50\u7684\u70b9\u6743 int n ; int lack , t ; //lack \u8bb0\u5f55\u5355\u6b21\u8981\u6539\u53d8\u7684\u70b9\u6743\u5927\u5c0f int dfs ( int u ) { vix [ u ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( ! viy [ i ]) { 56 t = x [ u ] + y [ i ] - mp [ u ][ i ]; if ( t == 0 ) //t \u4e3a\u96f6\u4ee3\u8868 u \u6751\u6c11\u53ef\u4ee5\u548c i \u623f\u5b50\u5339\u914d { viy [ i ] = 1 ; if ( dfs ( lin [ i ]) || ! lin [ i ]) //i\u623f\u5b50\u6ca1\u5339\u914d\u8fc7\u6216i\u623f\u5b50\u5339\u914d\u5230\u7684\u6751\u6c11\u53ef\u4ee5\u4e0e\u5176\u5b83\u623f \u5b50\u5339\u914d { lin [ i ] = u ; return 1 ; } } else if ( lack > t ) lack = t ; } } return 0 ; } void KM () { memset ( y , 0 , sizeof ( y )); memset ( x , 0 , sizeof ( x )); memset ( lin , 0 , sizeof ( lin )); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) x [ i ] = max ( x [ i ], mp [ i ][ j ]); //x[i]\u8bb0\u5f55 i \u6751\u6c11\u6240\u6709\u51fa\u4ef7\u4e2d\u6700\u5927\u7684\u503c for ( int i = 1 ; i <= n ; i ++ ) { while ( 1 ) { memset ( vix , 0 , sizeof ( vix )); memset ( viy , 0 , sizeof ( viy )); lack = 1e9 + 7 ; if ( dfs ( i )) //i \u6751\u6c11\u5339\u914d\u6210\u529f break ; for ( int i = 1 ; i <= n ; i ++ ) { if ( vix [ i ]) x [ i ] -= lack ; //\u6751\u6c11\u70b9\u6743\u51cf\u5c0f if ( viy [ i ]) y [ i ] += lack ; //\u623f\u5b50\u70b9\u6743\u589e\u5927 } } } } int main () { 57 while ( ~ scanf ( \"%d\" , & n )) { memset ( mp , 0 , sizeof ( mp )); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) { scanf ( \"%d\" , & mp [ i ][ j ]); } KM (); int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += mp [ lin [ i ]][ i ]; //\u6c42\u548c } printf ( \"%d \\n \" , ans ); } } \u6574\u7406\u4eba\uff1a\u8ba1 18-5 \u738b\u4f73\u59ae","title":"KM \u7b97\u6cd5"},{"location":"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 //\u6d1b\u8c37 P3381 typedef long long ll ; using namespace std ; const int INF = 1e18 + 7 ; const int N = 2e4 + 7 ; const int M = 2e5 + 7 ; const int base = 100 ; ll dis [ N ]; struct edge { int to , nex ; ll cap , cost ; edge ( int to = 0 , int nex = 0 , ll cap = 0 , ll cost = 0 ) : to ( to ), nex ( nex ), cap ( cap ), cost ( cost ) {} }; struct cmp { bool operator ()( int a , int b ) { return dis [ a ] > dis [ b ]; } }; class MCMF // MinCostMaxFlow { public : int S , T , n , m , cnt ; int head [ N ], Inq [ N ], pre [ N ]; ll flow [ N ]; edge e [ M ]; void addedge ( int u , int v , ll cap , ll cost ) { 70 e [ ++ cnt ] = edge ( v , head [ u ], cap , cost ); head [ u ] = cnt ; } // \u5efa\u56fe void buildGraph ( int _n , int _m , int _S , int _T ) { // \u521d\u59cb\u5316\u90e8\u5206 n = _n ; m = _m ; S = _S ; T = _T ; mem ( head ); cnt = 1 ; // \u6784\u56fe\u90e8\u5206 for ( int i = 1 ; i <= m ; i ++ ) { int u , v ; ll cap , cost ; read ( u ); read ( v ); readl ( cap ); readl ( cost ); addedge ( u , v , cap , cost ); addedge ( v , u , 0ll , - cost ); } } // \u627e\u589e\u5e7f\u8def bool SPFA () { priority_queue < int , vector < int > , cmp > q ; for ( int i = 0 ; i <= n ; i ++ ) { dis [ i ] = INF ; Inq [ i ] = 0 ; } dis [ S ] = 0 ; Inq [ S ] = 1 ; flow [ S ] = INF ; // q.push(make_pair(-dis[S], S)); q . push ( S ); int u , v ; ll cost ; // pair<ll, int> tmp; while ( q . size ()) { u = q . top (); q . pop (); Inq [ u ] = 0 ; // u = tmp.second; cost = -tmp.first; for ( int i = head [ u ]; i ; i = e [ i ]. nex ) 71 { v = e [ i ]. to ; // cout << \"u = \" << u << \" , v = \" << v << \"\\n\"; if ( ! e [ i ]. cap ) continue ; cost = dis [ u ] + e [ i ]. cost ; if ( dis [ v ] > cost ) { dis [ v ] = cost ; flow [ v ] = min ( flow [ u ], e [ i ]. cap ); pre [ v ] = i ; if ( ! Inq [ v ]) { q . push ( v ); Inq [ v ] = 1 ; } } } } return dis [ T ] != INF ; } void update () { int u = T ; while ( u != S ) { int i = pre [ u ]; e [ i ]. cap -= flow [ T ]; e [ i ^ 1 ]. cap += flow [ T ]; u = e [ i ^ 1 ]. to ; } } void get_MCMF () { ll maxFlow = 0 ; ll minCost = 0ll ; while ( SPFA ()) { update (); maxFlow += flow [ T ]; minCost += flow [ T ] * dis [ T ]; } printf ( \"%lld %lld \\n \" , maxFlow , minCost ); } 72 }; MCMF ways ; signed main () { int n , m , S , T ; while ( ~ scanf ( \"%d%d%d%d\" , & n , & m , & S , & T )) { ways . buildGraph ( n , m , S , T ); ways . get_MCMF (); // printf(\"%lld %lld\\n\", tmp.second, tmp.first); } return 0 ; } \u4f8b\u9898\uff1a \u7f51\u7edc\u6d41 24 \u9898 \u9910\u5dfe\u8ba1\u5212 LOJ 6008 \u9898\u610f\uff1a \u4e00\u4e2a\u9910\u5385\u5728\u76f8\u7ee7\u7684 N \u5929\u91cc,\u6bcf\u5929\u9700\u7528\u7684\u9910\u5dfe\u6570\u4e0d\u5c3d\u76f8\u540c\u3002\u5047\u8bbe\u7b2c i \u5929\u9700\u8981 ri \u5757\u9910\u5dfe ( i=1,2,...,N)\u3002\u9910\u5385\u53ef\u4ee5\u8d2d\u4e70\u65b0\u7684\u9910\u5dfe,\u6bcf\u5757\u9910\u5dfe\u7684\u8d39\u7528\u4e3a p \u5206;\u6216\u8005\u628a\u65e7\u9910\u5dfe\u9001\u5230\u5feb\u6d17\u90e8,\u6d17\u4e00 \u5757\u9700 m \u5929,\u5176\u8d39\u7528\u4e3a f \u5206;\u6216\u8005\u9001\u5230\u6162\u6d17\u90e8,\u6d17\u4e00\u5757\u9700 n(n>m),\u5176\u8d39\u7528\u4e3a s \u5206(s < f). \u6bcf\u5929\u7ed3\u675f \u65f6,\u9910\u5385\u5fc5\u987b\u51b3\u5b9a\u5c06\u591a\u5c11\u5757\u810f\u7684\u9910\u5dfe\u9001\u5230\u5feb\u6d17\u90e8,\u591a\u5c11\u5757\u9910\u5dfe\u9001\u5230\u6162\u6d17\u90e8,\u4ee5\u53ca\u591a\u5c11\u5757\u4fdd\u5b58\u8d77 \u6765\u5ef6\u671f\u9001\u6d17\u3002\u4f46\u662f\u6bcf\u5929\u6d17\u597d\u7684\u9910\u5dfe\u548c\u8d2d\u4e70\u7684\u65b0\u9910\u5dfe\u6570\u4e4b\u548c,\u8981\u6ee1\u8db3\u5f53\u5929\u7684\u9700\u6c42\u91cf\u3002\u8bd5\u8bbe\u8ba1\u4e00 \u4e2a\u7b97\u6cd5\u4e3a\u9910\u5385\u5408\u7406\u5730\u5b89\u6392\u597d N \u5929\u4e2d\u9910\u5dfe\u4f7f\u7528\u8ba1\u5212,\u4f7f\u603b\u7684\u82b1\u8d39\u6700\u5c0f\u3002\u7f16\u7a0b\u627e\u51fa\u4e00\u4e2a\u6700\u4f73\u9910\u5dfe \u4f7f\u7528\u8ba1\u5212\u3002 \u5206\u6790\uff1a \u6211\u4eec\u4e0d\u59a8\u5148\u8ba9\u6bcf\u5929\u5f00\u59cb\u65f6\u5f97\u5230\u7684 r[i]\u6761\u5e72\u51c0\u7684\u9910\u5dfe\uff08\u5de6\u8fb9\u4e00\u5217\u7684\u8282\u70b9\uff09\u6d41\u5411 t\uff0c\u7136\u540e\u518d \u5728\u6bcf\u5929\u7ed3\u675f\u65f6\u4ece s \u8865\u56de r[i]\u6761\u810f\u7684\u9910\u5dfe\uff08\u4ece s \u5411\u53f3\u8fb9\u4e00\u5217\u7684\u8282\u70b9\u8fde r[i],0 \u7684\u8fb9\uff09\uff0c\u5f97\u5230\u65b0\u56fe\u7684 \u94fe\u63a5\u65b9\u5f0f\uff1a 1 2 3 4 5 6 7 s -> i (r,p) \u6bcf\u5929\u65e9\u6668\u53ef\u4ee5\u4e70\u6700\u591a r \u6761\u65b0\u9910\u5dfe \u4e00\u6761 p \u5206 s -> i' (r,0) \u6bcf\u5929\u7528\u5269\u4e0b r \u6761\u810f\u9910\u5dfe \u6ca1\u6709\u4ee3\u4ef7 i -> t (r,0) \u6bcf\u5929\u8981\u7528 r \u6761\u5e72\u51c0\u9910\u5dfe \u6ca1\u6709\u4ee3\u4ef7 i' -> i+m (inf,f)\u810f\u6bdb\u5dfe\u9001\u5230\u5feb\u6d17\u5e97 \u6d17\u5e72\u51c0\u9001\u56de\u6765\u662f\u7b2c i+m \u5929\u6bcf\u6761\u82b1\u8d39\u4ee3\u4ef7 f \u5206 i' ->i+n (inf,s)\u810f\u6bdb\u5dfe\u9001\u5230\u6162\u6d17\u5e97 \u6d17\u5e72\u51c0\u9001\u56de\u6765\u662f\u7b2c i+n \u5929 \u6bcf\u6761\u82b1\u8d39\u4ee3\u4ef7 s \u5206 i' -> (i+1)' (inf,s) \u6bcf\u6761\u810f\u6bdb\u5dfe\u7559\u5230\u7b2c\u4e8c\u5929\u518d\u5904\u7406 \u6ca1\u6709\u4ee3\u4ef7 \u6700\u540e\u8dd1\u4e00\u6b21\u6700\u5c0f\u8d39\u7528\u6d41 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 #pragma GCC optimize(2) #include <bits/stdc++.h> #define read(a) scanf(\"%d\", &a) #define readl(a) scanf(\"%lld\", &a) #define reads(a) scanf(\"%s\", a) #define readc(a) scanf(\"%c\", &a) #define pb push_back #define mem(a) memset(a, 0, sizeof(a)) #define Buff ios::sync_with_stdio(false) 73 typedef long long ll ; using namespace std ; const ll INF = 1e16 + 7 ; const int N = 2e5 + 7 ; const int M = 1e6 + 7 ; ll dis [ N ], flow [ N ]; int head [ N ], cnt , Inq [ N ], pre [ N ]; int S , T , n , d1 , d2 ; ll p , f , s ; struct edge { int to , nex ; ll w , cost ; edge ( int _to = 0 , ll _w = 0 , ll _cost = 0 , int _nex = 0 ) { to = _to ; nex = _nex ; w = _w ; cost = _cost ; } } e [ M ]; void addedge ( int u , int v , ll w , ll cost ) { e [ ++ cnt ] = edge ( v , w , cost , head [ u ]); head [ u ] = cnt ; e [ ++ cnt ] = edge ( u , 0ll , - cost , head [ v ]); head [ v ] = cnt ; } queue < int > q ; bool SPAF () { while ( q . size ()) q . pop (); for ( int i = 0 ; i < N ; i ++ ) { dis [ i ] = INF ; Inq [ i ] = 0 ; } q . push ( S ); dis [ S ] = 0 ; Inq [ S ] = 1 ; flow [ S ] = INF ; int u , v ; ll cost ; while ( q . size ()) { u = q . front (); q . pop (); Inq [ u ] = 0 ; for ( int i = head [ u ]; i ; i = e [ i ]. nex ) { if ( ! e [ i ]. w ) continue ; v = e [ i ]. to ; cost = dis [ u ] + e [ i ]. cost ; if ( dis [ v ] > cost ) 74 { dis [ v ] = cost ; flow [ v ] = min ( flow [ u ], e [ i ]. w ); pre [ v ] = i ; if ( ! Inq [ v ]) { q . push ( v ); Inq [ v ] = 1 ; } } } } return dis [ T ] != INF ; } ll maxFlow , minCost ; void update () { int u = T , i ; while ( u != S ) { i = pre [ u ]; e [ i ]. w -= flow [ T ]; e [ i ^ 1 ]. w += flow [ T ]; u = e [ i ^ 1 ]. to ; } maxFlow += flow [ T ]; minCost += flow [ T ] * dis [ T ]; } void EK () { maxFlow = minCost = 0ll ; while ( SPAF ()) update (); printf ( \"%lld \\n \" , minCost ); } void buildGraph () { read ( n ); readl ( p ); read ( d1 ); readl ( f ); read ( d2 ); readl ( s ); mem ( head ); cnt = 1 ; S = 0 ; T = n << 1 | 1 ; for ( int i = 1 ; i <= n ; i ++ ) 75 { ll r ; readl ( r ); addedge ( S , i , r , p ); addedge ( S , i + n , r , 0ll ); addedge ( i , T , r , 0ll ); if ( i + 1 <= n ) addedge ( i + n , i + 1 + n , INF , 0ll ); if ( i + d1 <= n ) addedge ( i + n , i + d1 , INF , f ); if ( i + d2 <= n ) addedge ( i + n , i + d2 , INF , s ); } } signed main () { buildGraph (); EK (); return 0 ; } \u6574\u7406\u4eba\uff1a\u7f51\u7edc 18-3 \u9ad8\u4e91\u6cfd","title":"SPFA \u8d39\u7528\u6d41"},{"location":"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/","text":"///POJ1274 \u6c42\u6700\u5927\u5339\u914d \u9898\u610f\uff1a\u6709 N \u6761\u725b\u548c M \u4e2a\u725b\u68da\uff0c\u6bcf\u6761\u725b\u90fd\u6709\u81ea\u5df1\u559c\u6b22\u7684\u51e0\u4e2a\u725b\u68da\uff0c\u95ee \u6700\u591a\u53ef\u4ee5\u8ba9\u591a\u5c11\u6761\u725b\u5446\u5728\u81ea\u5df1\u559c\u6b22\u7684\u725b\u68da\uff08\u725b\u68da\u548c\u725b\u4e00\u5bf9\u4e00\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <cstdio> #include <cstring> using namespace std ; typedef long long ll ; const int N = 1e5 + 10 ; const int mod = 1e9 + 7 ; int d [ 205 ][ 205 ]; //d \u6570\u7ec4\u6807\u8bb0\u6709\u54ea\u4e9b\u8fb9 int lin [ 205 ]; //lin \u6570\u7ec4\u6807\u8bb0\u725b\u68da\u5339\u914d\u5230\u4e86\u54ea\u5934\u725b int vi [ 205 ]; //vi \u6570\u7ec4\u6807\u8bb0\u725b\u68da\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 int n , m ; int fin ( int x ) { for ( int i = 1 ; i <= m ; i ++ ) { if ( d [ i ][ x ] && vi [ i ] == 0 ) { vi [ i ] = 1 ; if ( lin [ i ] == 0 || fin ( lin [ i ]) == 1 ) //i \u53f7\u725b\u68da\u8fd8\u6ca1\u6709\u5339\u914d\u725b\u6216\u53ef\u4ee5\u4e3a\u5b83\u6240\u5339\u914d\u7684\u725b\u627e\u4e00 \u4e2a\u65b0\u7684\u6ee1\u610f\u7684\u725b\u68da { lin [ i ] = x ; return 1 ; } } } return 0 ; } int main () { while ( ~ scanf ( \"%d%d\" , & n , & m )) { memset ( d , 0 , sizeof ( d )); memset ( lin , 0 , sizeof ( lin )); int c , u ; 55 for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & c ); while ( c -- ) { scanf ( \"%d\" , & u ); d [ i ][ u ] = 1 ; //\u8fde\u8fb9 } } int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { memset ( vi , 0 , sizeof ( vi )); //vi \u6570\u7ec4\u6bcf\u6b21\u90fd\u8981\u6e05 if ( fin ( i ) == 1 ) //i \u53f7\u725b\u627e\u5230\u53ef\u4ee5\u4e0e\u5b83\u5339\u914d\u7684\u725b\u68da cnt ++ ; } printf ( \"%d \\n \" , cnt ); } } \u6574\u7406\u4eba\uff1a\u8ba1 18-5 \u738b\u4f73\u59ae","title":"\u5308\u7259\u5229\u7b97\u6cd5"},{"location":"Others/","text":"","title":"Index"},{"location":"Others/Time/","text":"1. \u641c\u7d22 \u00b6 n\u4e2a\u70b9/\u72b6\u6001,m\u6761\u8fb9 DFS BFS \u53cc\u5411\u641c\u7d22 \u8bb0\u5fc6\u5316\u641c\u7d22 \u6781\u5927\u6781\u5c0f\u641c\u7d22 \u542f\u53d1\u5f0f\u641c\u7d22 \u65f6\u95f4\u590d\u6742\u5ea6 O(N) O(N) O(N) O(N) O(N^{\\frac{1}{2}}-N^2) O(N^{\\frac{1}{2}}-N^2) O(N) O(N) <<O(N) <<O(N) <<O(N) <<O(N) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N) O(N) O(N) O(N) O(N^{\\frac{1}{2}}-N^2) O(N^{\\frac{1}{2}}-N^2) O(N) O(N) <<O(N) <<O(N) <<O(N) <<O(N) \u5907\u6ce8 \u4e0d\u7a33\u5b9a \u4e0e\u542f\u53d1\u51fd\u6570\u6709\u5173 2. \u52a8\u6001\u89c4\u5212 \u00b6 \u72b6\u538bDP \u6811\u5f62DP \u533a\u95f4DP \u6570\u4f4dDP \u6982\u7387DP \u65f6\u95f4\u590d\u6742\u5ea6 O(N^2*2^n) O(N^2*2^n) O(N) O(N) O(N^3) O(N^3) O(size[dp]) O(size[dp]) O(size[dp]) O(size[dp]) \u7a7a\u95f4\u590d\u6742\u5ea6 O(2^n) O(2^n) O(N) O(N) O(N^2) O(N^2) O(size[dp]) O(size[dp]) O(size[dp]) O(size[dp]) \u5907\u6ce8 \u90fd\u662f\u6570\u7ec4\u5927\u5c0f \u90fd\u662f\u6570\u7ec4\u5927\u5c0f 3. \u6570\u636e\u7ed3\u6784 \u00b6 \u4e00\u7ef4\u6811\u72b6\u6570\u7ec4 \u6811\u5f62DP ST\u8868 RMQ \u7ebf\u6bb5\u6811 \u65f6\u95f4\u590d\u6742\u5ea6 O(\\log n) O(\\log n) O(\\log N * \\log M) O(\\log N * \\log M) O(1) O(1) O(N\\log N) O(N\\log N) O(\\log N) O(\\log N) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N) O(N) O(N*M) O(N*M) O(N\\log N) O(N\\log N) O(N) O(N) O(N) O(N) \u5907\u6ce8 N*M\u7684\u77e9\u9635 \u9884\u5904\u7406 O(N\\log N) O(N\\log N) \u9884\u5904\u7406 O(N\\log N) O(N\\log N) \u7a7a\u95f44N\uff0c\u9884\u5904\u7406\u4e3a\u7a7a\u95f4\u5927\u5c0f \u6811\u94fe\u5256\u5206-\u70b9\u5256 \u6811\u94fe\u5256\u5206-\u8fb9\u5256 \u5206\u5757\u7b97\u6cd5 \u83ab\u961f\u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 O(N\\log N \\log N) O(N\\log N \\log N) O(N\\log N \\log N) O(N\\log N \\log N) O(N \\sqrt N) O(N \\sqrt N) O(N \\sqrt N) O(N \\sqrt N) \u7a7a\u95f4\u590d\u6742\u5ea6 O(10*N) O(10*N) O(10*N) O(10*N) O(n) O(n) O(n) O(n) \u5907\u6ce8 \u7531\u4e8e\u6570\u7ec4\u8fc7\u591a\u7ed9 \u4e86\u4e00\u4e2a 10 \u7684\u5e38\u6570 \u7531\u4e8e\u6570\u7ec4\u8fc7\u591a\u7ed9 \u4e86\u4e00\u4e2a 10 \u7684\u5e38\u6570 \u70b9\u5206\u6cbb caldis() \u6c42\u91cd\u5fc3 \u65f6\u95f4\u590d\u6742\u5ea6 O(N\\log N) O(N\\log N) O(N) O(N) O(N\\log N) O(N\\log N) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N\\log N) O(N\\log N) O(N) O(N) O(N\\log N) O(N\\log N) \u5907\u6ce8 \u70b9\u5206\u6cbb\u5185\u90e8\uff1a\u6c42\u57fa\u672c\u8def\u5f84 4. \u56fe\u8bba \u00b6 \u5308\u7259\u5229\u7b97\u6cd5\uff08\u90bb\u63a5\u77e9\u9635\uff09 \u5308\u7259\u5229\u7b97\u6cd5\uff08\u90bb\u63a5\u8868\uff09 KM \u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 O(N^{3}) O(N^{3}) O(N*M) O(N*M) O(N^{3}) O(N^{3}) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N^{2}) O(N^{2}) O(M+N) O(M+N) O(N^{2}) O(N^{2}) \u5907\u6ce8 \u70b9\u5206\u6cbb\u5185\u90e8\uff1a\u6c42\u57fa\u672c\u8def\u5f84 \u7f51\u7edc\u6d41-EK \u7f51\u7edc\u6d41-Dinic \u7f51\u7edc\u6d41-ISAP \u8d39\u7528\u6d41-SPFA \u65f6\u95f4\u590d\u6742\u5ea6 O(N*M*M) O(N*M*M) O(N*N*M) O(N*N*M) O(N*N*M) O(N*N*M) O(V+E+\\log V) O(V+E+\\log V) \u7a7a\u95f4\u590d\u6742\u5ea6 O(M+N) O(M+N) O(M+N) O(M+N) O(M+N) O(M+N) O(M+N) O(M+N) \u5907\u6ce8 N \u4e3a\u8282\u70b9\u6570\uff0c M \u4e3a\u8fb9\u6570 \u6700\u5927\u6d41\u8dd1\u6700\u5927\u5339 \u914d \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n*sqrt(m)) \u6240\u6709\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f \u6700\u5927\u4e0a\u754c\uff0c\u5e73\u5e38\u90fd\u8fbe\u4e0d \u5230 5. \u5b57\u7b26\u4e32 \u00b6 \u5b57\u5178\u6811 AC \u81ea\u52a8\u673a \u65f6\u95f4\u590d\u6742\u5ea6 O(N) O(N) O(N*M) O(N*M) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N*K) O(N*K) O(N*K) O(N*K) \u5907\u6ce8 K \u4e3a\u6a21\u5f0f\u4e32\u6570\u91cf M \u4e3a\u6587\u672c\u4e32\u957f\u5ea6 6. \u8ba1\u7b97\u51e0\u4f55 \u00b6 Graham \u534a\u5e73\u9762\u4ea4 \u65f6\u95f4\u590d\u6742\u5ea6 O(N \\log N) O(N \\log N) O(N \\log N) O(N \\log N) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N) O(N) O(N) O(N) \u5907\u6ce8 K \u4e3a\u6a21\u5f0f\u4e32\u6570\u91cf M \u4e3a\u6587\u672c\u4e32\u957f\u5ea6","title":"\u65f6\u95f4/\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"Others/Time/#1","text":"n\u4e2a\u70b9/\u72b6\u6001,m\u6761\u8fb9 DFS BFS \u53cc\u5411\u641c\u7d22 \u8bb0\u5fc6\u5316\u641c\u7d22 \u6781\u5927\u6781\u5c0f\u641c\u7d22 \u542f\u53d1\u5f0f\u641c\u7d22 \u65f6\u95f4\u590d\u6742\u5ea6 O(N) O(N) O(N) O(N) O(N^{\\frac{1}{2}}-N^2) O(N^{\\frac{1}{2}}-N^2) O(N) O(N) <<O(N) <<O(N) <<O(N) <<O(N) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N) O(N) O(N) O(N) O(N^{\\frac{1}{2}}-N^2) O(N^{\\frac{1}{2}}-N^2) O(N) O(N) <<O(N) <<O(N) <<O(N) <<O(N) \u5907\u6ce8 \u4e0d\u7a33\u5b9a \u4e0e\u542f\u53d1\u51fd\u6570\u6709\u5173","title":"1. \u641c\u7d22"},{"location":"Others/Time/#2","text":"\u72b6\u538bDP \u6811\u5f62DP \u533a\u95f4DP \u6570\u4f4dDP \u6982\u7387DP \u65f6\u95f4\u590d\u6742\u5ea6 O(N^2*2^n) O(N^2*2^n) O(N) O(N) O(N^3) O(N^3) O(size[dp]) O(size[dp]) O(size[dp]) O(size[dp]) \u7a7a\u95f4\u590d\u6742\u5ea6 O(2^n) O(2^n) O(N) O(N) O(N^2) O(N^2) O(size[dp]) O(size[dp]) O(size[dp]) O(size[dp]) \u5907\u6ce8 \u90fd\u662f\u6570\u7ec4\u5927\u5c0f \u90fd\u662f\u6570\u7ec4\u5927\u5c0f","title":"2. \u52a8\u6001\u89c4\u5212"},{"location":"Others/Time/#3","text":"\u4e00\u7ef4\u6811\u72b6\u6570\u7ec4 \u6811\u5f62DP ST\u8868 RMQ \u7ebf\u6bb5\u6811 \u65f6\u95f4\u590d\u6742\u5ea6 O(\\log n) O(\\log n) O(\\log N * \\log M) O(\\log N * \\log M) O(1) O(1) O(N\\log N) O(N\\log N) O(\\log N) O(\\log N) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N) O(N) O(N*M) O(N*M) O(N\\log N) O(N\\log N) O(N) O(N) O(N) O(N) \u5907\u6ce8 N*M\u7684\u77e9\u9635 \u9884\u5904\u7406 O(N\\log N) O(N\\log N) \u9884\u5904\u7406 O(N\\log N) O(N\\log N) \u7a7a\u95f44N\uff0c\u9884\u5904\u7406\u4e3a\u7a7a\u95f4\u5927\u5c0f \u6811\u94fe\u5256\u5206-\u70b9\u5256 \u6811\u94fe\u5256\u5206-\u8fb9\u5256 \u5206\u5757\u7b97\u6cd5 \u83ab\u961f\u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 O(N\\log N \\log N) O(N\\log N \\log N) O(N\\log N \\log N) O(N\\log N \\log N) O(N \\sqrt N) O(N \\sqrt N) O(N \\sqrt N) O(N \\sqrt N) \u7a7a\u95f4\u590d\u6742\u5ea6 O(10*N) O(10*N) O(10*N) O(10*N) O(n) O(n) O(n) O(n) \u5907\u6ce8 \u7531\u4e8e\u6570\u7ec4\u8fc7\u591a\u7ed9 \u4e86\u4e00\u4e2a 10 \u7684\u5e38\u6570 \u7531\u4e8e\u6570\u7ec4\u8fc7\u591a\u7ed9 \u4e86\u4e00\u4e2a 10 \u7684\u5e38\u6570 \u70b9\u5206\u6cbb caldis() \u6c42\u91cd\u5fc3 \u65f6\u95f4\u590d\u6742\u5ea6 O(N\\log N) O(N\\log N) O(N) O(N) O(N\\log N) O(N\\log N) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N\\log N) O(N\\log N) O(N) O(N) O(N\\log N) O(N\\log N) \u5907\u6ce8 \u70b9\u5206\u6cbb\u5185\u90e8\uff1a\u6c42\u57fa\u672c\u8def\u5f84","title":"3. \u6570\u636e\u7ed3\u6784"},{"location":"Others/Time/#4","text":"\u5308\u7259\u5229\u7b97\u6cd5\uff08\u90bb\u63a5\u77e9\u9635\uff09 \u5308\u7259\u5229\u7b97\u6cd5\uff08\u90bb\u63a5\u8868\uff09 KM \u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 O(N^{3}) O(N^{3}) O(N*M) O(N*M) O(N^{3}) O(N^{3}) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N^{2}) O(N^{2}) O(M+N) O(M+N) O(N^{2}) O(N^{2}) \u5907\u6ce8 \u70b9\u5206\u6cbb\u5185\u90e8\uff1a\u6c42\u57fa\u672c\u8def\u5f84 \u7f51\u7edc\u6d41-EK \u7f51\u7edc\u6d41-Dinic \u7f51\u7edc\u6d41-ISAP \u8d39\u7528\u6d41-SPFA \u65f6\u95f4\u590d\u6742\u5ea6 O(N*M*M) O(N*M*M) O(N*N*M) O(N*N*M) O(N*N*M) O(N*N*M) O(V+E+\\log V) O(V+E+\\log V) \u7a7a\u95f4\u590d\u6742\u5ea6 O(M+N) O(M+N) O(M+N) O(M+N) O(M+N) O(M+N) O(M+N) O(M+N) \u5907\u6ce8 N \u4e3a\u8282\u70b9\u6570\uff0c M \u4e3a\u8fb9\u6570 \u6700\u5927\u6d41\u8dd1\u6700\u5927\u5339 \u914d \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n*sqrt(m)) \u6240\u6709\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f \u6700\u5927\u4e0a\u754c\uff0c\u5e73\u5e38\u90fd\u8fbe\u4e0d \u5230","title":"4. \u56fe\u8bba"},{"location":"Others/Time/#5","text":"\u5b57\u5178\u6811 AC \u81ea\u52a8\u673a \u65f6\u95f4\u590d\u6742\u5ea6 O(N) O(N) O(N*M) O(N*M) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N*K) O(N*K) O(N*K) O(N*K) \u5907\u6ce8 K \u4e3a\u6a21\u5f0f\u4e32\u6570\u91cf M \u4e3a\u6587\u672c\u4e32\u957f\u5ea6","title":"5. \u5b57\u7b26\u4e32"},{"location":"Others/Time/#6","text":"Graham \u534a\u5e73\u9762\u4ea4 \u65f6\u95f4\u590d\u6742\u5ea6 O(N \\log N) O(N \\log N) O(N \\log N) O(N \\log N) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N) O(N) O(N) O(N) \u5907\u6ce8 K \u4e3a\u6a21\u5f0f\u4e32\u6570\u91cf M \u4e3a\u6587\u672c\u4e32\u957f\u5ea6","title":"6. \u8ba1\u7b97\u51e0\u4f55"},{"location":"Others/exem/","text":"\u4e00\u3001\u641c\u7d22 \u00b6 1.1 \u6df1\u5ea6\u4f18\u5148\u641c\u7d20\uff1ahrbust 1743 1.2 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d20\uff1ahdu 2612 1.3 \u53cc\u5411\u641c\u7d22\uff1a 1.4 \u8bb0\u5fc6\u5316\u641c\u7d22\uff1ahdoj1078 1.5 \u6781\u5927\u6781\u5c0f\u641c\u7d22\uff1apoj1568 1.6 \u542f\u53d1\u5f0f\u641c\u7d22\uff1apoj1077 \u4e8c\u3001\u52a8\u6001\u89c4\u5212 \u00b6 2.1 \u72b6\u538b Dp\uff1ahdu 5418 2.2 \u6811\u5f62 Dp\uff1aP1352 2.3 \u533a\u95f4 Dp\uff1anoi1995 2.4 \u6570\u4f4d Dp\uff1ahttps: // loj.ac/problems/tag/104 2.5 \u6982\u7387&\u671f\u671b Dp\uff1ahttps: // vjudge.net/contest/76505 \u4e09\u3001\u6570\u636e\u7ed3\u6784 \u00b6 3.1 \u4e00\u7ef4\u6811\u72b6\u6570\u7ec4\uff1apoj3468 3.2 \u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4\uff1apoj2155 3.3 ST \u8868\uff1a\u6d1b\u8c37 p3865 3.4 Rmq\uff1apoj3264 3.5 \u7ebf\u6bb5\u6811\uff1aPoj3468, HDU3911, HDU1542 3.6.1 \u6811\u94fe\u5256\u5206-\u70b9\u5256\uff1a\u6d1b\u8c37 P3384\uff0cHYSBZ 4196\uff0cHYSBZ 3531\uff0cHYSBZ 2243 3.6.2 \u6811\u94fe\u5256\u5206-\u8fb9\u5256\uff1a\u6d1b\u8c37 P4315\uff0cHYSBZ 2157 3.7 \u5206\u5757\u7b97\u6cd5\uff1aPOJ 3468 3.8 \u83ab\u961f\u7b97\u6cd5\uff1aZOJ 2038 3.9 \u70b9\u5206\u6cbb\uff1aPOJ 1655\uff0cPOJ 2114\uff0cPOJ 1741\uff0cHDU 4812\uff0cHYSBZ 2152\uff0cHDU 5977\uff0c POJ 1987 \u56db\u3001\u56fe\u8bba \u00b6 4.1.1 \u5308\u7259\u5229\u7b97\u6cd5\uff1aPOJ1274\u3001POJ1469\u3001POJ3041\u3001POJ1325\u3001POJ1466\u3001POJ2226\u3001 HDU1281 4.1.2 KM \u7b97\u6cd5\uff1aHDU2255 4.2 \u6700\u5927\u6d41\uff1a\u6d1b\u8c37 P3376\u3001LOJ 6015 4.3 \u8d39\u7528\u6d41\uff1a\u6d1b\u8c37 P3381\u3001LOJ 6008 \u4e94\u3001\u5b57\u7b26\u4e32 \u00b6 5.1 \u5b57\u5178\u6811\uff1ahdu1251 5.2 AC \u81ea\u52a8\u673a\uff1ahdu2222 \u516d\u3001\u8ba1\u7b97\u51e0\u4f55 \u00b6 6.1 \u70b9\u79ef\u53c9\u79ef\u7684\u5e94\u7528\uff1apoj2318 6.2 Graham\uff1apoj 1912 6.3 \u534a\u5e73\u9762\u4ea4\uff1apoj3525 6.4 \u65cb\u8f6c\u5361\u58f3\uff1aAizu CGL_4_B","title":"\u4e60\u9898"},{"location":"Others/exem/#_1","text":"1.1 \u6df1\u5ea6\u4f18\u5148\u641c\u7d20\uff1ahrbust 1743 1.2 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d20\uff1ahdu 2612 1.3 \u53cc\u5411\u641c\u7d22\uff1a 1.4 \u8bb0\u5fc6\u5316\u641c\u7d22\uff1ahdoj1078 1.5 \u6781\u5927\u6781\u5c0f\u641c\u7d22\uff1apoj1568 1.6 \u542f\u53d1\u5f0f\u641c\u7d22\uff1apoj1077","title":"\u4e00\u3001\u641c\u7d22"},{"location":"Others/exem/#_2","text":"2.1 \u72b6\u538b Dp\uff1ahdu 5418 2.2 \u6811\u5f62 Dp\uff1aP1352 2.3 \u533a\u95f4 Dp\uff1anoi1995 2.4 \u6570\u4f4d Dp\uff1ahttps: // loj.ac/problems/tag/104 2.5 \u6982\u7387&\u671f\u671b Dp\uff1ahttps: // vjudge.net/contest/76505","title":"\u4e8c\u3001\u52a8\u6001\u89c4\u5212"},{"location":"Others/exem/#_3","text":"3.1 \u4e00\u7ef4\u6811\u72b6\u6570\u7ec4\uff1apoj3468 3.2 \u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4\uff1apoj2155 3.3 ST \u8868\uff1a\u6d1b\u8c37 p3865 3.4 Rmq\uff1apoj3264 3.5 \u7ebf\u6bb5\u6811\uff1aPoj3468, HDU3911, HDU1542 3.6.1 \u6811\u94fe\u5256\u5206-\u70b9\u5256\uff1a\u6d1b\u8c37 P3384\uff0cHYSBZ 4196\uff0cHYSBZ 3531\uff0cHYSBZ 2243 3.6.2 \u6811\u94fe\u5256\u5206-\u8fb9\u5256\uff1a\u6d1b\u8c37 P4315\uff0cHYSBZ 2157 3.7 \u5206\u5757\u7b97\u6cd5\uff1aPOJ 3468 3.8 \u83ab\u961f\u7b97\u6cd5\uff1aZOJ 2038 3.9 \u70b9\u5206\u6cbb\uff1aPOJ 1655\uff0cPOJ 2114\uff0cPOJ 1741\uff0cHDU 4812\uff0cHYSBZ 2152\uff0cHDU 5977\uff0c POJ 1987","title":"\u4e09\u3001\u6570\u636e\u7ed3\u6784"},{"location":"Others/exem/#_4","text":"4.1.1 \u5308\u7259\u5229\u7b97\u6cd5\uff1aPOJ1274\u3001POJ1469\u3001POJ3041\u3001POJ1325\u3001POJ1466\u3001POJ2226\u3001 HDU1281 4.1.2 KM \u7b97\u6cd5\uff1aHDU2255 4.2 \u6700\u5927\u6d41\uff1a\u6d1b\u8c37 P3376\u3001LOJ 6015 4.3 \u8d39\u7528\u6d41\uff1a\u6d1b\u8c37 P3381\u3001LOJ 6008","title":"\u56db\u3001\u56fe\u8bba"},{"location":"Others/exem/#_5","text":"5.1 \u5b57\u5178\u6811\uff1ahdu1251 5.2 AC \u81ea\u52a8\u673a\uff1ahdu2222","title":"\u4e94\u3001\u5b57\u7b26\u4e32"},{"location":"Others/exem/#_6","text":"6.1 \u70b9\u79ef\u53c9\u79ef\u7684\u5e94\u7528\uff1apoj2318 6.2 Graham\uff1apoj 1912 6.3 \u534a\u5e73\u9762\u4ea4\uff1apoj3525 6.4 \u65cb\u8f6c\u5361\u58f3\uff1aAizu CGL_4_B","title":"\u516d\u3001\u8ba1\u7b97\u51e0\u4f55"},{"location":"Search/","text":"","title":"Index"},{"location":"Search/BFS/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // bfs \u67e5\u627e \u4ece s \u70b9 \u80fd\u5426\u5230\u8fbe t \u70b9 class Bfs { public : bool vis [ N ]; queue < int > q ; void bfs ( int s , int t ) 3 { while ( ! q . emtpy ()) q . pop (); memset ( vis , true , sizeof ( vis )); vis [ s ] = false ; q . push ( s ); while ( ! q . empty ()) { int z = q . front (); q . pop (); if ( z == t ) return true ; // \u641c\u7d22 z \u70b9\u80fd\u591f\u5230\u8fbe\u7684\u6240\u6709\u70b9\uff0c\u5165\u961f\uff0c\u5e76\u4e14\u6807\u8bb0 } return false ; } }; \u6574\u7406\u4eba \u8ba1 16-1 \u5218\u660e\u8f89","title":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"Search/DFS/","text":"\u9898\u76ee\u94fe\u63a5\uff1a hrbust 1743 Word Search 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // hrbust 1743 \u9898\u610f: n*m \u5b57\u7b26\u77e9\u9635\uff0cq \u6b21\u67e5\u8be2\u67d0\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u662f\u77e9\u9635\u7684\u4e00\u6761\u8def\u5f84 #include <stdio.h> #include <string.h> #define N 55 char a [ N ][ N ]; char str [ N ]; int len ; // \u5b58 str \u5b57\u7b26\u4e32\u957f\u5ea6 bool vis [ N ][ N ]; //\u6bcf\u4e2a\u70b9\u53ea\u80fd\u8d70\u4e00\u6b21 int n , m ; class Dfs { public : int dx [ 10 ] = { 0 , 0 , - 1 , 1 }; // dx,dy \u7ec4\u6210\u4e0a\u4e0b\u5de6\u53f3 int dy [ 10 ] = { 1 , - 1 , 0 , 0 }; bool dfs ( int x , int y , int z ) { if ( z == len ) return true ; for ( int i = 0 ; i < 4 ; i ++ ) { int xx = x + dx [ i ]; int yy = y + dy [ i ]; if ( xx > 0 && yy > 0 && xx <= n && yy <= m && a [ xx ][ yy ] == str [ z ] && vis [ xx ][ yy ]) { vis [ xx ][ yy ] = false ; if ( dfs ( xx , yy , z + 1 )) return true ; vis [ xx ][ yy ] = true ; } } return false ; } } dfs ; int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { 2 int q ; scanf ( \"%d %d %d\" , & n , & m , & q ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%s\" , a [ i ] + 1 ); for ( int qq = 0 ; qq < q ; qq ++ ) { scanf ( \"%s\" , str ); len = strlen ( str ); memset ( vis , true , sizeof ( vis )); int zt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { vis [ i ][ j ] = false ; if ( a [ i ][ j ] == str [ 0 ] && dfs . dfs ( i , j , 1 )) { zt = 1 ; break ; } vis [ i ][ j ] = true ; } if ( zt ) break ; } if ( zt ) printf ( \"Yes \\n \" ); else printf ( \"No \\n \" ); } printf ( \" \\n \" ); } } \u6574\u7406\u4eba \u8ba1 16-1 \u5218\u660e\u8f89","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"Search/DeSearch/","text":"// \u5bf9\u4e8e\u5355\u5411\u641c\u7d22\u6709 2^n 2^n \u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u82e5\u4ece\u8d77\u59cb\u70b9\u548c\u7ec8\u70b9\u540c\u65f6\u641c\uff0c\u53ef\u4ee5\u53d8\u6210 2 \u4e2a 2^{(n/2)} 2^{(n/2)} \u79cd\u53ef\u80fd\uff0c\u7136\u540e\u8fdb\u884c\u5408\u5e76\u3002\u4f8b\u5982\uff1a\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u9009\u62e9*a \u6216\u8005+b\uff0c\u95ee\u6570\u5b57\u4ece n \u5f00\u59cb\u64cd\u4f5c 40 \u6b21 \u53d8\u6210 m \u7684\u53ef\u80fd\u6027\u6709\u591a\u5c11\u79cd\u3002\u53ef\u4ee5\u9009\u62e9\u6b63\u5411\u53cd\u5411\u540c\u65f6\u6c42\u51fa 2^{20} 2^{20} \u4e2a\u7b54\u6848\uff0c\u7136\u540e\u8fdb\u884c\u5408\u5e76\u3002 \u6574\u7406\u4eba \u8ba1 16-1 \u5218\u660e\u8f89","title":"\u53cc\u5411\u641c\u7d22"},{"location":"Search/Memory_Search/","text":"// \u4e00\u822c\u6765\u8bf4\u641c\u7d22\u7684\u7ed3\u679c\u6570\u91cf\u6709\u9650\uff0c\u56e0\u6b64\u5728\u641c\u7d22\u65f6\uff0c\u4f1a\u628a\u641c\u5230\u7684\u7ed3\u679c\u4e5f\u8bb0\u5f55\u5230\u4e00\u4e2a\u6570\u7ec4\uff0c \u4e0b\u6b21\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002 \u6574\u7406\u4eba \u8ba1 16-1 \u5218\u660e\u8f89","title":"\u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 //poj 1077 A* \u89e3\u51b3\u516b\u6570\u7801\u95ee\u9898\uff083*3 \u7684\u68cb\u76d8\uff0c\u6709 8 \u4e2a\u6807\u53f7\u662f 1-8 \u7684\u68cb\u5b50\uff0c\u4e00\u4e2a\u7a7a\u683c\u3002\u6bcf 7 \u6b21\u53ef\u4ee5\u628a\u4e00\u4e2a\u4e0e\u7a7a\u683c\u76f8\u90bb\u7684\u68cb\u5b50\u79fb\u52a8\u5230\u7a7a\u683c\u4e0a\uff0c\u7ed9\u51fa\u4e00\u4e2a\u76ee\u6807\u68cb\u76d8\uff0c\u95ee\u6700\u5c11\u79fb\u52a8\u6b21\u6570\uff09 #include <cstdio> #include <cstdlib> #include <cstring> #include <cmath> #include <iostream> #include <string> #include <queue> using namespace std ; const int maxn = 15 , maxs = 362885 ; class AStar { public : const int nxt [ 4 ][ 2 ] = {{ - 1 , 0 }, { 1 , 0 }, { 0 , - 1 }, { 0 , 1 }}; const char dir [ 4 ] = { 'u' , 'd' , 'l' , 'r' }; int bit [ maxn ], fact [ maxn ]; AStar () { fact [ 0 ] = 1 ; for ( int i = 1 ; i < 9 ; ++ i ) fact [ i ] = fact [ i - 1 ] * i ; } inline int ask ( int x ) { int ret = 0 ; while ( x ) ret += bit [ x ], x -= x & - x ; return ret ; } inline void add ( int x , int d ) { while ( x <= 9 ) bit [ x ] += d , x += x & - x ; } struct Node { int i , x , y ; string s , ans ; bool operator < ( const Node & rhs ) const { return x + y > rhs . x + rhs . y ; 8 } } st ; int vis [ maxs ]; priority_queue < Node > q ; inline int cantor ( string s ) { memset ( bit , 0 , sizeof ( bit )); for ( int i = 0 ; i < 9 ; ++ i ) if ( s [ i ] == 'x' ) s [ i ] = '0' ; int ans = 1 ; for ( int i = 8 ; i >= 0 ; -- i ) { ans += ask ( s [ i ] - '0' ) * fact [ 8 - i ]; add ( s [ i ] - '0' + 1 , 1 ); } return ans ; } inline int diff ( string s ) { int ans = 0 ; for ( int i = 0 ; i < 9 ; ++ i ) { int x = i / 3 , y = i % 3 ; if ( s [ i ] == 'x' ) ans += abs ( x - 2 ) + abs ( y - 2 ); else { int j = s [ i ] - '1' ; ans += abs ( x - j / 3 ) + abs ( y - j % 3 ); } } return ans ; } inline string bfs ( string s ) { for ( int i = 0 ; i < 9 ; ++ i ) if ( s [ i ] == 'x' ) st . i = i ; st . x = 0 , st . y = diff ( s ); st . s = s , st . ans = \"\" ; vis [ cantor ( st . s )] = 1 ; 9 q . push ( st ); while ( ! q . empty ()) { Node u = q . top (), v ; q . pop (); if ( u . s == \"12345678x\" ) return u . ans ; int x = u . i / 3 , y = u . i % 3 ; for ( int i = 0 ; i < 4 ; ++ i ) { int nx = x + nxt [ i ][ 0 ], ny = y + nxt [ i ][ 1 ]; if ( nx < 0 || nx > 2 || ny < 0 || ny > 2 ) continue ; v . i = 3 * nx + ny ; v . s = u . s ; swap ( v . s [ u . i ], v . s [ v . i ]); if ( vis [ cantor ( v . s )]) continue ; vis [ cantor ( v . s )] = 1 ; v . x = u . x + 1 , v . y = diff ( v . s ); v . ans = u . ans + dir [ i ]; q . push ( v ); } } return \"unsolvable\" ; } } a_star ; int main () { char in [ 2 ]; string s = \"\" ; for ( int i = 1 ; i <= 9 ; ++ i ) { scanf ( \"%s\" , in ); s += in [ 0 ]; } int cnt = 0 ; for ( int i = 8 ; i >= 0 ; -- i ) if ( s [ i ] != 'x' ) cnt += a_star . ask ( s [ i ] - '0' ), a_star . add ( s [ i ] - '0' , 1 ); if ( cnt & 1 ) printf ( \"unsolvable\" ); else cout << a_star . bfs ( s ); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 // IDA* \u89e3\u51b3\u516b\u6570\u7801\u95ee\u9898 #include <stdio.h> #include <math.h> #include <string.h> #include <algorithm> #define INF 40000 using namespace std ; int f [ 10 ]; class IDAStar { public : int dx [ 10 ] = { 0 , 0 , 1 , - 1 }; int dy [ 10 ] = { 1 , - 1 , 0 , 0 }; char dxy [ 10 ] = \"rldu\" ; char ans [ 1005 ]; int hh () //\u4f30\u503c\u51fd\u6570=\u6bcf\u4e00\u4e2a\u90fd\u76f4\u63a5\u8d70\u5230\u81ea\u5df1\u4f4d\u7f6e\u7684\u6b65\u6570 { int i , j , sum = 0 ; for ( i = 0 ; i < 9 ; i ++ ) { if ( f [ i ]) sum += abs ( i / 3 - ( f [ i ] - 1 ) / 3 ) + abs ( i % 3 - ( f [ i ] - 1 ) % 3 ); } return sum ; } int minn ; bool dfs ( int x , int g , int depth ) //x \u4ee3\u8868'x'\u7684\u4f4d\u7f6e g \u4ee3\u8868\u73b0\u5728\u8d70\u4e86\u591a\u5c11 depth \u4ee3\u8868\u672c\u6b21\u6700 \u591a\u8d70\u591a\u5c11 { int h = hh (); minn = min ( minn , h ); //\u627e\u5230\u8fd9\u6b21\u79bb\u7ec8\u70b9\u6700\u8fd1\u7684\u8ddd\u79bb\u662f\u591a\u5c11\uff0c\u4f46\u5b9e\u9645\u8ddd\u79bb\u4e00\u5b9a\u662f>=\u4f30\u8ba1 \u8ddd\u79bb if ( h == 0 ) { ans [ g ] = '\\0' ; printf ( \"%s \\n \" , ans ); return true ; } if ( g + h > depth ) return false ; int xx , yy ; int i , j ; for ( i = 0 ; i < 4 ; i ++ ) { xx = x / 3 + dx [ i ]; 11 yy = x % 3 + dy [ i ]; if ( xx >= 0 && yy >= 0 && xx < 3 && yy < 3 ) { if ( g ) { if ( i == 0 && ans [ g - 1 ] == 'l' ) continue ; //\u8fd9\u6b21\u5f80\u4e0a\uff0c\u4e0a\u6b21\u5f80\u4e0b\u80af\u5b9a\u662f\u4e0d\u53ef\u4ee5\u7684 if ( i == 1 && ans [ g - 1 ] == 'r' ) continue ; if ( i == 2 && ans [ g - 1 ] == 'u' ) continue ; if ( i == 3 && ans [ g - 1 ] == 'd' ) continue ; } ans [ g ] = dxy [ i ]; f [ x ] = f [ xx * 3 + yy ]; f [ xx * 3 + yy ] = 0 ; if ( dfs ( xx * 3 + yy , g + 1 , depth )) return true ; f [ xx * 3 + yy ] = f [ x ]; f [ x ] = 0 ; } } return false ; } void IDA_star ( int x ) { int depth = hh (); while ( 1 ) { minn = INF ; if ( dfs ( x , 0 , depth )) { break ; } depth += minn ; } } bool pan () { int i , j , k = 0 ; for ( i = 0 ; i < 9 ; i ++ ) { if ( f [ i ] == 0 ) continue ; for ( j = 0 ; j < i ; j ++ ) 12 { if ( f [ j ] > f [ i ]) k ++ ; } } if ( k % 2 ) return true ; return false ; } } ida_star ; char a [ 105 ]; int main () { while ( gets ( a )) { int i , j , a1 = strlen ( a ), k = 0 , x , y ; for ( i = 0 ; i < a1 ; i ++ ) { if ( a [ i ] != ' ' ) { if ( a [ i ] == 'x' ) { x = k / 3 ; y = k % 3 ; f [ k ] = 0 ; k ++ ; } else f [ k ++ ] = a [ i ] - '0' ; } } if ( ida_star . pan ()) printf ( \"unsolvable \\n \" ); else ida_star . IDA_star ( x * 3 + y ); } } // 1 2 3 4 5 6 7 8 x \u6574\u7406\u4eba \u8ba1 16-1 \u5218\u660e\u8f89","title":"\u542f\u53d1\u5f0f\u641c\u7d22"},{"location":"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 // \u66b4\u529b\u641c\u7d22\uff0c\u4f46\u5bf9\u4e8e\u67d0\u4e9b\u7279\u5b9a\u60c5\u51b5\u53ef\u4ee5\u901a\u8fc7 alphat-beta \u503c\u76f4\u63a5\u4f18\u5316\u6389 #include <stdio.h> #include <math.h> #include <algorithm> using namespace std ; char a [ 10 ][ 10 ]; 4 class MinimaxSearch { public : int xx , yy ; int Evaluate () //\u5224\u65ad 1 \u662f x \u80dc\u5229 -1 \u662f o \u80dc\u5229 0 \u662f\u6ca1\u6709\u80dc\u5229 { int i , j , z , zz , zt , zzt ; for ( i = 0 ; i < 4 ; i ++ ) { z = 0 , zz = 0 , zt = 0 , zzt = 0 ; for ( j = 0 ; j < 4 ; j ++ ) { if ( a [ i ][ j ] == 'x' ) z ++ ; else if ( a [ i ][ j ] == 'o' ) zz ++ ; if ( a [ j ][ i ] == 'x' ) zt ++ ; else if ( a [ j ][ i ] == 'o' ) zzt ++ ; } if ( z == 4 || zt == 4 ) return 1 ; if ( zz == 4 || zzt == 4 ) return - 1 ; } zt = 0 , zzt = 0 , z = 0 , zz = 0 ; for ( i = 0 ; i < 4 ; i ++ ) { if ( a [ i ][ i ] == 'x' ) z ++ ; if ( a [ i ][ i ] == 'o' ) zz ++ ; if ( a [ i ][ 3 - i ] == 'x' ) zt ++ ; if ( a [ i ][ 3 - i ] == 'o' ) zzt ++ ; } if ( z == 4 || zt == 4 ) return 1 ; if ( zz == 4 || zzt == 4 ) return - 1 ; return 0 ; } int Max ( int depth , int upalpha , int upbeta ) { 5 int alpha = upalpha , beta = upbeta ; int val ; int flag = Evaluate (); if ( flag || depth == 0 ) //\u5df2\u7ecf\u6709\u4e00\u65b9\u80dc\u5229\uff0c\u6216\u8005\u5168\u4e0b\u5b8c return flag ; int i , j ; for ( i = 0 ; i < 4 ; i ++ ) { for ( j = 0 ; j < 4 ; j ++ ) { if ( a [ i ][ j ] == '.' ) { a [ i ][ j ] = 'x' ; val = Min ( depth - 1 , alpha , beta ); a [ i ][ j ] = '.' ; alpha = max ( alpha , val ); if ( alpha >= beta ) { xx = i , yy = j ; return alpha ; } } } } return alpha ; } int Min ( int depth , int upalpha , int upbeta ) { int alpha = upalpha , beta = upbeta ; int val ; int flag = Evaluate (); if ( flag || depth == 0 ) //\u5df2\u7ecf\u6709\u4e00\u65b9\u80dc\u5229\uff0c\u6216\u8005\u5168\u4e0b\u5b8c return flag ; int i , j ; for ( i = 0 ; i < 4 ; i ++ ) { for ( j = 0 ; j < 4 ; j ++ ) { if ( a [ i ][ j ] == '.' ) { a [ i ][ j ] = 'o' ; val = Max ( depth - 1 , alpha , beta ); a [ i ][ j ] = '.' ; beta = min ( beta , val ); if ( beta <= alpha ) return beta ; 6 } } } return beta ; } } miniMax ; int main () { char c ; while ( scanf ( \"%c\" , & c ) != EOF ) { if ( c == '$' ) break ; int i , j ; int sum = 0 ; for ( i = 0 ; i < 4 ; i ++ ) { scanf ( \"%s\" , a [ i ]); for ( j = 0 ; j < 4 ; j ++ ) { if ( a [ i ][ j ] == '.' ) sum ++ ; } } if ( sum > 11 ) //\u521a\u4e0b\u56db\u4e2a\u5b50\u65f6\u4e0d\u53ef\u80fd\u6709\u51b3\u80dc\u70b9\uff0c\u6ca1\u6709\u8fd9\u4e2a\u4e00\u76f4 TLE { printf ( \"##### \\n \" ); getchar (); continue ; } int z = miniMax . Max ( sum , - 1 , 1 ); if ( z == 1 ) printf ( \"(%d,%d) \\n \" , miniMax . xx , miniMax . yy ); else printf ( \"##### \\n \" ); getchar (); } } \u6574\u7406\u4eba \u8ba1 16-1 \u5218\u660e\u8f89","title":"\u6781\u5927\u6781\u5c0f\u5316\u641c\u7d22"},{"location":"String/","text":"","title":"Index"},{"location":"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 /* hdu2222 \u9898\u610f\uff1a\u6bcf\u7ec4\u6570\u636e\u6709 n \u4e2a\u6a21\u5f0f\u4e32\uff0c\u8be2\u95ee\u5728\u6587\u672c\u4e32\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6a21\u5f0f\u4e32 */ #include <bits/stdc++.h> using namespace std ; const int maxn = 1e6 ; // \u8bf7\u5f00\u6210 \u6a21\u5f0f\u4e32\u957f\u5ea6*\u6a21\u5f0f\u4e32\u6570\u91cf const int ch_size = 26 ; // \u8bf7\u5f00\u6210\u5b57\u7b26\u96c6\u5927\u5c0f class Ac_automaton { public : int trie [ maxn ][ ch_size ]; int vis [ maxn ], fail [ maxn ]; int tot ; void init () { memset ( vis , 0 , sizeof vis ); memset ( trie , 0 , sizeof trie ); tot = 0 ; } void insert ( char * str ) { int len = strlen ( str ); int pos = 0 ; for ( int i = 0 ; i < len ; i ++ ) { int c = str [ i ] - 'a' ; if ( ! trie [ pos ][ c ]) trie [ pos ][ c ] = ++ tot ; pos = trie [ pos ][ c ]; } vis [ pos ] ++ ; } void build () { queue < int > q ; for ( int i = 0 ; i < ch_size ; i ++ ) { 78 if ( trie [ 0 ][ i ]) { fail [ trie [ 0 ][ i ]] = 0 ; q . push ( trie [ 0 ][ i ]); } } while ( ! q . empty ()) { int pos = q . front (); q . pop (); for ( int i = 0 ; i < ch_size ; i ++ ) { if ( trie [ pos ][ i ]) { fail [ trie [ pos ][ i ]] = trie [ fail [ pos ]][ i ]; q . push ( trie [ pos ][ i ]); } else { trie [ pos ][ i ] = trie [ fail [ pos ]][ i ]; } } } } int query ( char * str ) { int len = strlen ( str ); int pos = 0 , ans = 0 ; for ( int i = 0 ; i < len ; i ++ ) { int c = str [ i ] - 'a' ; pos = trie [ pos ][ c ]; for ( int j = pos ; j && vis [ j ] != - 1 ; j = fail [ j ]) { ans += vis [ j ]; vis [ j ] = - 1 ; } } return ans ; } }; Ac_automaton ac ; int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { ac . init (); char str [ maxn ]; int n ; scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%s\" , str ); 79 ac . insert ( str ); } ac . build (); scanf ( \"%s\" , str ); printf ( \"%d \\n \" , ac . query ( str )); } } \u6574\u7406\u4eba\uff1a\u8ba1 18-5 \u738b\u4e1c\u741b","title":"AC\u81ea\u52a8\u673a"},{"location":"String/%E5%AD%97%E5%85%B8%E6%A0%91/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 /* hdu1251 \u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e9b\u6a21\u5f0f\u4e32\uff0c\u7136\u540e\u6709\u4e00\u4e9b\u63d0\u95ee\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u63d0\u95ee\uff0c\u7ed9\u51fa\u4ee5\u8be5\u5b57\u7b26\u4e32\u4e3a\u524d\u7f00\u7684\u6a21\u5f0f\u4e32 \u7684\u6570\u91cf. */ #include <bits/stdc++.h> using namespace std ; const int maxn = 1e6 + 7 ; //\u8bf7\u5f00\u5230\u6a21\u5f0f\u4e32\u957f\u5ea6*\u6a21\u5f0f\u4e32\u6570\u91cf const int ch_size = 26 ; //\u8bf7\u5f00\u6210\u5b57\u7b26\u96c6\u5927\u5c0f class Trie { public : int trie [ maxn ][ ch_size ]; int vis [ maxn ], tot ; void init () { memset ( trie , 0 , sizeof trie ); memset ( vis , 0 , sizeof vis ); tot = 0 ; } void insert ( char * str ) { int len = strlen ( str ); int pos = 0 ; for ( int i = 0 ; i < len ; i ++ ) { int c = str [ i ] - 'a' ; if ( ! trie [ pos ][ c ]) trie [ pos ][ c ] = ++ tot ; pos = trie [ pos ][ c ]; vis [ pos ] ++ ; } //vis[pos]++; } int query ( char * str ) { int len = strlen ( str ); int pos = 0 ; for ( int i = 0 ; i < len ; i ++ ) { int c = str [ i ] - 'a' ; if ( ! trie [ pos ][ c ]) return 0 ; pos = trie [ pos ][ c ]; } return vis [ pos ]; } }; 77 Trie tr ; int main () { char str [ maxn ]; while ( cin . getline ( str , maxn ) && strlen ( str )) { tr . insert ( str ); } while ( ~ scanf ( \"%s\" , str )) { cout << tr . query ( str ) << endl ; } } \u6574\u7406\u4eba\uff1a\u8ba1 18-5 \u738b\u4e1c\u741b","title":"\u5b57\u5178\u6811"}],"index":{"fieldVectors":[["title/",[0,3.234,1,2.925]],["text/",[2,0.74,3,5.281,4,4.57,5,5.281,6,5.281,7,1.024,8,0.544,9,1.54,10,0.889,11,1.086,12,0.806,13,0.857,14,0.57,15,0.79,16,6.276,17,5.281,18,2.274]],["title/#hrbust_acms-wiki",[2,0.256,3,2.634,4,1.918]],["text/#hrbust_acms-wiki",[]],["title/#lets-go",[2,0.256,5,2.634,6,2.634]],["text/#lets-go",[]],["title/#_1",[2,0.407]],["text/#_1",[2,0.737,4,3.965,7,1.056,8,0.561,9,1.546,10,0.916,11,1.1,12,0.82,13,0.883,14,0.587,15,0.8]],["title/#_2",[2,0.407]],["text/#_2",[2,0.648,16,6.681,17,5.881,18,2.532]],["title/faq/",[2,0.407]],["text/faq/",[1,3.003,2,0.734,4,2.418,7,0.644,8,0.629,9,0.689,10,0.902,11,0.942,12,0.688,13,0.942,14,0.626,15,0.766,19,3.869,20,3.321,21,0.752,22,1.246,23,1.245,24,3.321,25,4.742,26,2.766,27,3.321,28,3.321,29,3.194,30,0.838,31,0.969,32,1.039,33,1.039,34,1.112,35,5.585,36,3.321,37,3.321,38,3.383,39,3.321,40,3.321,41,4.202,42,3.321,43,2.766,44,3.321,45,3.321,46,3.321,47,3.321,48,3.321,49,3.321,50,4.739,51,4.646,52,3.321,53,0.737,54,0.737,55,0.737,56,0.762,57,0.762,58,0.762,59,0.762,60,0.762,61,0.762,62,0.788,63,0.788,64,0.814,65,0.814,66,0.814,67,0.814,68,0.814,69,6.331,70,2.766,71,5.805,72,5.524,73,3.321,74,5.725,75,6.109,76,4.463,77,4.646,78,1.879,79,5.249,80,2.576,81,3.321,82,3.321,83,3.321,84,4.646,85,4.157,86,3.321,87,3.171,88,5.805,89,3.321,90,3.383,91,3.321,92,3.321,93,3.321,94,3.321,95,4.646,96,4.227,97,3.321,98,3.321,99,3.321,100,5.359,101,4.202,102,3.321,103,3.321,104,0.897,105,3.321,106,3.003,107,3.003,108,6.499,109,3.321,110,3.003,111,3.003,112,5.877,113,3.321,114,3.321,115,3.321,116,3.321,117,2.418,118,3.321,119,3.321,120,3.383,121,3.321,122,3.321,123,4.834,124,4.646,125,3.321,126,3.321,127,3.321,128,3.321,129,5.805,130,4.646,131,4.646,132,3.321,133,3.321,134,3.321,135,3.321,136,3.321,137,4.202,138,3.321,139,3.321,140,3.321,141,2.165,142,5.359,143,3.321,144,4.646,145,1.8,146,3.321,147,4.646,148,4.646,149,3.321,150,2.418,151,3.321,152,3.321,153,3.321,154,4.646,155,3.321,156,4.646,157,3.321,158,3.321,159,3.321,160,2.629,161,2.06,162,3.321,163,3.321,164,3.321,165,3.321,166,0.927,167,4.646,168,5.359,169,3.321,170,1.802,171,4.646,172,4.646,173,1.66,174,3.321,175,3.321,176,3.321,177,4.646,178,3.321,179,3.321,180,1.204,181,3.321,182,3.321,183,3.171,184,4.646,185,4.646,186,3.321,187,4.646,188,3.321,189,3.321,190,3.321,191,3.321,192,1.8,193,3.321,194,3.321,195,3.321,196,2.766,197,3.321,198,3.321,199,3.321,200,3.321,201,3.321,202,3.321,203,3.321,204,3.321]],["title/faq/#_1",[2,0.407]],["text/faq/#_1",[2,0.706,8,0.671,11,0.913,13,0.913,14,0.607,15,0.834,19,5.426,20,5.63,21,0.693,22,1.399,23,2.11,24,5.63,25,4.727,26,4.688,27,5.63,28,5.63,29,3.87]],["title/faq/#_2",[2,0.407]],["text/faq/#_2",[2,0.718,8,0.567,10,0.927,11,0.894,12,0.708,13,0.894,14,0.594,15,0.65,21,0.678,25,4.686,30,0.861,31,0.996,32,1.068,33,1.068,34,1.144,35,4.992,36,5.512,37,5.512,38,4.013,39,5.512,40,5.512,41,4.984,42,5.512,43,4.59,44,5.512,45,5.512,46,5.512,47,5.512,48,5.512,49,5.512,50,4.275]],["title/faq/#git",[35,3.25]],["text/faq/#git",[1,3.808,2,0.686,7,0.816,8,0.433,9,0.874,10,0.709,11,0.683,12,0.541,13,0.683,14,0.454,15,0.497,21,0.518,30,0.658,31,0.761,32,0.816,33,0.816,34,0.874,35,5.574,38,3.066,50,3.266,51,5.453,52,4.211,53,0.935,54,0.935,55,0.935,56,0.966,57,0.966,58,0.966,59,0.966,60,0.966,61,0.966,62,0.999,63,0.999,64,1.032,65,1.032,66,1.032,67,1.032,68,1.032,69,6.786,70,3.507,71,6.395,72,5.783,73,4.211,74,5.468,75,6.624,76,3.507,77,5.453,78,2.383,79,5.468,80,3.266,81,4.211,82,4.211,83,4.211,84,5.453,85,4.69,86,4.211,87,3.578,88,6.395,89,4.211,90,3.97,91,4.211,92,4.211,93,4.211,94,4.211,95,5.453,96,4.657,97,4.211,98,4.211,99,4.211,100,6.047,101,4.931,102,4.211,103,4.211,104,1.138,105,4.211,106,3.808,107,3.808,108,6.907,109,4.211,110,3.808,111,3.808,112,5.99,113,4.211,114,4.211,115,4.211,116,4.211,117,3.066,118,4.211,119,4.211,120,3.97,121,4.211,122,4.211,123,5.326,124,5.453,125,4.211,126,4.211,127,4.211,128,4.211,129,6.395,130,5.453,131,5.453,132,4.211,133,4.211,134,4.211,135,4.211,136,4.211,137,3.808,138,4.211,139,4.211,140,4.211,141,2.745,142,6.047,143,4.211,144,5.453,145,2.283,146,4.211,147,5.453,148,5.453,149,4.211,150,3.066,151,4.211,152,4.211,153,4.211,154,5.453,155,4.211,156,5.453,157,4.211,158,4.211,159,4.211,160,3.085,161,2.612,162,4.211,163,4.211,164,4.211,165,4.211,166,1.175]],["title/faq/#mkdocs",[25,2.88]],["text/faq/#mkdocs",[2,0.722,8,0.53,10,0.867,11,0.836,12,0.661,13,0.836,14,0.556,15,0.608,21,0.634,22,1.328,25,4.724,29,3.542,30,0.805,31,0.931,32,0.999,33,0.999,34,1.069,41,4.659,50,3.996,72,4.659,76,5.15,79,4.659,112,5.592,137,4.659,167,6.184,168,6.626,169,5.152,170,2.398,171,6.184,172,6.184,173,2.575,174,5.152,175,5.152,176,5.152,177,6.184,178,5.152,179,5.152,180,1.867,181,5.152,182,5.152,183,3.92,184,6.184,185,6.184,186,5.152,187,6.184,188,5.152,189,5.152,190,5.152,191,5.152,192,2.793,193,5.152,194,5.152]],["title/faq/#_3",[2,0.407]],["text/faq/#_3",[]],["title/faq/#_4",[2,0.314,205,3.234]],["text/faq/#_4",[2,0.717,4,4.251,50,5.16]],["title/faq/#_5",[2,0.314,205,3.234]],["text/faq/#_5",[2,0.672,21,0.704,35,5.513,74,6.259,195,5.721,196,4.765,197,5.721,198,5.721,199,5.721,200,5.721,201,5.721,202,5.721,203,5.721,204,5.721]],["title/home/",[4,3.051]],["text/home/",[2,0.743,8,0.648,10,0.771,11,0.744,12,0.739,13,0.744,14,0.621,15,0.679,19,3.817,21,0.708,22,0.984,23,2.157,25,3.956,26,3.817,29,4.536,30,0.899,31,1.04,32,0.889,33,0.889,43,3.817,104,1.239,123,3.817,170,2.44,180,1.661,196,4.793,206,4.584,207,4.584,208,4.584,209,5.756,210,5.756,211,2.384,212,1.365,213,1.973,214,1.321,215,1.321,216,1.397,217,1.199,218,2.843,219,3.817,220,4.584,221,3.556,222,1.239,223,4.584,224,4.584,225,0.829,226,1.365,227,4.584,228,5.756,229,5.756,230,6.599,231,6.798,232,4.584,233,4.584,234,4.584,235,5.756,236,4.584,237,4.584,238,4.584,239,4.145,240,4.584]],["title/home/#_1",[2,0.407]],["text/home/#_1",[2,0.704,25,4.573,26,4.861,29,4.013,206,5.838]],["title/home/#_2",[2,0.407]],["text/home/#_2",[2,0.742,8,0.657,10,0.796,11,0.767,12,0.753,13,0.767,14,0.633,15,0.692,19,3.937,21,0.722,22,1.015,23,2.199,29,4.034,30,0.917,31,1.061,32,0.917,33,0.917,43,3.937,104,1.277,123,3.937,170,2.474,180,1.714,196,4.886,207,4.728,208,4.728,209,5.868,210,5.868,211,2.459,212,1.408,213,2.035,214,1.363,215,1.363,216,1.416,217,1.237,218,2.932,219,3.937,220,4.728,221,3.667,222,1.277,223,4.728,224,4.728,225,0.855,226,1.392,227,4.728,228,5.868,229,5.868,230,6.672,231,6.86,232,4.728,233,4.728,234,4.728,235,5.868,236,4.728,237,4.728]],["title/home/#_3",[2,0.407]],["text/home/#_3",[2,0.572,29,4.05,238,5.892,239,5.328,240,5.892]],["title/DP/%E5%8C%BA%E9%97%B4DP/",[2,0.314,18,1.392]],["text/DP/%E5%8C%BA%E9%97%B4DP/",[2,0.744,7,0.841,8,0.738,9,1.154,10,0.73,11,0.902,12,0.557,13,0.704,14,0.599,15,0.512,18,2.945,21,0.534,30,0.678,31,0.784,32,0.841,33,0.841,34,0.901,53,0.963,54,0.963,55,0.963,56,0.996,57,0.996,58,0.996,59,0.996,60,0.996,61,0.996,62,1.029,63,1.029,216,1.484,225,1.257,226,1.029,241,4.969,242,4.969,243,3.167,244,3.47,245,3.659,246,1.378,247,4.969,248,1.378,249,4.146,250,3.613,251,2.89,252,4.969,253,2.567,254,2.574,255,4.868,256,2.592,257,2.352]],["title/DP/%E6%95%B0%E4%BD%8DDP/",[2,0.314,18,1.392]],["text/DP/%E6%95%B0%E4%BD%8DDP/",[2,0.745,7,0.705,8,0.708,9,1.027,10,0.833,11,0.59,12,0.467,13,0.59,14,0.681,15,0.429,18,3.02,21,0.743,22,1.355,30,0.879,31,1.017,32,0.705,33,0.705,34,0.755,53,0.808,54,0.808,55,1.098,56,0.835,57,0.835,58,0.835,59,0.835,60,0.835,61,0.835,62,1.174,63,0.863,64,0.892,65,0.892,66,0.892,67,0.892,68,0.892,104,0.983,166,1.684,180,1.319,212,1.083,213,1.566,214,1.049,215,1.049,216,1.58,217,0.952,222,0.983,225,1.225,226,1.431,243,2.292,246,1.156,248,1.156,250,3.03,251,1.512,253,3.327,254,1.685,258,0.952,259,0.952,260,0.952,261,0.952,262,0.952,263,0.952,264,0.952,265,0.952,266,0.921,267,0.952,268,0.952,269,0.952,270,0.983,271,0.983,272,0.983,273,0.983,274,0.983,275,4.168,276,1.156,277,1.972,278,1.156,279,4.168,280,2.811,281,6.024,282,5.256,283,6.511,284,6.441,285,2.262,286,1.685,287,6.035,288,3.487,289,1.685,290,1.624,291,1.015,292,1.972,293,1.156]],["title/DP/%E6%9C%9F%E6%9C%9BDP/",[2,0.314,18,1.392]],["text/DP/%E6%9C%9F%E6%9C%9BDP/",[2,0.746,7,0.668,8,0.738,9,0.989,10,0.58,11,0.559,12,0.442,13,0.773,14,0.708,15,0.644,18,3.038,21,0.424,22,1.491,30,0.538,31,0.623,32,0.668,33,0.668,34,0.715,53,0.765,54,0.765,55,0.765,56,0.79,57,0.79,58,0.79,59,0.79,60,0.79,61,0.79,62,0.817,63,0.817,64,0.844,65,0.844,66,0.844,67,0.844,68,0.844,78,2.696,104,0.931,180,1.248,212,1.026,213,1.483,214,0.993,215,0.993,216,1.485,217,0.901,222,0.931,225,0.623,243,2.207,244,3.623,245,3.092,246,1.094,248,1.094,250,2.868,251,3.054,253,2.82,254,1.595,258,0.901,259,0.901,260,0.901,261,0.901,262,0.901,263,0.901,264,0.901,265,0.901,266,0.872,267,0.901,268,0.901,269,0.901,270,0.931,271,0.931,272,0.931,273,0.931,274,0.931,277,1.867,278,1.514,286,1.595,291,0.961,292,1.867,294,0.961,295,0.961,296,0.961,297,0.961,298,0.961,299,0.993,300,3.945,301,3.623,302,3.115,303,2.368,304,2.136,305,3.945,306,2.245,307,1.736,308,4.766,309,3.945]],["title/DP/%E6%A0%91%E5%BD%A2DP/",[2,0.314,18,1.392]],["text/DP/%E6%A0%91%E5%BD%A2DP/",[2,0.745,7,0.641,8,0.702,9,0.962,10,0.556,11,0.751,12,0.425,13,0.536,14,0.5,15,0.39,18,2.936,21,0.407,22,1.493,23,2.645,30,0.517,31,0.598,32,0.641,33,0.641,34,0.686,53,0.734,54,1.028,55,0.734,56,0.759,57,0.759,58,0.759,59,0.759,60,0.759,61,0.759,62,0.784,63,0.784,64,0.81,65,0.81,66,0.81,67,0.81,68,0.81,145,1.793,170,2.365,216,1.556,218,2.051,225,0.837,226,1.099,245,3.673,246,1.472,248,1.472,253,3.428,257,3.141,258,0.865,259,0.865,260,0.865,261,0.865,262,0.865,263,0.865,264,0.865,265,0.865,266,0.837,267,0.865,268,0.865,269,0.865,270,0.894,271,0.894,272,0.894,273,0.894,274,0.894,276,1.051,280,2.316,286,2.145,289,2.145,290,2.068,294,0.923,295,0.923,296,0.923,297,0.923,298,0.923,299,0.953,307,1.472,310,0.985,311,1.017,312,1.017,313,1.017,314,1.017,315,1.051,316,1.086,317,1.086,318,1.086,319,3.788,320,7.435,321,5.138,322,3.858,323,3.841,324,3.788,325,3.788,326,2.718,327,2.741,328,2.991,329,3.788,330,5.347,331,3.788,332,3.788,333,2.273,334,3.16,335,3.788]],["title/DP/%E6%A6%82%E7%8E%87DP/",[2,0.314,18,1.392]],["text/DP/%E6%A6%82%E7%8E%87DP/",[2,0.745,7,0.716,8,0.734,9,1.038,10,0.622,11,0.599,12,0.474,13,0.811,14,0.539,15,0.436,18,2.929,21,0.455,22,1.496,30,0.577,31,0.668,32,0.716,33,0.716,34,0.767,53,0.82,54,0.82,55,0.82,56,1.147,57,0.848,58,0.848,59,0.848,60,0.848,61,0.848,62,0.876,63,0.876,64,0.905,65,0.905,66,0.905,67,0.905,68,0.905,78,2.09,110,6.047,166,1.945,216,1.408,222,0.998,225,1.313,246,1.174,248,1.174,250,3.076,251,2.945,253,2.186,258,0.966,259,0.966,260,0.966,261,0.966,262,0.966,263,0.966,264,0.966,265,0.966,266,0.935,267,0.966,268,0.966,269,0.966,278,1.588,286,1.711,302,3.34,303,2.539,304,2.291,306,4.263,307,1.801,308,3.694,336,4.231,337,2.152,338,4.231,339,4.231,340,4.231,341,4.999,342,4.999,343,5.726,344,5.726,345,4.231]],["title/DP/%E7%8A%B6%E5%8E%8BDP/",[18,1.804]],["text/DP/%E7%8A%B6%E5%8E%8BDP/",[2,0.746,7,0.575,8,0.702,9,0.89,10,0.499,11,0.696,12,0.381,13,0.696,14,0.32,15,0.35,18,2.773,21,0.365,22,1.489,30,0.67,31,0.775,32,0.575,33,0.575,34,0.616,53,0.952,54,0.659,55,0.659,56,0.681,57,0.984,58,0.681,59,0.681,60,0.681,61,0.681,62,0.704,63,0.704,64,0.727,65,0.727,66,0.727,67,0.727,68,0.727,101,2.684,104,0.802,166,1.54,170,2.439,180,1.076,212,0.884,213,1.278,214,0.856,215,0.856,216,1.604,217,0.776,222,0.802,225,1.283,226,0.704,244,2.85,245,1.679,246,0.943,248,0.943,251,2.974,253,2.538,256,2.27,258,0.776,259,0.776,260,0.776,261,0.776,262,0.776,263,0.776,264,0.776,265,0.776,266,0.752,267,0.776,268,0.776,269,0.776,270,0.802,271,0.802,272,0.802,273,0.802,274,0.802,276,0.943,278,1.753,283,5.037,285,2.068,289,1.375,290,1.325,291,1.406,292,1.609,293,1.363,294,0.828,295,0.828,296,0.828,297,0.828,298,0.828,299,0.856,303,2.041,304,1.841,310,0.884,311,0.913,312,0.913,313,0.913,314,0.913,315,0.943,316,0.974,317,0.974,318,0.974,326,2.439,337,2.825,346,1.007,347,1.007,348,1.007,349,1.007,350,1.007,351,1.041,352,1.041,353,1.041,354,1.076,355,1.076,356,3.4,357,3.4,358,2.87,359,2.684,360,3.4,361,3.265,362,3.4,363,4.913,364,2.422,365,1.935]],["title/Data_Structure/",[90,3.051]],["text/Data_Structure/",[]],["title/Data_Structure/RMQ/",[366,3.489]],["text/Data_Structure/RMQ/",[2,0.745,7,0.56,8,0.734,9,0.873,10,0.708,11,0.469,12,0.371,13,0.682,14,0.535,15,0.341,21,0.356,22,0.903,30,0.452,31,0.522,32,0.56,33,0.56,34,0.6,53,0.641,54,0.641,55,0.641,56,0.663,57,0.663,58,0.663,59,0.663,60,0.663,61,0.663,62,0.685,63,0.998,64,0.708,65,0.708,66,0.708,67,0.708,68,0.708,104,0.781,166,1.819,173,2.48,183,3.224,212,1.857,214,0.833,215,0.833,216,1.619,217,0.756,218,1.792,222,0.781,225,1.093,226,1.433,243,1.948,245,2.807,246,0.918,248,0.918,254,1.338,257,3.533,258,0.756,259,0.756,260,0.756,261,0.756,262,0.756,263,0.756,264,0.756,265,0.756,266,0.732,267,0.756,268,0.756,269,0.756,270,0.781,271,0.781,272,0.781,273,0.781,274,0.781,276,0.918,278,1.576,291,1.384,292,2.28,293,1.337,294,0.806,295,0.806,296,0.806,297,0.806,298,0.806,299,0.833,303,1.986,307,1.337,310,0.86,311,0.889,312,0.889,313,0.889,314,0.889,315,0.918,316,0.949,317,0.949,318,0.949,346,0.98,347,0.98,348,0.98,349,0.98,350,0.98,351,1.013,352,1.013,353,1.013,354,1.047,355,1.047,358,2.188,359,2.613,361,3.918,366,5.195,367,1.083,368,1.083,369,1.047,370,1.083,371,1.083,372,1.083,373,1.083,374,3.31,375,2.89,376,2.104,377,1.792,378,1.792,379,1.986,380,1.883,381,2.48,382,1.503,383,2.89,384,5.449,385,3.475,386,4.002,387,5.449,388,3.347,389,4.819,390,6.241,391,6.922,392,6.241,393,6.922]],["title/Data_Structure/ST/",[394,2.88]],["text/Data_Structure/ST/",[2,0.745,7,0.7,8,0.74,9,1.022,10,0.828,11,0.586,12,0.463,13,0.798,14,0.531,15,0.426,18,2.954,21,0.444,22,1.351,30,0.564,31,0.653,32,0.7,33,0.7,34,0.749,53,0.801,54,0.801,55,0.801,56,0.828,57,0.828,58,0.828,59,0.828,60,0.828,61,1.129,62,0.856,63,0.856,64,0.885,65,0.885,66,0.885,67,1.206,68,0.885,104,0.975,120,3.584,166,1.563,212,1.874,214,1.04,215,1.04,216,1.595,217,0.944,222,0.975,225,1.24,226,1.167,243,2.279,245,3.168,246,1.147,248,1.147,251,2.812,254,1.671,256,2.332,257,2.668,258,0.944,259,0.944,260,0.944,261,0.944,262,0.944,263,0.944,264,0.944,265,0.944,266,0.914,267,0.944,268,0.944,269,0.944,270,0.975,271,0.975,272,0.975,273,0.975,274,0.975,278,1.147,289,1.671,290,1.611,291,1.563,292,2.668,293,1.564,294,1.007,295,1.007,296,1.007,297,1.007,298,1.007,299,1.04,307,1.147,376,2.628,377,2.238,378,2.238,379,2.481,380,2.353,381,1.804,382,1.878,385,3.123,388,3.008,394,4.135,395,3.264,396,5.637,397,3.208]],["title/Data_Structure/%E5%88%86%E5%9D%97/",[2,0.407]],["text/Data_Structure/%E5%88%86%E5%9D%97/",[2,0.746,7,0.472,8,0.71,9,0.769,10,0.41,11,0.395,12,0.313,13,0.601,14,0.399,15,0.437,21,0.3,22,0.962,23,2.211,30,0.381,31,0.44,32,0.472,33,0.472,34,0.505,53,0.541,54,0.541,55,0.541,56,0.559,57,0.559,58,0.559,59,0.559,60,0.559,61,0.559,62,0.578,63,0.578,64,0.597,65,0.597,66,0.597,67,0.597,68,0.597,85,2.873,87,3.49,104,0.658,166,1.251,173,3.544,183,2.191,211,2.803,212,1.491,214,0.702,215,0.702,216,1.574,217,0.637,222,0.658,225,1.221,226,0.878,243,1.715,246,0.774,248,0.774,249,3.519,251,2.358,254,2.628,258,0.637,259,0.637,260,0.637,261,0.637,262,0.637,263,0.637,264,0.637,265,0.637,266,0.617,267,0.637,268,0.969,269,0.969,270,1.001,271,0.658,272,0.658,273,0.658,274,0.658,276,0.774,277,1.32,278,0.774,285,2.334,287,5.899,291,1.504,293,2.126,294,0.68,295,0.68,296,0.68,297,0.68,298,0.68,299,0.702,307,1.177,310,0.725,311,0.749,312,0.749,313,0.749,314,0.749,315,0.774,316,0.799,317,0.799,318,0.799,334,2.948,337,1.93,346,0.826,347,0.826,348,0.826,349,0.826,350,0.826,351,0.854,352,0.854,353,0.854,354,0.883,355,0.883,367,0.913,368,0.913,369,0.883,370,0.913,371,0.913,372,0.913,373,0.913,376,1.773,377,1.51,378,1.51,379,1.674,382,1.267,385,3.353,388,3.244,398,2.789,399,2.789,400,3.885,401,2.789,402,0.944,403,0.977,404,0.977,405,0.944,406,0.944,407,0.977,408,1.012,409,1.012,410,1.012,411,1.012,412,1.048,413,1.048,414,1.048,415,1.048,416,1.087,417,1.087,418,1.087,419,1.087,420,1.128,421,1.128,422,1.128,423,1.128,424,1.171,425,1.32,426,1.32,427,1.32,428,1.378,429,6.079,430,5.131,431,1.773,432,5.191,433,3.704,434,4.053,435,1.587]],["title/Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/",[2,0.407]],["text/Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/",[2,0.746,7,0.442,8,0.751,9,0.731,10,0.384,11,0.571,12,0.293,13,0.37,14,0.731,15,0.269,21,0.281,22,1.187,23,2.072,30,0.356,31,0.412,32,0.442,33,0.442,34,0.473,53,0.506,54,0.506,55,0.506,56,0.523,57,0.523,58,0.523,59,0.523,60,0.523,61,0.523,62,0.541,63,0.541,64,0.559,65,0.559,66,0.559,67,0.559,68,0.559,70,1.899,96,5.054,104,0.616,117,4.898,161,3.001,180,0.827,183,2.863,212,0.679,213,0.982,214,0.657,215,0.657,216,1.525,217,0.596,222,0.616,225,1.206,226,1.241,251,1.464,255,4.335,256,2.144,258,0.596,259,0.596,260,0.596,261,0.596,262,0.596,263,0.596,264,0.596,265,0.596,266,0.577,267,0.596,268,0.596,269,0.596,270,0.616,271,0.616,272,0.616,273,0.616,274,0.616,276,0.725,278,0.725,285,1.613,288,3.789,291,0.983,293,1.119,294,0.636,295,0.636,296,0.636,297,0.636,298,0.636,299,0.657,301,3.457,306,3.604,307,1.538,310,0.679,311,0.701,312,0.701,313,0.701,314,0.701,315,0.725,316,0.749,317,0.749,318,0.749,346,0.774,347,0.774,348,0.774,349,0.774,350,0.774,351,0.8,352,0.8,353,0.8,354,0.827,355,0.827,364,1.694,367,0.855,368,0.855,369,0.827,370,0.855,371,0.855,372,0.855,373,0.855,381,1.76,385,3.302,386,4.031,388,3.18,402,0.884,403,0.915,404,0.915,405,0.884,406,0.884,407,0.915,408,0.948,409,0.948,410,0.948,411,0.948,412,0.982,413,0.982,414,0.982,415,0.982,416,1.018,417,1.018,418,1.018,419,1.018,420,1.056,421,1.056,422,1.056,423,1.056,436,2.28,437,2.28,438,2.732,439,2.062,440,1.694,441,1.899,442,4.303,443,5.197,444,5.088,445,5.088,446,2.28,447,1.186,448,1.66,449,5.953,450,1.66,451,3.522,452,2.421,453,2.28,454,4.303,455,2.28,456,4.303,457,2.062,458,3.891,459,2.28,460,2.28,461,3.801,462,1.568,463,3.583,464,2.28,465,2.28,466,2.062,467,2.28,468,2.28,469,2.28,470,2.28]],["title/Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/",[2,0.407]],["text/Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/",[2,0.744,7,0.695,8,0.617,9,1.017,10,0.824,11,0.582,12,0.46,13,0.795,14,0.387,15,0.423,21,0.441,22,1.348,23,2.713,30,0.56,31,0.648,32,0.695,33,0.695,34,0.744,53,0.796,54,0.796,55,0.796,56,0.823,57,0.823,58,0.823,59,0.823,60,0.823,61,0.823,62,0.85,63,0.85,64,0.879,65,0.879,66,0.879,67,0.879,68,0.879,104,0.969,161,3.719,166,1.557,211,3.266,212,1.786,214,1.033,215,1.033,216,1.576,217,0.938,222,0.969,225,1.135,226,1.323,243,2.268,245,2.772,246,1.139,248,1.139,254,3.128,256,2.326,258,0.938,259,0.938,260,0.938,261,0.938,262,0.938,263,0.938,264,0.938,265,0.938,266,0.908,267,0.938,268,0.938,269,0.938,270,0.969,271,0.969,272,0.969,273,0.969,274,0.969,276,1.139,278,1.139,285,2.092,289,1.66,290,1.6,291,1.752,292,1.943,293,1.556,294,1,295,1,296,1,297,1,298,1,299,1.033,307,1.139,310,1.067,311,1.103,312,1.103,313,1.103,314,1.103,315,1.139,316,1.177,317,1.177,318,1.177,334,3.139,346,1.216,347,1.216,348,1.216,349,1.216,350,1.216,377,2.223,378,2.223,379,2.464,380,2.337,381,1.792,397,3.193,434,4.43,471,4.106,472,4.106,473,7.424,474,5.58,475,5.046,476,6.391,477,4.106]],["title/Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/",[2,0.407]],["text/Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/",[2,0.745,7,0.487,8,0.705,9,0.788,10,0.639,11,0.408,12,0.323,13,0.408,14,0.271,15,0.297,21,0.31,22,1.173,23,2.613,30,0.393,31,0.455,32,0.487,33,0.487,34,0.522,53,0.558,54,0.558,55,0.558,56,0.577,57,0.577,58,0.577,59,0.871,60,0.871,61,0.577,62,0.596,63,0.596,64,0.616,65,0.616,66,0.616,67,0.616,68,0.616,104,0.679,161,3.389,173,2.285,211,3.384,212,1.776,214,0.725,215,0.725,216,1.594,217,0.658,218,1.559,222,1.025,225,0.686,226,1.084,243,1.757,245,2.586,246,0.799,248,0.799,251,2.661,254,1.164,258,0.658,259,0.658,260,0.658,261,0.658,262,0.658,263,0.658,264,0.658,265,0.658,266,0.637,267,0.658,268,0.658,269,0.658,270,0.679,271,0.679,272,0.679,273,0.679,274,0.679,276,0.799,278,1.452,285,1.713,289,1.164,290,1.122,291,1.664,293,1.736,294,0.702,295,0.702,296,0.702,297,0.702,298,0.702,299,0.725,303,1.729,307,0.799,310,0.749,311,0.773,312,0.773,313,0.773,314,0.773,315,0.799,316,0.825,317,0.825,318,0.825,334,3.421,337,1.083,346,0.853,347,0.853,348,0.853,349,0.853,350,0.853,351,0.882,352,0.882,353,0.882,354,0.911,355,0.911,358,1.308,359,2.274,361,2.245,364,2.198,365,2.474,367,0.943,368,0.943,369,0.911,370,0.943,371,0.943,372,0.943,373,0.943,375,2.515,376,1.831,377,1.559,378,1.559,379,1.729,380,1.639,381,1.257,383,2.515,397,4.346,402,0.975,403,1.009,404,1.009,405,0.975,406,0.975,407,1.009,408,1.045,409,1.045,410,1.045,411,1.045,412,1.083,413,1.083,414,1.083,415,1.083,416,1.122,417,1.122,418,1.122,419,1.122,420,1.164,421,1.164,422,1.164,423,1.164,424,1.209,435,1.639,443,5.7,444,5.7,445,5.49,450,4.736,463,5.49,466,2.274,474,5.464,475,5.882,478,2.88,479,2.88,480,7.941,481,4.347,482,4.347,483,1.831,484,2.763,485,2.515]],["title/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/",[2,0.407]],["text/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/",[2,0.746,7,0.406,8,0.668,9,0.574,10,0.352,11,0.449,12,0.523,13,0.34,14,0.356,15,0.389,21,0.406,22,1.146,30,0.327,31,0.379,32,0.406,33,0.406,34,0.435,53,0.465,54,0.465,55,0.465,56,0.481,57,0.481,58,0.481,59,0.481,60,0.481,61,0.481,62,0.497,63,0.497,64,0.513,65,0.513,66,0.513,67,0.513,68,0.513,78,1.865,87,2.412,104,0.566,145,2.964,160,1.185,166,1.22,170,2.717,180,0.759,192,1.136,211,2.404,212,0.624,213,0.902,214,0.604,215,0.604,216,1.606,217,0.548,222,0.748,225,0.988,226,0.656,244,3.6,246,1.469,248,1.469,249,3.22,251,2.089,253,1.239,256,2.362,257,1.787,258,0.548,259,0.548,260,0.548,261,0.548,262,0.548,263,0.548,264,0.548,265,0.548,266,0.53,267,0.548,268,0.548,269,0.548,270,0.566,271,0.566,272,0.566,273,0.566,274,0.748,276,0.666,278,0.666,280,1.648,285,2.201,286,2.024,291,1.138,292,0.657,293,1.047,294,0.772,295,0.772,296,0.585,297,0.772,298,0.772,299,0.604,301,2.615,304,1.299,307,1.808,310,0.624,311,0.644,312,0.644,313,0.644,314,0.644,315,0.666,316,0.688,317,0.688,318,0.688,322,2.937,323,2.735,326,2.805,327,1.239,333,0.833,337,1.603,346,0.711,347,0.711,348,0.711,349,0.711,350,0.711,351,0.734,352,0.734,353,0.734,354,0.759,355,0.759,358,1.715,365,1.365,367,0.785,368,0.785,369,0.759,370,0.785,371,0.785,372,0.785,373,0.785,382,1.09,385,1.791,386,3.669,388,1.724,402,0.812,403,0.841,404,0.841,405,0.812,406,0.812,407,0.841,408,0.87,409,0.87,410,0.87,411,0.87,412,0.902,413,0.902,414,0.902,415,0.902,416,0.935,417,0.935,418,0.935,419,0.935,420,0.97,421,0.97,422,0.97,423,0.97,424,1.007,425,1.136,426,1.136,427,1.136,428,1.185,440,1.007,447,0.63,452,0.833,486,1.212,487,3.447,488,3.759,489,3.585,490,1.212,491,3.642,492,3.588,493,1.894,494,2.305,495,4.773,496,4.14,497,3.177,498,1.894,499,1.894,500,1.239,501,1.239,502,1.239,503,1.239,504,1.239,505,1.239,506,1.239,507,1.239,508,1.239,509,1.239,510,1.239,511,1.239,512,1.239,513,1.239,514,1.239,515,1.239,516,1.239,517,1.239,518,1.239,519,1.239,520,1.239,521,1.239,522,1.299,523,1.299,524,1.299,525,1.299,526,1.299,527,1.299,528,1.365,529,0.833,530,0.882,531,0.882,532,0.882,533,0.882,534,0.882,535,0.882,536,0.882,537,0.882,538,0.882,539,0.94,540,0.94,541,0.94,542,1.009,543,1.009,544,1.009,545,1.009,546,1.009,547,1.009,548,1.009,549,5.382,550,3.162,551,4.029,552,5.618,553,4.332,554,5.382,555,3.686,556,2.095,557,3.724,558,5.382,559,0.751,560,4.076,561,0.79,562,0.751,563,1.212,564,1.212,565,1.212,566,1.212,567,1.212,568,1.212,569,1.212,570,1.212,571,1.212,572,1.212]],["title/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k",[2,0.381,256,1.021]],["text/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k",[2,0.73,166,1.597,225,1.034,256,2.55,285,2.144,486,5.721,487,3.237,488,3.933]],["title/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot",[8,0.271,323,1.558,489,2.043]],["text/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot",[2,0.725,249,3.574,323,3.41,326,2.561,386,3.261,490,5.763,491,3.41]],["title/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis",[2,0.216,14,0.24,492,2.14]],["text/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis",[2,0.73,326,2.676,491,3.875,492,3.523,493,5.136,494,4.73,495,5.025,496,4.406]],["title/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle",[2,0.216,15,0.262,488,1.527,497,1.527]],["text/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle",[2,0.716,285,2.18,326,2.574,497,3.998,498,5.259]],["title/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz",[2,0.216,21,0.273,487,1.953]],["text/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz",[2,0.712,326,2.58,487,3.303,499,5.279]],["title/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve",[2,0.216,12,0.285,253,1.314,487,1.257]],["text/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve",[2,0.746,7,0.4,8,0.673,9,0.429,10,0.348,11,0.335,12,0.419,13,0.335,14,0.223,15,0.244,21,0.254,22,1.139,30,0.323,31,0.373,32,0.4,33,0.4,34,0.429,53,0.459,54,0.459,55,0.459,56,0.474,57,0.474,58,0.474,59,0.474,60,0.474,61,0.474,62,0.49,63,0.49,64,0.506,65,0.506,66,0.506,67,0.506,68,0.506,78,1.845,87,2.39,104,0.558,145,3.011,160,1.845,166,1.393,170,2.731,180,0.749,192,1.12,211,2.386,212,0.615,213,0.889,214,0.595,215,0.595,216,1.611,217,0.54,222,0.881,225,0.959,226,0.49,244,3.501,246,1.457,248,1.457,249,3.096,251,2.521,256,2.353,257,1.767,258,0.54,259,0.54,260,0.54,261,0.54,262,0.54,263,0.54,264,0.54,265,0.54,266,0.523,267,0.54,268,0.54,269,0.54,270,0.558,271,0.558,272,0.558,273,0.558,274,0.881,276,0.656,278,0.656,280,1.63,285,1.719,286,2.124,291,1.127,292,1.12,293,0.656,294,0.91,295,0.91,296,0.576,297,0.576,298,0.576,299,0.595,301,2.595,304,1.281,307,1.829,310,0.615,311,0.635,312,0.635,313,0.635,314,0.635,315,0.656,316,0.678,317,0.678,318,0.678,322,3.002,323,1.929,326,2.761,327,1.222,333,1.42,337,1.404,346,0.701,347,0.701,348,0.701,349,0.701,350,0.701,351,0.724,352,0.724,353,0.724,354,0.749,355,0.749,358,1.696,365,1.346,367,0.774,368,0.774,369,0.749,370,0.774,371,0.774,372,0.774,373,0.774,382,1.075,386,3.612,402,0.801,403,0.829,404,0.829,405,0.801,406,0.801,407,0.829,408,0.858,409,0.858,410,0.858,411,0.858,412,0.889,413,0.889,414,0.889,415,0.889,416,0.922,417,0.922,418,0.922,419,0.922,420,0.957,421,0.957,422,0.957,423,0.957,424,0.993,425,1.12,426,1.12,427,1.12,428,1.169,440,0.993,447,1.075,487,2.825,488,3.153,489,3.133,491,3.139,492,3.096,495,4.649,496,3.873,497,2.241,500,1.222,501,1.222,502,1.222,503,1.222,504,1.222,505,1.222,506,1.222,507,1.222,508,1.222,509,1.222,510,1.222,511,1.222,512,1.222,513,1.222,514,1.222,515,1.222,516,1.222,517,1.222,518,1.222,519,1.222,520,1.222,521,1.222,522,1.281,523,1.281,524,1.281,525,1.281,526,1.281,527,1.281,528,1.346,529,1.42,530,1.504,531,1.504,532,1.504,533,1.504,534,1.504,535,1.504,536,1.504,537,1.504,538,1.504,539,1.602,540,1.602,541,1.602,542,1.72,543,1.72,544,1.72,545,1.72,546,1.72,547,1.72,548,1.72,549,5.487,550,3.133,551,4.158,552,5.691,553,4.309,554,5.359,555,3.652,556,3.26,557,4.993,558,5.359,559,1.281,560,5.306,561,1.346,562,1.281,563,2.066,564,2.066]],["title/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k_1",[2,0.381,256,1.021]],["text/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k_1",[2,0.725,225,1.042,256,2.561,285,2.16,487,3.261,488,3.962,565,5.763]],["title/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot_1",[2,0.216,8,0.229,323,1.314,489,1.723]],["text/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot_1",[2,0.711,323,3.448,386,3.297,491,3.448,566,5.827,567,5.827]],["title/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1",[2,0.216,14,0.24,492,2.14]],["text/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1",[2,0.715,326,2.561,491,3.41,492,3.574,493,5.211,494,4.799,495,4.196,496,4.47,568,5.763,569,5.763]],["title/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1",[2,0.216,15,0.262,488,1.527,497,1.527]],["text/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1",[2,0.722,244,3.243,285,2.148,326,2.553,491,3.895,494,4.773,497,3.94,498,5.183,570,5.732,571,5.732]],["title/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz_1",[2,0.216,21,0.273,487,1.953]],["text/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz_1",[2,0.705,487,3.315,499,5.298,572,5.859]],["title/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1",[2,0.216,12,0.285,253,1.314,487,1.257]],["text/Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1",[2,0.745,7,0.44,8,0.653,9,0.728,10,0.382,11,0.569,12,0.45,13,0.368,14,0.245,15,0.267,21,0.279,22,1.184,30,0.354,31,0.41,32,0.44,33,0.44,34,0.471,53,0.503,54,0.503,55,0.503,56,0.52,57,0.52,58,0.52,59,0.52,60,0.52,61,0.52,62,0.538,63,0.538,64,0.556,65,0.556,66,0.556,67,0.556,68,0.556,78,1.984,87,2.537,104,0.613,145,2.99,166,0.633,170,2.724,180,0.822,192,1.229,211,2.51,212,0.675,213,0.976,214,0.654,215,0.654,216,1.609,217,0.593,222,0.613,225,0.943,226,0.832,244,3.69,246,1.533,248,1.533,249,3.235,256,1.871,257,1.901,258,0.593,259,0.593,260,0.593,261,0.593,262,0.593,263,0.593,264,0.593,265,0.593,266,0.574,267,0.593,268,0.593,269,0.593,270,0.613,271,0.613,272,0.613,273,0.613,274,0.613,276,0.72,278,0.72,280,1.753,285,2.286,286,1.985,291,1.197,293,1.362,294,0.633,295,0.633,296,0.633,297,0.979,298,0.979,299,0.654,301,2.73,304,1.406,307,1.827,310,0.675,311,0.697,312,0.697,313,0.697,314,0.697,315,0.72,316,0.744,317,0.744,318,0.744,322,2.952,323,2.075,326,2.794,327,1.342,337,1.846,346,0.769,347,0.769,348,0.769,349,0.769,350,0.769,351,0.795,352,0.795,353,0.795,354,0.822,355,0.822,358,1.824,365,1.478,367,0.85,368,0.85,369,0.822,370,0.85,371,0.85,372,0.85,373,0.85,382,1.179,385,2.509,386,3.69,388,2.416,402,0.879,403,0.91,404,0.91,405,0.879,406,0.879,407,0.91,408,0.942,409,0.942,410,0.942,411,0.942,412,0.976,413,0.976,414,0.976,415,0.976,416,1.012,417,1.012,418,1.012,419,1.012,420,1.05,421,1.05,422,1.05,423,1.05,424,1.09,425,1.229,426,1.229,427,1.229,428,1.283,440,1.09,452,1.559,487,2.952,488,3.586,489,3.326,491,3.516,492,3.235,495,4.749,496,4.047,497,2.41,500,1.342,501,1.342,502,1.342,503,1.342,504,1.342,505,1.342,506,1.342,507,1.342,508,1.342,509,1.342,510,1.342,511,1.342,512,1.342,513,1.342,514,1.342,515,1.342,516,1.342,517,1.342,518,1.342,519,1.342,520,1.342,521,1.342,522,1.406,523,1.406,524,1.406,525,1.406,526,1.406,527,1.406,528,1.478,549,5.373,550,3.326,551,4.018,552,5.634,553,4.461,554,5.515,555,3.877,558,5.515]],["title/Data_Structure/%E7%82%B9%E5%88%A8/",[2,0.407]],["text/Data_Structure/%E7%82%B9%E5%88%A8/",[2,0.746,7,0.278,8,0.724,9,0.502,10,0.241,11,0.232,12,0.402,13,0.392,14,0.512,15,0.485,21,0.453,22,0.958,23,2.712,30,0.378,31,0.259,32,0.278,33,0.278,34,0.297,53,0.318,54,0.318,55,0.318,56,0.329,57,0.329,58,0.329,59,0.329,60,0.329,61,0.329,62,0.34,63,0.34,64,0.351,65,0.351,66,0.351,67,0.351,68,0.351,78,0.81,87,1.855,96,4.758,104,0.387,141,3.897,145,2.573,161,2.766,166,0.875,170,1.73,180,0.519,183,2.178,192,0.776,212,0.426,213,0.616,214,0.413,215,0.413,216,1.595,217,0.375,222,0.653,225,1.195,226,1.183,243,1.119,246,0.768,248,0.768,254,0.663,258,0.375,259,0.375,260,0.632,261,0.375,262,0.375,263,0.632,264,0.375,265,0.375,266,0.363,267,0.375,268,0.375,269,0.375,270,0.387,271,0.387,272,0.387,273,0.387,274,0.387,276,0.455,277,0.776,278,0.455,280,1.567,285,1.672,286,1.119,289,0.663,290,0.639,291,1.392,292,1.699,293,1.307,294,0.4,295,0.4,296,0.4,297,0.4,298,0.4,299,0.413,303,4.316,307,1.65,310,0.426,311,0.44,312,0.44,313,0.44,314,0.44,315,0.455,316,0.47,317,0.47,318,0.47,321,2.431,323,2.433,326,1.841,327,2.809,328,2.834,334,3.286,346,0.486,347,0.486,348,0.486,349,0.486,350,0.486,351,0.502,352,0.502,353,0.502,354,0.519,355,0.519,365,0.933,367,0.537,368,0.537,369,0.519,370,0.537,371,0.537,372,0.537,373,0.537,381,1.208,382,0.745,385,3.019,386,3.645,388,2.877,397,2.907,400,2.856,402,0.555,403,0.575,404,0.575,405,0.555,406,0.555,407,0.575,408,0.595,409,0.595,410,0.595,411,0.595,412,0.616,413,0.616,414,0.616,415,0.616,416,0.639,417,0.639,418,0.639,419,0.639,420,0.663,421,0.663,422,0.663,423,0.663,424,0.688,425,0.776,426,0.776,427,0.776,428,0.81,440,0.688,450,4.284,461,4.169,483,1.043,484,2.681,491,2.639,500,0.847,501,0.847,502,0.847,503,0.847,504,0.847,505,0.847,506,0.847,507,0.847,508,0.847,509,0.847,510,0.847,511,0.847,512,0.847,513,0.847,514,0.847,515,0.847,516,0.847,517,0.847,518,0.847,519,0.847,520,0.847,521,0.847,522,0.888,523,0.888,524,0.888,525,0.888,526,0.888,527,0.888,528,0.933,529,0.984,530,1.043,531,1.043,532,1.043,533,1.043,534,1.043,535,1.043,536,1.043,537,1.043,538,1.043,539,1.111,540,1.111,541,1.111,542,1.192,543,1.192,544,1.192,545,1.192,546,1.192,547,1.192,548,1.192,550,2.856,553,4.028,573,1.64,574,1.432,575,1.432,576,1.432,577,1.432,578,1.432,579,1.432,580,1.432,581,1.432,582,1.432,583,1.432,584,1.432,585,1.432,586,1.432,587,1.432,588,1.432,589,1.432,590,1.432,591,1.432,592,1.432,593,1.432,594,1.432,595,1.295,596,1.432,597,1.432,598,1.432,599,1.432,600,1.432,601,1.432,602,1.432,603,1.432,604,1.432,605,1.432,606,1.432,607,1.432,608,1.432,609,1.432,610,1.432,611,1.432,612,1.432,613,1.432,614,1.432,615,1.432,616,1.432,617,5.369,618,5.369,619,5.116,620,4.113,621,1.432,622,4.748,623,5.978,624,5.523,625,3.682,626,3.134,627,3.134,628,3.134,629,3.682,630,3.134,631,2.767,632,2.416,633,2.767,634,2.767,635,4.748,636,1.432,637,5.777,638,2.834,639,5.369,640,5.369,641,3.066,642,3.719]],["title/Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/",[643,4.19]],["text/Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/",[2,0.746,7,0.44,8,0.751,9,0.729,10,0.382,11,0.569,12,0.291,13,0.368,14,0.731,15,0.268,21,0.28,22,1.185,23,2.069,30,0.355,31,0.41,32,0.44,33,0.44,34,0.471,53,0.504,54,0.504,55,0.504,56,0.521,57,0.521,58,0.521,59,0.521,60,0.521,61,0.521,62,0.539,63,0.539,64,0.556,65,0.86,66,0.556,67,0.556,68,0.556,70,1.891,96,5.051,104,0.613,117,4.894,161,2.994,166,0.634,180,0.823,183,2.857,212,0.676,213,0.978,214,0.655,215,0.655,216,1.523,217,0.594,222,0.613,225,1.215,226,1.238,251,1.459,255,4.328,256,2.14,258,0.594,259,0.594,260,0.594,261,0.594,262,0.594,263,0.594,264,0.594,265,0.594,266,0.575,267,0.594,268,0.594,269,0.594,270,0.613,271,0.613,272,0.613,273,0.613,274,0.613,276,0.721,278,0.721,285,1.608,288,3.784,291,0.98,293,1.115,294,0.634,295,0.634,296,0.634,297,0.634,298,0.634,299,0.655,301,3.452,306,3.598,307,1.534,310,0.676,311,0.698,312,0.698,313,0.698,314,0.698,315,0.721,316,0.745,317,0.745,318,0.745,346,0.77,347,0.77,348,0.77,349,0.77,350,0.77,351,0.796,352,0.796,353,0.796,354,0.823,355,0.823,364,1.688,367,0.851,368,0.851,369,0.823,370,0.851,371,0.851,372,0.851,373,0.851,381,1.755,385,3.3,386,4.029,388,3.178,402,0.88,403,0.911,404,0.911,405,0.88,406,0.88,407,0.911,408,0.944,409,0.944,410,0.944,411,0.944,412,0.978,413,0.978,414,0.978,415,0.978,416,1.013,417,1.013,418,1.013,419,1.013,420,1.051,421,1.051,422,1.051,423,1.051,424,1.092,436,2.271,437,2.271,438,2.723,439,2.053,440,1.688,441,1.891,442,4.291,443,5.19,444,5.081,445,5.081,446,2.271,447,1.181,448,1.653,449,5.945,450,1.653,451,3.51,452,2.413,453,2.271,454,4.291,455,2.271,456,4.291,457,2.053,458,3.881,459,2.271,460,2.271,461,3.794,462,1.561,463,3.574,464,2.271,465,2.271,466,2.053,467,2.271,468,2.271,469,2.271,470,2.271,644,2.053]],["title/Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/",[2,0.407]],["text/Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/",[2,0.746,7,0.377,8,0.722,9,0.644,10,0.522,11,0.504,12,0.249,13,0.315,14,0.608,15,0.229,21,0.239,22,1.306,23,2.28,30,0.304,31,0.351,32,0.377,33,0.377,34,0.403,53,0.431,54,0.431,55,0.431,56,0.446,57,0.446,58,0.446,59,0.446,60,0.446,61,0.446,62,0.461,63,0.461,64,0.476,65,0.476,66,0.476,67,0.761,68,0.761,85,3.437,104,0.525,166,1.082,180,0.704,183,2.621,192,1.053,212,0.578,213,0.836,214,0.56,215,0.56,216,1.546,217,0.508,222,0.525,225,1.166,226,1.225,257,3.496,258,0.508,259,0.508,260,0.508,261,0.508,262,0.508,263,0.508,264,0.508,265,0.508,266,0.492,267,0.508,268,0.508,269,0.508,270,0.525,271,0.525,272,0.525,273,0.525,274,0.525,276,0.617,278,0.617,285,2.111,291,1.236,293,1.408,294,0.542,295,0.542,296,0.542,297,0.542,298,0.542,299,0.56,307,1.539,310,0.578,311,0.597,312,0.597,313,0.597,314,0.597,315,0.617,316,0.638,317,0.638,318,0.638,334,3.041,346,0.659,347,0.659,348,0.659,349,0.659,350,0.659,351,0.681,352,0.681,353,0.681,354,0.704,355,0.704,361,1.837,365,1.266,367,0.728,368,0.728,369,0.704,370,0.728,371,0.728,372,0.728,373,0.728,381,1.552,382,1.01,384,6.771,385,3.19,386,4.161,387,6.771,388,3.018,397,2.888,402,0.753,403,0.78,404,0.78,405,0.753,406,0.753,407,0.78,408,0.807,409,0.807,410,0.807,411,0.807,412,0.836,413,0.836,414,0.836,415,0.836,416,0.867,417,0.867,418,0.867,419,0.867,420,0.899,421,0.899,422,0.899,423,0.899,424,0.934,425,1.053,426,1.053,427,1.053,428,1.099,438,1.507,458,3.507,461,4.434,484,2.824,500,1.149,501,1.149,502,1.149,503,1.149,504,1.149,505,1.149,506,1.149,507,1.149,508,1.149,509,1.149,510,1.149,511,1.149,512,1.149,513,1.149,514,1.149,515,1.149,516,1.149,517,1.149,518,1.149,519,1.149,520,1.149,521,1.149,522,1.205,523,1.205,524,1.205,525,1.205,526,1.205,527,1.205,528,1.266,529,1.335,530,1.414,531,1.414,532,1.414,533,1.414,534,1.414,535,1.414,536,1.414,537,1.414,538,1.414,638,3.507,642,3.507,643,5.423,645,1.757,646,2.225,647,7.388,648,7.465,649,6.968,650,7.094,651,6.968,652,7.094,653,5.075,654,2.225,655,2.225,656,2.225,657,1.942,658,2.225]],["title/Data_Structure/%E8%8E%AB%E9%98%9F/",[2,0.407]],["text/Data_Structure/%E8%8E%AB%E9%98%9F/",[2,0.746,7,0.499,8,0.707,9,0.802,10,0.433,11,0.627,12,0.33,13,0.752,14,0.417,15,0.547,21,0.317,22,1.106,23,2.173,30,0.402,31,0.465,32,0.499,33,0.499,34,0.534,53,0.571,54,0.571,55,0.571,56,0.591,57,0.591,58,0.591,59,0.591,60,0.591,61,0.591,62,0.61,63,0.61,64,0.631,65,0.631,66,0.631,67,0.631,68,0.631,87,2.743,104,0.695,166,1.765,173,3.542,180,0.933,212,0.766,213,1.108,214,0.742,215,0.742,216,1.514,217,0.673,222,0.695,225,1.223,226,1.309,243,1.789,246,0.818,248,0.818,249,4.195,253,2.285,254,2.983,258,0.673,259,0.673,260,0.673,261,0.673,262,0.673,263,0.673,264,0.673,265,0.673,266,0.652,267,0.673,268,0.673,269,0.673,270,0.695,271,1.044,272,0.695,273,0.695,274,0.695,276,0.818,277,1.395,278,1.473,285,2.253,289,1.192,290,1.149,291,1.294,293,1.965,294,0.718,295,0.718,296,0.718,297,0.718,298,0.718,299,0.742,304,1.596,307,1.473,310,0.766,311,0.792,312,0.792,313,0.792,314,0.792,315,0.818,316,0.845,317,0.845,318,0.845,334,3.005,346,0.873,347,0.873,348,0.873,349,0.873,350,0.873,351,0.902,352,0.902,353,0.902,354,0.933,355,0.933,358,1.339,367,0.965,368,0.965,369,0.933,370,0.965,371,0.965,372,0.965,373,0.965,382,1.339,385,3.394,388,3.254,402,0.998,403,1.033,404,1.033,405,0.998,406,0.998,407,1.033,429,6.011,431,1.874,440,1.238,441,4.29,447,1.339,452,1.769,659,2.948,660,2.328,661,2.948,662,2.948,663,1.997,664,6.639,665,5.309,666,3.493,667,4.827,668,4.597,669,2.948,670,5.9,671,5.9,672,5.309,673,2.948,674,7.673]],["title/Data_Structure/%E8%BE%B9%E5%89%96/",[2,0.407]],["text/Data_Structure/%E8%BE%B9%E5%89%96/",[2,0.746,7,0.245,8,0.728,9,0.451,10,0.213,11,0.205,12,0.367,13,0.352,14,0.45,15,0.337,21,0.352,22,1.133,23,2.629,30,0.339,31,0.393,32,0.245,33,0.245,34,0.262,53,0.28,54,0.28,55,0.28,56,0.29,57,0.29,58,0.29,59,0.29,60,0.29,61,0.29,62,0.3,63,0.3,64,0.31,65,0.31,66,0.31,67,0.31,68,0.31,78,1.229,85,0.98,87,2.006,96,4.732,104,0.341,141,4.052,145,2.421,166,0.353,170,2.41,180,0.787,183,2.006,192,0.685,212,0.376,213,0.544,214,0.364,215,0.364,216,1.587,217,0.33,222,0.341,225,1.168,226,1.251,243,1.006,244,2.36,246,0.69,248,0.69,254,0.585,256,1.732,257,2.556,258,0.33,259,0.33,260,0.33,261,0.33,262,0.33,263,0.33,264,0.33,265,0.568,266,0.55,267,0.568,268,0.33,269,0.33,270,0.341,271,0.341,272,0.341,273,0.341,274,0.341,276,0.401,277,0.685,278,0.401,280,1.428,281,2.583,285,1.564,286,1.006,289,0.585,290,0.564,291,1.246,292,1.177,293,0.908,294,0.353,295,0.353,296,0.353,297,0.353,298,0.353,299,0.364,307,1.625,310,0.376,311,0.389,312,0.389,313,0.389,314,0.389,315,0.401,316,0.415,317,0.415,318,0.415,321,2.216,323,2.26,326,2.432,327,3.026,328,2.583,334,3.107,337,0.544,346,0.429,347,0.429,348,0.429,349,0.429,350,0.429,351,0.443,352,0.443,353,0.443,354,0.458,355,0.458,364,0.608,365,1.862,367,0.474,368,0.474,369,0.458,370,0.474,371,0.474,372,0.474,373,0.474,381,1.086,382,0.657,385,2.989,386,3.771,388,2.851,397,2.49,402,0.49,403,0.507,404,0.507,405,0.49,406,0.49,407,0.507,408,0.525,409,0.525,410,0.525,411,0.525,412,0.544,413,0.544,414,0.544,415,0.544,416,0.564,417,0.564,418,0.564,419,0.564,420,0.585,421,0.585,422,0.585,423,0.585,424,0.608,425,0.685,426,0.685,427,0.685,428,0.715,435,0.823,439,1.142,440,0.608,450,4.809,461,4.138,462,0.868,484,3.038,491,2.642,500,0.748,501,0.748,502,0.748,503,0.748,504,0.748,505,0.748,506,0.748,507,0.748,508,0.748,509,0.748,510,0.748,511,0.748,512,0.748,513,0.748,514,0.748,515,0.748,516,0.748,517,0.748,518,0.748,519,0.748,520,0.748,521,0.748,522,0.784,523,0.784,524,0.784,525,0.784,526,0.784,527,0.784,528,0.823,529,0.868,530,0.92,531,0.92,532,0.92,533,0.92,534,0.92,535,0.92,536,0.92,537,0.92,538,0.92,539,0.98,540,0.98,541,0.98,542,1.052,543,1.052,544,1.052,545,1.052,546,1.052,547,1.052,548,1.052,550,2.63,553,3.464,574,1.263,575,1.263,576,1.263,577,1.263,578,1.263,579,1.263,580,1.263,581,1.263,582,1.263,583,1.263,584,1.263,585,1.263,586,1.263,587,1.263,588,1.263,589,1.263,590,1.263,591,1.263,592,1.263,593,1.263,594,1.263,595,1.142,596,1.263,597,1.263,598,1.263,599,1.263,600,1.263,601,1.263,602,1.263,603,1.263,604,1.263,605,1.263,606,1.263,607,1.263,608,1.263,609,1.263,610,1.263,611,1.263,612,1.263,613,1.263,614,1.263,615,1.263,616,1.263,617,5.547,618,5.547,619,1.142,620,3.391,621,1.263,622,4.466,623,5.942,624,5.942,625,3.391,626,2.857,627,2.857,628,2.857,629,3.391,630,2.857,632,2.172,635,5.114,636,1.263,637,5.276,638,3.067,639,6.02,640,6.02,641,3.474,642,3.773,675,1.447,676,1.447,677,1.447,678,1.447,679,1.447,680,1.263,681,1.447,682,1.447,683,1.447,684,1.447,685,1.447,686,1.447,687,1.447,688,1.447,689,1.447,690,1.447,691,1.447,692,1.447,693,1.447,694,1.447,695,1.447,696,1.447,697,1.447,698,1.447,699,1.447,700,1.447,701,1.447,702,1.447,703,1.447,704,1.447,705,1.447,706,1.447,707,1.447,708,1.447,709,1.447,710,1.447,711,1.447,712,1.447,713,1.447,714,1.447,715,1.447,716,1.447,717,1.447,718,6.484,719,1.447,720,4.375,721,4.778,722,2.488,723,2.488,724,1.142]],["title/Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/",[2,0.407]],["text/Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/",[2,0.746,7,0.465,8,0.693,9,0.76,10,0.404,11,0.389,12,0.308,13,0.389,14,0.608,15,0.432,21,0.295,22,1.457,23,2.114,30,0.375,31,0.434,32,0.465,33,0.465,34,0.498,53,0.532,54,0.532,55,0.532,56,0.55,57,0.55,58,0.55,59,0.55,60,0.55,61,0.55,62,0.569,63,0.569,64,0.588,65,0.588,66,0.588,67,0.588,68,0.588,117,4.272,141,4.389,170,2.698,211,2.31,216,1.376,217,0.627,218,3.319,225,1.251,226,1.435,244,2.811,258,0.627,259,0.627,260,0.627,261,0.627,262,0.627,263,0.627,264,0.627,265,0.627,266,0.607,267,0.627,268,0.627,269,0.627,270,0.648,271,0.648,272,0.648,273,0.648,274,0.648,276,0.762,286,1.111,291,1.239,293,1.579,294,0.669,295,0.669,296,0.669,297,0.669,298,0.669,299,0.691,301,3.192,306,3.677,307,0.762,310,0.714,311,0.738,312,0.738,313,0.738,314,0.738,315,0.762,316,0.787,317,0.787,318,0.787,326,1.42,334,2.82,341,3.661,342,3.661,346,0.813,347,0.813,348,0.813,349,0.813,350,0.813,351,0.841,352,0.841,353,0.841,354,0.869,355,0.869,364,3.042,367,0.899,368,0.899,369,0.869,370,0.899,371,0.899,372,0.899,373,0.899,385,3.208,402,0.93,403,1.469,404,1.469,405,0.93,406,0.93,407,0.962,408,0.997,409,0.997,410,0.997,411,0.997,432,5.674,438,3.444,440,1.153,447,1.904,448,2.666,452,1.649,457,3.31,484,1.746,595,2.169,666,3.31,725,1.997,726,2.169,727,5.72,728,5.691,729,5.691,730,4.44,731,4.138,732,6.734,733,6.929,734,3.049,735,3.31,736,1.997,737,3.049,738,2.747,739,2.747,740,5.641,741,4.193,742,4.193,743,4.193,744,2.747]],["title/Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/",[2,0.407]],["text/Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/",[2,0.746,7,0.601,8,0.692,9,0.919,10,0.522,11,0.503,12,0.398,13,0.503,14,0.477,15,0.522,21,0.382,22,1.461,23,1.162,30,0.484,31,0.56,32,0.601,33,0.601,34,0.643,53,0.688,54,0.688,55,0.688,56,0.711,57,0.711,58,0.711,59,0.711,60,0.711,61,0.711,62,0.735,63,0.735,64,0.76,65,0.76,66,0.76,67,0.76,68,0.76,76,3.685,117,4.744,170,1.716,216,1.472,217,0.811,218,1.922,222,0.837,225,1.291,226,1.224,258,0.811,259,0.811,260,0.811,261,0.811,262,0.811,263,0.811,264,0.811,265,0.811,266,0.785,267,0.811,268,0.811,269,0.811,270,0.837,271,0.837,272,0.837,273,0.837,274,0.837,291,1.235,293,0.985,294,0.865,295,0.865,296,0.865,297,0.865,298,0.865,299,0.893,306,2.884,310,0.923,311,0.953,312,0.953,313,0.953,314,0.953,334,1.549,358,1.612,385,3.516,388,2.607,405,1.202,432,5.454,452,2.131,461,3.869,727,4.667,730,5.629,731,3.685,740,4.425,745,2.803,746,5.068,747,6.876,748,8.315,749,5.629,750,3.1,751,3.55]],["title/Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/",[2,0.407]],["text/Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/",[2,0.744,7,0.88,8,0.723,9,0.942,10,0.764,11,0.736,12,0.582,13,0.736,14,0.489,15,0.674,21,0.559,22,1.486,30,0.709,31,0.82,32,0.88,33,0.88,34,0.942,53,1.007,54,1.007,55,1.007,141,4.082,216,1.007,225,0.82,226,1.076,251,2.98,256,1.76,306,3.728,364,3.162,406,1.76,431,3.304,641,5.644,731,4.763,732,7.304,735,4.103,737,3.779,752,4.103,753,4.103,754,5.197,755,5.719]],["title/Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/",[2,0.407]],["text/Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/",[2,0.745,7,0.428,8,0.699,9,0.714,10,0.372,11,0.359,12,0.284,13,0.558,14,0.371,15,0.405,21,0.272,22,1.447,23,2.635,30,0.537,31,0.4,32,0.428,33,0.428,34,0.459,53,0.491,54,0.491,55,0.491,56,0.507,57,0.507,58,0.507,59,0.507,60,0.507,61,0.507,62,0.524,63,0.524,64,0.542,65,0.542,66,0.542,67,0.542,68,0.542,104,0.597,107,3.109,166,1.328,170,2.808,212,1.625,214,0.637,215,0.637,216,1.44,217,0.578,218,4.426,222,0.597,225,1.186,226,1.586,244,3.841,256,1.636,258,0.578,259,0.578,260,0.578,261,0.578,262,0.578,263,0.578,264,0.578,265,0.578,266,0.56,267,0.578,268,0.578,269,0.578,270,0.597,271,0.597,272,0.597,273,0.597,274,0.597,276,0.702,277,1.198,278,2.106,290,0.986,291,1.328,292,1.863,293,1.34,294,0.617,295,0.617,296,0.617,297,0.617,298,0.617,299,0.637,301,3.621,306,4.171,310,0.658,311,0.68,312,0.68,313,0.68,314,0.68,315,0.702,316,0.726,317,0.726,318,0.726,334,3.436,346,0.75,347,0.75,348,0.75,349,0.75,350,0.75,351,0.775,352,0.775,353,0.775,354,0.801,355,0.801,367,0.828,368,0.828,369,0.801,370,0.828,371,0.828,372,0.828,373,1.289,376,1.609,377,1.371,378,1.371,379,1.519,380,1.441,381,1.105,382,1.15,385,2.479,388,2.204,402,1.333,403,0.887,404,0.887,405,0.857,406,0.857,407,0.887,408,0.918,409,0.918,410,0.918,411,0.918,412,0.952,413,0.952,414,0.952,415,0.952,431,1.609,432,2.667,438,1.714,440,1.063,443,3.963,444,4.294,445,4.294,447,2.476,448,4.149,461,3.753,463,3.963,485,2.21,641,3.963,724,4.662,727,5.994,731,4.294,735,1.999,750,2.21,755,2.21,756,1.999,757,1.999,758,1.999,759,3.937,760,2.532,761,4.832,762,2.532,763,6.252,764,3.937,765,3.937,766,2.532,767,7.086,768,4.219,769,1.714]],["title/Graph/Dinic/",[770,3.489]],["text/Graph/Dinic/",[2,0.745,7,0.504,8,0.621,9,0.808,10,0.437,11,0.422,12,0.334,13,0.84,14,0.28,15,0.459,21,0.32,22,1.407,30,0.406,31,0.47,32,0.504,33,0.504,34,0.54,38,1.893,53,0.577,54,0.577,55,0.577,56,0.597,57,0.597,58,0.597,59,0.597,60,0.597,61,0.597,62,0.617,63,0.617,64,0.637,65,0.637,66,0.637,67,0.637,68,0.637,104,0.702,145,3.154,150,1.893,160,2.201,166,1.731,170,2.649,173,2.908,214,0.749,215,0.749,216,1.61,217,0.68,222,0.702,225,1.185,226,1.38,243,1.802,246,0.826,248,0.826,254,1.204,258,0.68,259,0.68,260,0.68,261,0.68,262,0.68,263,0.68,264,0.68,265,0.68,266,0.658,267,0.68,268,0.68,269,0.68,270,0.702,271,0.702,272,0.702,273,0.702,274,0.702,276,1.236,277,1.409,278,1.645,280,2.331,286,2.159,288,3.21,291,0.725,293,2.052,294,0.725,295,0.725,296,0.725,297,0.725,298,0.725,299,0.749,307,1.236,310,0.774,311,0.8,312,0.8,313,0.8,314,0.8,315,1.236,316,1.277,317,0.853,318,0.853,326,2.649,327,3.063,333,1.787,337,2.67,346,0.882,347,0.882,348,0.882,349,0.882,350,0.882,351,0.911,352,0.911,353,0.911,354,0.942,355,0.942,358,2.024,361,1.538,364,2.9,367,0.974,368,0.974,369,0.942,370,0.974,371,0.974,372,0.974,373,0.974,402,1.008,403,1.043,404,1.043,405,1.008,406,1.008,407,1.043,408,1.08,409,1.08,410,1.08,411,1.08,412,1.119,413,1.119,414,1.119,415,1.119,416,1.16,417,1.16,418,1.16,419,1.16,420,1.802,421,1.204,422,1.204,423,1.204,424,1.25,425,1.409,426,1.409,427,1.409,440,1.25,447,1.352,483,1.893,559,1.612,561,1.694,562,1.612,769,3.018,770,3.24,771,2.351,772,2.351,773,2.165,774,2.165,775,4.845,776,5.643,777,4.663,778,5.459,779,3.883,780,3.24,781,3.24,782,3.24,783,3.24,784,3.24,785,3.883,786,2.675,787,3.883,788,5.543,789,3.518,790,3.883,791,4.663,792,3.883]],["title/Graph/EK/",[2,0.314,793,2.509]],["text/Graph/EK/",[2,0.745,7,0.527,8,0.647,9,0.835,10,0.458,11,0.441,12,0.349,13,0.859,14,0.293,15,0.475,21,0.335,22,1.349,30,0.425,31,0.492,32,0.527,33,0.527,34,0.565,53,0.604,54,0.604,55,0.604,56,0.624,57,0.624,58,0.624,59,0.624,60,0.624,61,0.624,62,0.645,63,0.645,64,0.667,65,0.667,66,0.667,67,0.667,68,0.667,104,0.735,145,3.063,150,1.981,160,2.277,161,2.496,166,1.754,170,2.649,173,2.957,214,0.784,215,0.784,216,1.607,217,0.712,222,0.735,225,1.197,226,1.34,243,1.864,246,0.864,248,0.864,254,1.26,258,0.712,259,0.712,260,0.712,261,0.712,262,0.712,263,0.712,264,0.712,265,0.712,266,0.689,267,0.712,268,0.712,269,0.712,270,0.735,271,0.735,272,0.735,273,0.735,274,0.735,276,0.864,277,1.475,278,1.522,282,3.989,286,1.26,288,3.283,291,0.759,293,0.864,294,0.759,295,0.759,296,0.759,297,0.759,298,0.759,299,0.784,307,1.279,310,0.81,311,0.837,312,0.837,313,1.238,314,1.238,315,0.864,316,0.893,317,0.893,318,0.893,322,3.347,326,2.67,327,3.132,333,1.87,337,2.763,346,0.923,347,0.923,348,0.923,349,0.923,350,0.923,351,0.954,352,0.954,353,0.954,354,0.986,355,0.986,358,2.094,361,1.61,364,3.14,367,1.02,368,1.02,369,0.986,370,1.02,371,1.02,372,1.02,373,1.02,402,1.055,403,1.092,404,1.092,405,1.055,406,1.055,407,1.092,408,1.13,409,1.13,410,1.13,411,1.13,412,1.171,413,1.171,414,1.171,415,1.171,416,1.214,417,1.214,418,1.214,419,1.214,420,1.26,421,1.26,422,1.26,423,1.26,424,1.308,440,1.308,447,1.415,483,1.981,559,1.687,561,1.773,562,1.687,769,3.716,771,2.46,772,2.46,773,2.265,774,2.265,775,4.705,776,5.64,778,5.345,779,3.989,780,3.352,781,3.352,782,3.352,783,3.352,784,3.352,785,3.989,786,2.767,787,5.097,789,3.639,790,3.989,792,3.989,793,3.122]],["title/Graph/ISAP/",[794,3.489]],["text/Graph/ISAP/",[2,0.746,7,0.439,8,0.689,9,0.615,10,0.381,11,0.367,12,0.291,13,0.782,14,0.543,15,0.349,21,0.279,22,1.382,30,0.354,31,0.409,32,0.439,33,0.439,34,0.47,38,1.649,53,0.503,54,0.503,55,0.503,56,0.52,57,0.52,58,0.52,59,0.52,60,0.52,61,0.68,62,0.537,63,0.537,64,0.555,65,0.555,66,0.555,67,0.726,68,0.555,104,0.612,145,3.22,150,1.649,160,1.982,166,1.681,170,2.594,173,2.756,180,1.27,192,0.719,212,0.395,213,0.571,214,0.653,215,0.653,216,1.598,217,0.592,219,1.105,222,0.801,225,1.25,226,1.274,243,1.622,246,0.719,248,0.719,251,1.456,254,1.049,256,1.149,258,0.592,259,0.592,260,0.592,261,0.592,262,0.592,263,0.592,264,0.592,265,0.592,266,0.573,267,0.592,268,0.592,269,0.592,270,0.612,271,0.612,272,0.612,273,0.612,274,0.612,276,0.719,277,1.228,278,1.599,280,2.141,281,3.874,282,3.276,285,1.111,286,1.622,288,3.234,291,0.37,293,2.116,294,0.632,295,0.632,296,0.632,297,0.632,298,0.632,299,0.653,301,0.751,307,1.361,310,0.674,311,0.696,312,0.696,313,0.696,314,0.696,315,0.719,316,0.743,317,0.973,318,0.973,326,2.644,327,2.977,333,1.557,337,2.592,346,1.005,347,1.005,348,1.005,349,1.005,350,1.005,351,0.794,352,0.794,353,0.794,354,0.821,355,0.821,358,2.712,361,1.34,364,3.049,367,0.849,368,0.849,369,0.821,370,0.849,371,0.849,372,0.849,373,0.849,381,2.287,382,0.69,388,1.622,402,0.878,403,0.909,404,0.909,405,0.878,406,0.878,407,0.909,408,0.941,409,0.941,410,0.941,411,0.941,412,0.975,413,0.975,414,0.975,415,0.975,416,1.011,417,1.011,418,1.011,419,1.011,420,1.622,421,1.049,422,1.372,423,1.049,424,1.089,425,1.228,426,1.228,427,1.228,428,1.281,440,1.089,475,4.986,483,0.966,500,1.34,501,1.34,502,1.34,503,1.34,504,1.34,505,1.34,506,1.34,507,1.34,508,1.34,509,1.34,510,0.785,511,0.785,512,0.785,513,0.785,514,0.785,515,0.785,516,0.785,517,0.785,518,0.785,519,0.785,520,0.785,521,0.785,522,0.823,523,0.823,524,0.823,525,0.823,526,0.823,527,0.823,528,0.865,529,0.912,530,0.966,531,0.966,532,0.966,533,0.966,534,0.966,535,0.966,536,0.966,537,0.966,538,0.966,539,1.029,540,1.029,541,1.029,559,1.404,561,1.476,562,1.404,657,1.327,663,1.029,757,1.2,758,1.2,769,1.757,771,1.2,772,2.048,773,1.105,774,1.105,775,4.591,776,5.28,777,4.822,778,5.134,779,4.015,780,2.917,781,4.015,782,1.886,783,1.886,784,1.886,785,4.191,786,2.408,787,4.342,788,5.214,789,3.168,790,3.568,792,3.276,794,2.917,795,6.315,796,1.105,797,1.2,798,1.519,799,1.519,800,1.519,801,5.764,802,4.505,803,1.519,804,4.907,805,1.327,806,1.327,807,1.327,808,1.327,809,1.327,810,1.327,811,1.327,812,1.327,813,1.327,814,1.327,815,1.327,816,1.327,817,1.327,818,1.327,819,1.327,820,4.012,821,1.519]],["title/Graph/KM%E7%AE%97%E6%B3%95/",[2,0.314,822,2.355]],["text/Graph/KM%E7%AE%97%E6%B3%95/",[2,0.746,7,0.586,8,0.711,9,0.903,10,0.509,11,0.491,12,0.558,13,0.705,14,0.326,15,0.357,21,0.372,22,1.415,23,2.371,30,0.473,31,0.547,32,0.586,33,0.586,34,0.628,53,0.672,54,0.672,55,0.672,56,0.694,57,0.694,58,0.694,59,0.694,60,0.694,61,0.694,62,0.717,63,0.717,64,0.741,65,0.741,66,0.741,67,0.741,68,0.741,104,0.817,212,1.516,214,0.872,215,0.872,216,1.592,217,0.791,222,0.817,225,1.248,226,1.031,251,2.69,257,1.64,258,0.791,259,0.791,260,0.791,261,0.791,262,0.791,263,0.791,264,0.791,265,0.791,266,0.766,267,0.791,268,0.791,269,0.791,270,0.817,271,0.817,272,0.817,273,0.817,274,0.817,276,0.961,280,2.545,285,1.908,289,2.843,290,2.74,291,1.214,293,1.618,294,0.844,295,0.844,296,0.844,297,0.844,298,0.844,299,0.872,304,1.876,307,0.961,310,0.901,311,1.338,312,1.338,313,0.93,314,0.93,315,0.961,316,0.993,317,0.993,318,0.993,326,2.381,334,2.948,346,1.026,347,1.026,348,1.026,349,1.026,350,1.026,351,1.061,352,1.061,353,1.061,354,1.096,355,1.096,364,2.952,367,1.134,368,1.134,369,1.096,370,1.134,371,1.134,372,1.134,373,1.134,377,1.876,378,1.876,380,1.972,402,1.173,462,2.08,822,3.167,823,2.736,824,7.245,825,7.245,826,6.326,827,7.032,828,6.754,829,7.245,830,3.465,831,3.465]],["title/Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/",[2,0.314,832,2.693]],["text/Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/",[2,0.746,7,0.448,8,0.638,9,0.626,10,0.389,11,0.375,12,0.387,13,0.824,14,0.325,15,0.419,21,0.371,22,1.357,30,0.471,31,0.417,32,0.448,33,0.448,34,0.479,38,0.988,53,0.513,54,0.513,55,0.513,56,0.53,57,0.53,58,0.53,59,0.53,60,0.53,61,0.692,62,0.548,63,0.548,64,0.566,65,0.566,66,0.566,67,0.566,68,0.566,104,0.624,141,0.885,145,3.012,150,1.681,160,2.012,161,2.205,166,1.512,170,2.592,173,2.943,180,0.492,192,1.252,212,0.404,213,0.584,214,0.666,215,0.666,216,1.547,217,0.604,218,0.842,219,1.13,221,1.053,222,0.624,225,1.24,226,0.946,243,1.647,244,2.756,246,0.431,248,0.431,254,2.994,258,0.604,259,0.604,260,0.604,261,0.604,262,0.604,263,0.604,264,0.604,265,0.604,266,0.585,267,0.604,268,0.604,269,0.604,270,0.624,271,0.624,272,0.624,273,0.624,274,0.624,276,0.734,277,1.252,278,1.47,282,3.612,286,1.069,288,3.263,291,0.379,294,0.644,295,0.644,296,0.644,297,0.644,298,0.644,299,0.666,301,1.307,307,1.548,310,0.688,311,0.71,312,0.71,313,0.71,314,0.71,315,0.734,316,0.758,317,0.758,318,0.758,321,3.364,326,2.634,327,2.883,333,2.072,337,2.878,346,0.783,347,0.783,348,0.783,349,0.783,350,0.783,351,1.057,352,1.057,353,1.057,354,1.092,355,1.092,358,2.819,361,1.366,364,3.109,367,1.13,368,0.866,369,0.837,370,0.866,371,0.866,372,0.866,373,0.866,381,2.313,388,2.256,402,0.895,403,0.927,404,0.927,405,0.895,406,0.895,407,0.927,408,0.96,409,0.96,410,0.96,411,0.96,412,0.994,413,0.994,414,0.994,415,0.994,416,1.031,417,1.031,418,1.031,419,1.031,420,1.396,421,1.069,422,1.069,423,1.069,424,1.11,425,1.252,426,1.252,427,1.252,428,1.307,432,3.093,434,2.725,440,1.449,447,1.568,448,0.988,483,0.988,495,4.465,500,1.366,501,1.366,502,1.366,503,1.366,504,1.366,505,1.366,506,1.366,507,1.366,508,1.366,509,1.366,510,1.366,511,1.366,512,1.366,513,1.366,514,1.366,515,1.366,516,1.366,517,1.366,518,1.366,519,1.366,520,1.366,521,1.366,522,1.432,523,1.432,524,1.432,525,1.432,526,0.842,527,0.842,528,0.885,529,0.933,559,0.842,561,0.885,562,1.869,663,1.053,666,2.088,747,2.309,757,1.227,758,1.227,769,1.791,773,1.13,774,1.923,775,4.057,776,4.73,778,5.262,779,4.381,780,2.962,781,1.923,782,1.923,783,1.923,784,1.923,785,3.32,787,4.978,790,3.612,791,3.987,792,2.51,793,1.791,796,1.13,805,1.357,806,1.357,807,1.357,808,1.357,809,1.357,810,1.357,811,1.357,812,1.357,813,1.357,814,1.357,815,1.357,816,1.357,817,1.357,818,1.357,819,1.357,832,1.923,833,1.555,834,1.555,835,7.501,836,2.645,837,1.555,838,6.365,839,4.968,840,5.3,841,1.357,842,1.555,843,1.555,844,1.555,845,2.645,846,2.645,847,5.3,848,1.555,849,1.555,850,1.227,851,1.555,852,1.555,853,1.555,854,2.645,855,1.555,856,1.555,857,2.645,858,2.645,859,1.555,860,2.645,861,2.645,862,1.555,863,1.555,864,4.073,865,4.073,866,2.645,867,2.645,868,2.645,869,2.645,870,2.645]],["title/Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/",[2,0.407]],["text/Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/",[2,0.745,7,0.714,8,0.709,9,1.035,10,0.619,11,0.597,12,0.64,13,0.809,14,0.397,15,0.434,21,0.453,22,1.434,23,2.12,30,0.575,31,0.902,32,0.714,33,0.714,34,0.764,53,0.817,54,0.817,55,0.817,56,0.845,57,0.845,58,0.845,59,0.845,60,0.845,61,0.845,62,0.873,63,0.873,64,0.902,65,0.902,66,0.902,67,0.902,68,0.902,104,0.995,166,1.692,211,2.943,212,1.485,214,1.061,215,1.061,216,1.591,217,0.963,222,0.995,225,1.208,226,1.183,243,2.31,254,1.705,258,0.963,259,0.963,260,0.963,261,0.963,262,0.963,263,0.963,264,0.963,265,0.963,266,0.932,267,0.963,268,0.963,269,0.963,270,0.995,271,0.995,272,0.995,273,0.995,274,0.995,277,1.995,278,1.585,288,3.508,289,2.62,290,2.525,291,1.579,292,1.995,293,2.189,294,1.027,295,1.027,296,1.027,297,1.027,298,1.027,303,2.53,304,2.283,310,1.096,322,3.78,326,2.193,377,2.283,378,2.283,382,1.915,680,6.064,826,6.682,871,4.216,872,6.479]],["title/Others/",[90,3.051]],["text/Others/",[]],["title/Others/Time/",[2,0.407]],["text/Others/Time/",[2,0.741,8,0.379,12,0.473,14,0.397,15,0.434,18,2.813,21,0.453,30,0.575,31,0.902,120,5.072,166,1.769,170,1.934,225,1.359,256,1.934,280,1.84,366,3.065,394,2.53,431,4.415,492,2.283,737,3.065,770,3.065,786,2.53,793,2.855,794,3.065,822,2.68,832,3.065,873,3.681,874,5.513,875,6.064,876,6.064,877,4.988,878,4.988,879,6.797,880,4.988,881,4.988,882,6.534,883,4.988,884,7.329,885,5.441,886,3.329,887,3.681,888,6.064,889,6.064,890,6.064,891,6.965,892,4.988,893,6.064,894,4.988,895,3.681,896,2.68,897,6.064]],["title/Others/Time/#1",[2,0.314,8,0.333]],["text/Others/Time/#1",[2,0.718,280,2.765,786,3.802,873,5.531,874,5.52,875,7.032,876,7.032]],["title/Others/Time/#2",[2,0.314,14,0.349]],["text/Others/Time/#2",[2,0.698,18,3.097,874,5.149,877,6.515,878,6.515,879,7.387,880,6.515,881,6.515]],["title/Others/Time/#3",[2,0.314,15,0.381]],["text/Others/Time/#3",[2,0.735,18,2.039,31,1.062,120,5.093,166,1.639,225,1.372,366,3.943,394,3.255,431,4.861,492,2.936,874,5.439,882,6.994,883,5.873,884,7.495,885,4.891,886,4.282,887,4.735,888,6.676]],["title/Others/Time/#4",[2,0.314,21,0.398]],["text/Others/Time/#4",[2,0.735,166,1.491,170,2.451,225,0.966,770,4.45,793,4.145,794,4.45,822,3.891,832,4.45,885,5.263,889,6.955,890,6.955,891,7.401,892,6.32,893,6.955,894,6.32,895,5.344]],["title/Others/Time/#5",[2,0.314,12,0.415]],["text/Others/Time/#5",[2,0.715,166,1.605,256,2.231,874,4.803,885,5.494,896,4.189,897,7.12]],["title/Others/Time/#6",[2,0.314,30,0.505]],["text/Others/Time/#6",[2,0.708,120,5.164,166,1.585,225,1.282,256,2.203,737,4.73,874,5.387]],["title/Others/exem/",[2,0.407]],["text/Others/exem/",[2,0.732,8,0.762,10,0.776,11,0.748,12,0.874,13,0.748,14,0.793,15,0.872,21,0.877,30,1.102,394,3.169,395,4.169,644,5.224,645,4.169,660,4.169,725,5.253,726,4.169,745,4.169,752,4.169,753,4.169,756,4.169,796,3.84,797,4.169,822,3.357,823,4.169,850,4.169,896,3.357,898,4.169,899,4.169,900,4.611,901,4.611,902,4.611,903,4.611,904,4.611,905,4.611,906,4.611,907,4.611,908,5.777,909,4.611,910,4.611,911,4.611,912,4.611,913,4.611,914,4.611,915,4.611,916,4.611,917,4.611,918,4.611,919,4.611,920,4.611,921,4.611,922,4.611,923,4.611,924,4.611,925,4.611,926,4.611,927,4.611,928,4.611,929,4.611,930,4.611,931,4.611,932,4.611,933,4.611,934,4.611,935,4.169,936,4.169,937,4.611]],["title/Others/exem/#_1",[2,0.407]],["text/Others/exem/#_1",[2,0.556,8,0.758,12,0.736,14,0.618,15,0.676,21,0.706,30,0.896,645,5.183,898,5.183,899,5.183,900,5.732,901,5.732,902,5.732,903,5.732]],["title/Others/exem/#_2",[2,0.407]],["text/Others/exem/#_2",[2,0.713,8,0.583,12,0.727,14,0.786,15,0.667,21,0.697,796,4.713,904,5.66,905,5.66,906,5.66,907,5.66,908,6.536,909,5.66,910,5.66,911,5.66]],["title/Others/exem/#_3",[2,0.407]],["text/Others/exem/#_3",[2,0.691,8,0.655,10,0.908,11,0.876,12,0.693,13,0.876,14,0.686,15,0.877,21,0.665,30,0.994,394,3.711,395,4.882,644,5.749,660,4.882,725,5.628,912,5.399,913,5.399,914,5.399,915,5.399,916,5.399,917,5.399,918,5.399,919,5.399,920,5.399,921,5.399,922,5.399,923,5.399,924,5.399,925,5.399,926,5.399,927,5.399,928,5.399,929,5.399,930,5.399]],["title/Others/exem/#_4",[2,0.407]],["text/Others/exem/#_4",[2,0.639,8,0.713,14,0.71,15,0.676,21,0.875,797,5.183,822,4.173,823,5.183,850,5.183,931,5.732,932,5.732,933,5.732,934,5.732]],["title/Others/exem/#_5",[2,0.407]],["text/Others/exem/#_5",[8,0.604,12,0.857,14,0.633,896,4.274,935,5.308,936,5.308]],["title/Others/exem/#_6",[2,0.407]],["text/Others/exem/#_6",[8,0.597,14,0.625,15,0.683,21,0.713,30,1.115,726,5.24,745,5.24,752,5.24,753,5.24,756,5.24,937,5.795]],["title/Search/",[90,3.051]],["text/Search/",[]],["title/Search/BFS/",[2,0.407]],["text/Search/BFS/",[2,0.742,7,1.147,8,0.609,9,0.995,10,0.806,11,0.777,12,0.615,13,0.777,14,0.517,15,0.698,21,0.59,30,0.749,31,0.866,32,0.929,33,0.929,34,0.995,53,1.064,54,1.064,55,1.064,56,1.1,57,1.1,58,1.1,59,1.1,60,1.1,61,1.1,80,3.717,160,2.712,173,3.553,216,1.488,225,0.866,226,1.403,246,1.523,248,1.523,289,2.219,290,2.139,307,1.523,322,3.793,337,2.886,364,3.087,400,4.979,447,2.493,559,2.972,561,3.124,562,3.67,734,4.928,736,4.928,786,4.413,938,5.489]],["title/Search/DFS/",[2,0.407]],["text/Search/DFS/",[2,0.745,7,0.859,8,0.714,9,0.645,10,0.523,11,0.504,12,0.399,13,0.504,14,0.478,15,0.366,21,0.545,22,1.445,23,1.661,30,0.485,31,0.934,32,0.602,33,0.602,34,0.645,53,0.689,54,0.689,55,0.689,56,0.713,57,0.713,58,0.713,59,0.713,60,0.713,61,0.713,62,0.737,63,0.737,64,0.761,65,0.761,66,0.761,67,0.761,68,0.761,106,2.808,166,1.572,173,2.816,180,1.606,212,1.319,216,1.585,217,0.812,222,1.396,225,1.263,226,1.225,239,4.672,246,0.987,248,0.987,251,2.649,255,3.762,258,0.812,259,0.812,260,0.812,261,0.812,262,0.812,263,0.812,264,0.812,265,0.812,266,0.786,267,0.812,268,0.812,269,0.812,270,0.839,271,0.839,272,0.839,273,0.839,274,0.839,276,0.987,280,3.096,289,1.438,290,1.386,291,1.572,293,1.79,294,0.867,295,0.867,296,0.867,297,0.867,298,0.867,299,0.895,310,1.319,311,0.955,312,0.955,313,0.955,314,0.955,315,0.987,316,1.019,317,1.019,318,1.019,322,3.688,334,2.215,337,1.908,346,1.053,347,1.053,348,1.053,349,1.053,350,1.053,351,1.089,352,1.089,353,1.089,364,2.484,381,1.552,400,4.37,435,2.888,447,2.305,462,3.046,667,5.428,668,5.428,734,4.302,736,4.961,886,2.808,898,4.007,899,4.007,939,3.557,940,2.808,941,3.106,942,5.601,943,4.431,944,3.557,945,4.431,946,2.586,947,5.634,948,3.557]],["title/Search/DeSearch/",[2,0.407]],["text/Search/DeSearch/",[2,0.728,7,1.101,8,0.585,14,0.613,166,1.585,225,1.027,266,1.438,301,3.214,949,7.501,950,7.501,951,7.501]],["title/Search/Memory_Search/",[2,0.407]],["text/Search/Memory_Search/",[2,0.712,7,1.136,8,0.603]],["title/Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/",[2,0.407]],["text/Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/",[0,1.446,2,0.746,7,0.612,8,0.71,9,0.506,10,0.933,11,0.846,12,0.405,13,0.601,14,0.598,15,0.781,21,0.587,22,1.525,23,2.626,30,0.493,31,0.811,32,0.612,33,0.612,34,0.506,53,0.541,54,0.701,55,0.541,56,0.559,57,0.559,58,0.559,59,0.559,60,0.559,61,0.559,62,0.578,63,0.578,64,0.597,65,0.597,66,0.597,67,0.597,68,0.597,80,1.122,87,1.868,104,0.658,111,2.855,141,0.943,160,1.379,170,2.247,173,2.241,180,1.729,192,1.321,212,1.65,214,0.702,215,0.702,216,1.565,217,0.637,221,1.122,222,0.853,225,0.44,226,1.399,245,1.786,246,0.774,248,0.774,249,1.958,251,2.303,256,2.022,257,1.321,258,0.637,259,0.637,260,0.637,261,0.637,262,0.637,263,0.637,264,0.637,265,0.637,266,0.617,267,0.637,268,0.637,269,0.637,270,0.658,271,0.658,272,0.658,273,0.658,274,0.658,276,0.774,278,1.314,280,1.578,285,2.381,286,2.209,288,1.958,289,0.67,290,0.645,291,0.404,293,1.177,294,0.68,295,0.68,296,0.68,297,0.68,298,0.68,299,0.702,302,1.308,307,0.774,310,0.725,311,0.749,312,0.749,313,0.749,314,0.749,315,0.774,316,0.8,317,0.8,318,0.8,321,4.65,322,2.097,326,2.149,330,5.542,334,2.896,337,2.919,346,0.827,347,0.827,348,0.827,349,0.827,350,0.827,351,0.854,352,0.854,353,0.854,354,0.883,355,0.883,358,1.267,361,0.856,367,0.913,368,0.913,369,0.883,370,0.913,371,0.913,372,0.913,373,0.913,376,1.053,377,0.897,378,0.897,379,0.994,380,0.943,381,0.723,385,1.172,388,1.128,394,3.444,402,0.945,403,0.978,404,0.978,405,0.945,406,0.945,407,0.978,408,1.013,409,1.013,410,1.013,411,1.013,412,1.049,413,1.049,414,1.049,415,1.049,416,1.088,417,1.088,418,1.088,419,1.088,420,1.128,421,1.128,422,1.128,423,1.128,424,1.172,425,1.712,426,1.321,427,1.321,428,1.379,433,3.157,435,2.696,440,0.695,441,3.086,447,1.642,448,1.053,462,0.994,484,1.053,500,1.442,501,1.442,502,1.442,503,1.442,504,1.442,505,1.442,506,1.442,507,1.442,508,1.442,509,1.442,510,1.442,511,1.442,512,1.442,513,1.442,514,1.442,515,1.442,516,1.442,517,1.442,518,1.442,519,1.442,520,1.442,521,0.856,551,2.629,559,0.897,562,0.897,619,3.74,667,4.172,668,4.172,725,1.204,734,2.629,736,2.629,749,2.437,786,1.675,841,1.446,940,1.308,941,5.01,943,2.437,945,2.437,946,1.204,952,1.656,953,1.656,954,1.656,955,1.656,956,2.791,957,4.738,958,4.738,959,3.616,960,3.616,961,4.244,962,5.136,963,1.656,964,4.244,965,4.244,966,3.616,967,4.244,968,1.656,969,1.446,970,1.656,971,1.656,972,2.791,973,1.656,974,3.616,975,4.738,976,4.77,977,4.738,978,2.791,979,2.791]],["title/Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/",[2,0.407]],["text/Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/",[2,0.746,7,0.699,8,0.677,9,0.488,10,0.395,11,0.381,12,0.463,13,0.381,14,0.253,15,0.517,21,0.849,22,1.503,23,2.097,30,0.563,31,0.793,32,0.699,33,0.456,34,0.488,53,0.522,54,0.522,55,0.522,56,0.539,57,0.539,58,0.539,59,0.539,60,0.539,61,0.539,62,0.557,63,0.557,64,0.576,65,0.576,66,0.576,67,0.576,68,0.576,104,0.635,180,1.306,192,1.274,211,2.558,212,1.306,214,0.677,215,0.677,216,1.561,217,0.615,222,1.185,225,0.793,226,1.518,246,0.747,248,0.747,249,3.049,251,2.97,257,2.665,258,0.615,259,0.615,260,0.615,261,0.615,262,0.615,263,0.615,264,0.615,265,0.615,266,0.595,267,0.615,268,0.615,269,0.615,270,0.635,271,0.635,272,0.635,273,0.635,274,0.635,276,0.747,286,1.088,291,1.006,294,0.656,295,0.656,296,0.656,297,0.656,298,0.656,299,0.677,310,0.7,311,0.723,312,0.723,313,0.723,314,0.723,315,0.747,316,0.771,317,0.771,318,0.771,337,1.012,346,0.797,347,0.797,348,0.797,349,0.797,350,0.797,351,0.824,352,0.824,353,0.824,354,0.852,355,0.852,361,2.594,367,0.881,368,0.881,369,0.852,370,0.881,371,0.881,372,0.881,373,0.881,380,1.532,400,4.781,402,0.911,403,0.943,404,0.943,405,0.911,406,0.911,407,0.943,408,0.977,409,0.977,410,0.977,411,0.977,412,1.012,413,1.012,414,1.012,415,1.012,416,1.049,417,1.049,418,1.049,419,1.049,420,1.088,421,1.088,422,1.088,423,1.088,424,1.13,425,1.274,426,1.274,427,1.274,428,1.33,435,2.349,450,4.075,462,1.615,500,1.39,501,1.39,502,1.39,503,1.39,504,1.39,505,1.39,506,1.39,507,1.39,508,1.39,509,1.39,510,1.39,511,1.39,512,1.39,513,1.39,514,1.39,515,1.39,516,1.39,517,1.39,518,1.39,519,1.39,520,1.39,521,1.39,522,1.457,523,1.457,524,1.457,525,1.457,526,1.457,527,1.457,667,3.651,668,3.651,724,5.06,768,5.596,940,2.125,947,5.826,969,2.35,976,5.596,980,2.692,981,7.33,982,2.692,983,5.022,984,6.673,985,6.673,986,5.632,987,5.632,988,7.206,989,5.632,990,2.692,991,2.692,992,4.128,993,2.692]],["title/String/",[90,3.051]],["text/String/",[]],["title/String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/",[896,3.051]],["text/String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/",[2,0.745,7,0.563,8,0.512,9,0.876,10,0.488,11,0.471,12,0.542,13,0.471,14,0.313,15,0.342,21,0.357,22,1.494,30,0.454,31,0.525,32,0.563,33,0.563,34,0.603,53,0.644,54,0.644,55,0.644,56,0.666,57,0.666,58,0.666,59,0.666,60,0.666,61,0.666,62,0.688,63,1.001,64,0.711,65,0.711,66,0.711,67,0.711,68,0.711,78,2.388,80,2.252,104,0.784,160,2.388,173,3.026,180,1.052,183,2.498,211,3.149,212,0.864,213,1.25,214,0.837,215,0.837,216,1.601,217,0.759,222,0.784,225,1.049,226,0.688,245,3.283,246,0.922,248,0.922,251,2.596,255,3.976,258,0.759,259,0.759,260,0.759,261,0.759,262,0.759,263,0.759,264,0.759,265,0.759,266,0.735,267,0.759,268,0.759,269,0.759,270,0.784,271,0.784,272,0.784,273,0.784,274,0.784,276,0.922,278,1.341,285,1.864,289,1.955,290,1.884,291,1.524,293,1.58,294,0.81,295,0.81,296,0.81,297,0.81,298,0.81,299,0.837,307,1.58,310,0.864,311,0.893,312,0.893,313,0.893,314,0.893,315,0.922,316,0.953,317,0.953,318,0.953,322,3.535,337,1.817,346,0.985,347,0.985,348,0.985,349,0.985,350,0.985,351,1.018,352,1.018,353,1.018,354,1.052,355,1.052,364,2.392,367,1.088,368,1.088,369,1.052,370,1.582,371,1.582,372,1.088,373,1.088,397,2.751,402,1.126,403,1.165,404,1.165,405,1.126,406,1.126,407,1.165,408,1.206,409,1.206,410,1.206,411,1.206,412,1.25,413,1.25,414,1.25,415,1.25,416,1.296,417,1.296,418,1.296,419,1.296,430,6.369,435,3.242,559,1.8,561,1.892,562,1.8,663,2.252,896,4.224,936,2.625,942,6.073,946,3.515,994,5.461,995,4.835,996,7.004,997,6.933,998,4.974,999,4.221]],["title/String/%E5%AD%97%E5%85%B8%E6%A0%91/",[2,0.407]],["text/String/%E5%AD%97%E5%85%B8%E6%A0%91/",[2,0.744,7,0.711,8,0.378,9,1.033,10,0.617,11,0.595,12,0.639,13,0.807,14,0.396,15,0.433,21,0.452,22,1.458,30,0.573,31,0.663,32,0.711,33,0.711,34,0.761,53,0.814,54,0.814,55,0.814,56,0.842,57,0.842,58,0.842,59,0.842,60,0.842,61,0.842,62,0.87,63,1.18,64,0.899,65,0.899,66,0.899,67,0.899,68,0.899,78,2.075,104,0.991,180,1.33,211,3.472,212,1.092,213,1.579,214,1.057,215,1.057,216,1.59,217,0.959,221,2.845,226,1.18,245,3.581,246,1.165,248,1.165,255,4.409,258,0.959,259,0.959,260,0.959,261,0.959,262,0.959,263,0.959,264,0.959,265,0.959,266,0.929,267,0.959,268,0.959,269,0.959,270,0.991,271,0.991,272,0.991,273,0.991,274,0.991,278,1.581,289,2.304,290,2.221,291,1.024,294,1.024,295,1.024,296,1.024,297,1.024,298,1.024,299,1.057,307,1.581,310,1.092,311,1.128,312,1.128,313,1.128,314,1.128,315,1.165,322,3.581,337,1.579,369,1.33,397,3.243,430,6.352,435,3.681,663,2.845,935,3.317,942,6.401,946,4.702,994,4.976,996,6.961,998,5.647,999,4.976,1000,4.201,1001,6.468,1002,4.201,1003,4.201,1004,4.201]]],"fields":["title","text"],"invertedIndex":[["",{"_index":2,"text":{"":{},"#_1":{},"#_2":{},"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/Time/#1":{},"Others/Time/#2":{},"Others/Time/#3":{},"Others/Time/#4":{},"Others/Time/#5":{},"Others/Time/#6":{},"Others/exem/":{},"Others/exem/#_1":{},"Others/exem/#_2":{},"Others/exem/#_3":{},"Others/exem/#_4":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"Search/DeSearch/":{},"Search/Memory_Search/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_1":{},"faq/#_2":{},"faq/#_4":{},"faq/#_5":{},"faq/#git":{},"faq/#mkdocs":{},"home/":{},"home/#_1":{},"home/#_2":{},"home/#_3":{}},"title":{"#_1":{},"#_2":{},"#hrbust_acms-wiki":{},"#lets-go":{},"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/EK/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/Time/#1":{},"Others/Time/#2":{},"Others/Time/#3":{},"Others/Time/#4":{},"Others/Time/#5":{},"Others/Time/#6":{},"Others/exem/":{},"Others/exem/#_1":{},"Others/exem/#_2":{},"Others/exem/#_3":{},"Others/exem/#_4":{},"Others/exem/#_5":{},"Others/exem/#_6":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"Search/DeSearch/":{},"Search/Memory_Search/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"faq/":{},"faq/#_1":{},"faq/#_2":{},"faq/#_3":{},"faq/#_4":{},"faq/#_5":{},"home/#_1":{},"home/#_2":{},"home/#_3":{}}}],["0",{"_index":22,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_1":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{}}],["0/1",{"_index":662,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{}},"title":{}}],["0ll",{"_index":840,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["0x3f3f3f3f",{"_index":359,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/RMQ/":{}},"title":{}}],["1",{"_index":8,"text":{"":{},"#_1":{},"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/exem/":{},"Others/exem/#_1":{},"Others/exem/#_2":{},"Others/exem/#_3":{},"Others/exem/#_4":{},"Others/exem/#_5":{},"Others/exem/#_6":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"Search/DeSearch/":{},"Search/Memory_Search/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_1":{},"faq/#_2":{},"faq/#git":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot_1":{},"Others/Time/#1":{}}}],["1)\uff0ctoday",{"_index":803,"text":{"Graph/ISAP/":{}},"title":{}}],["1,3,4",{"_index":799,"text":{"Graph/ISAP/":{}},"title":{}}],["10",{"_index":31,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/Time/#3":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_2":{},"faq/#git":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{}}],["100",{"_index":420,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["1001",{"_index":481,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{}},"title":{}}],["1005",{"_index":302,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["101",{"_index":421,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["1010",{"_index":479,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{}},"title":{}}],["102",{"_index":422,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["103",{"_index":423,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["104",{"_index":424,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["105",{"_index":425,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["106",{"_index":426,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["107",{"_index":427,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["1077",{"_index":952,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["108",{"_index":428,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["109",{"_index":500,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["10f",{"_index":309,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{}},"title":{}}],["11",{"_index":32,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_2":{},"faq/#git":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{}}],["110",{"_index":501,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["111",{"_index":502,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["112",{"_index":503,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["113",{"_index":504,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["114",{"_index":505,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["115",{"_index":506,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["116",{"_index":507,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["117",{"_index":508,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["118",{"_index":509,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["119",{"_index":510,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["12",{"_index":33,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_2":{},"faq/#git":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{}}],["120",{"_index":511,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["121",{"_index":512,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["122",{"_index":513,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["123",{"_index":514,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["12345678x",{"_index":963,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["124",{"_index":515,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["125",{"_index":516,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["126",{"_index":517,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["127",{"_index":192,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"faq/":{},"faq/#mkdocs":{}},"title":{}}],["128",{"_index":518,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["129",{"_index":519,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["13",{"_index":34,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_2":{},"faq/#git":{},"faq/#mkdocs":{}},"title":{}}],["130",{"_index":520,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["131",{"_index":521,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["132",{"_index":522,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["133",{"_index":523,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["134",{"_index":524,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["134134134",{"_index":800,"text":{"Graph/ISAP/":{}},"title":{}}],["135",{"_index":525,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["136",{"_index":526,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["137",{"_index":527,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["138",{"_index":528,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["139",{"_index":529,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["14",{"_index":53,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["140",{"_index":530,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{}},"title":{}}],["141",{"_index":531,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{}},"title":{}}],["142",{"_index":532,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{}},"title":{}}],["143",{"_index":533,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{}},"title":{}}],["144",{"_index":534,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{}},"title":{}}],["145",{"_index":535,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{}},"title":{}}],["146",{"_index":536,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{}},"title":{}}],["147",{"_index":537,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{}},"title":{}}],["148",{"_index":538,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{}},"title":{}}],["1486176948",{"_index":240,"text":{"home/":{},"home/#_3":{}},"title":{}}],["149",{"_index":539,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{}},"title":{}}],["15",{"_index":54,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["150",{"_index":540,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{}},"title":{}}],["151",{"_index":541,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{}},"title":{}}],["152",{"_index":542,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["153",{"_index":543,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["154",{"_index":544,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["155",{"_index":545,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["156",{"_index":546,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["157",{"_index":547,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["158",{"_index":548,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["159",{"_index":574,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["16",{"_index":7,"text":{"":{},"#_1":{},"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"Search/DeSearch/":{},"Search/Memory_Search/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["160",{"_index":575,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["161",{"_index":576,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["162",{"_index":577,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["163",{"_index":578,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["164",{"_index":579,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["165",{"_index":580,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["1655\uff0cpoj",{"_index":924,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["166",{"_index":581,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["167",{"_index":582,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["168",{"_index":583,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["169",{"_index":584,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["17",{"_index":55,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["170",{"_index":585,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["171",{"_index":586,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["172",{"_index":587,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["173",{"_index":588,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["174",{"_index":589,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["1741\uff0chdu",{"_index":926,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["1743",{"_index":899,"text":{"Others/exem/":{},"Others/exem/#_1":{},"Search/DFS/":{}},"title":{}}],["175",{"_index":590,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["176",{"_index":591,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["177",{"_index":592,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["178",{"_index":593,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["179",{"_index":594,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["18",{"_index":9,"text":{"":{},"#_1":{},"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["180",{"_index":595,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{}},"title":{}}],["181",{"_index":596,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["182",{"_index":597,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["183",{"_index":598,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["184",{"_index":599,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["185",{"_index":600,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["186",{"_index":601,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["187",{"_index":602,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["188",{"_index":603,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["189",{"_index":604,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["19",{"_index":56,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["190",{"_index":605,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["191",{"_index":606,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["1912",{"_index":726,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Others/exem/":{},"Others/exem/#_6":{}},"title":{}}],["192",{"_index":607,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["193",{"_index":608,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["194",{"_index":609,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["195",{"_index":610,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["196",{"_index":611,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["197",{"_index":612,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["198",{"_index":613,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["1987",{"_index":930,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["199",{"_index":614,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["1:8000",{"_index":193,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["1e",{"_index":760,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["1e16",{"_index":863,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["1e18",{"_index":834,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["1e5",{"_index":382,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/ISAP/":{}},"title":{}}],["1e6",{"_index":663,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["1e7",{"_index":556,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{}},"title":{}}],["1e9",{"_index":304,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{}},"title":{}}],["2",{"_index":14,"text":{"":{},"#_1":{},"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/exem/":{},"Others/exem/#_1":{},"Others/exem/#_2":{},"Others/exem/#_3":{},"Others/exem/#_4":{},"Others/exem/#_5":{},"Others/exem/#_6":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"Search/DeSearch/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_1":{},"faq/#_2":{},"faq/#git":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1":{},"Others/Time/#2":{}}}],["20",{"_index":57,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["200",{"_index":615,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["201",{"_index":616,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["202",{"_index":677,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["20200501",{"_index":17,"text":{"":{},"#_2":{}},"title":{}}],["20200515",{"_index":16,"text":{"":{},"#_2":{}},"title":{}}],["203",{"_index":678,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["2038",{"_index":660,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["204",{"_index":679,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["205",{"_index":680,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{}},"title":{}}],["206",{"_index":681,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["207",{"_index":682,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["208",{"_index":683,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["209",{"_index":684,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["21",{"_index":58,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["210",{"_index":685,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["211",{"_index":686,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["2114\uff0cpoj",{"_index":925,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["212",{"_index":687,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["213",{"_index":688,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["214",{"_index":689,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["215",{"_index":690,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["2152\uff0chdu",{"_index":928,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["2157",{"_index":921,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["216",{"_index":691,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["217",{"_index":692,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["218",{"_index":693,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["219",{"_index":694,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["22",{"_index":59,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["220",{"_index":439,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["221",{"_index":695,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["222",{"_index":696,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["223",{"_index":697,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["224",{"_index":698,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["2243",{"_index":919,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["225",{"_index":699,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["226",{"_index":700,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["227",{"_index":701,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["228",{"_index":702,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["229",{"_index":703,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["23",{"_index":60,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["230",{"_index":704,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["231",{"_index":705,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["232",{"_index":706,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["233",{"_index":707,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["234",{"_index":708,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["235",{"_index":709,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["236",{"_index":710,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["237",{"_index":711,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["238",{"_index":712,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["239",{"_index":713,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["24",{"_index":61,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["240",{"_index":714,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["241",{"_index":715,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["242",{"_index":716,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["243",{"_index":717,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["25",{"_index":62,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["26",{"_index":63,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["2612",{"_index":900,"text":{"Others/exem/":{},"Others/exem/#_1":{}},"title":{}}],["27",{"_index":64,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["28",{"_index":65,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["29",{"_index":66,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["2^n",{"_index":949,"text":{"Search/DeSearch/":{}},"title":{}}],["2^{(n/2",{"_index":950,"text":{"Search/DeSearch/":{}},"title":{}}],["2^{20",{"_index":951,"text":{"Search/DeSearch/":{}},"title":{}}],["2e4",{"_index":773,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["2e5",{"_index":774,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["2e6",{"_index":357,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{}},"title":{}}],["2e9",{"_index":772,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{}},"title":{}}],["2lf",{"_index":469,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["3",{"_index":15,"text":{"":{},"#_1":{},"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/exem/":{},"Others/exem/#_1":{},"Others/exem/#_2":{},"Others/exem/#_3":{},"Others/exem/#_4":{},"Others/exem/#_6":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_1":{},"faq/#_2":{},"faq/#git":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{},"Others/Time/#3":{}}}],["3*3",{"_index":953,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["30",{"_index":67,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["303",{"_index":825,"text":{"Graph/KM%E7%AE%97%E6%B3%95/":{}},"title":{}}],["31",{"_index":68,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["32",{"_index":258,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["33",{"_index":259,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["34",{"_index":260,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["3468",{"_index":922,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["35",{"_index":261,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["3531\uff0chysbz",{"_index":918,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["36",{"_index":262,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["362885",{"_index":955,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["37",{"_index":263,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["38",{"_index":264,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["39",{"_index":265,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["3911",{"_index":646,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{}},"title":{}}],["4",{"_index":21,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/exem/":{},"Others/exem/#_1":{},"Others/exem/#_2":{},"Others/exem/#_3":{},"Others/exem/#_4":{},"Others/exem/#_6":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_1":{},"faq/#_2":{},"faq/#_5":{},"faq/#git":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz_1":{},"Others/Time/#4":{}}}],["40",{"_index":266,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"Search/DeSearch/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["40000",{"_index":970,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["41",{"_index":267,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["4196\uff0chysbz",{"_index":917,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["42",{"_index":268,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["43",{"_index":269,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["44",{"_index":270,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["45",{"_index":271,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["46",{"_index":272,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["47",{"_index":273,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["48",{"_index":274,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["4812\uff0chysbz",{"_index":927,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["49",{"_index":294,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["4f",{"_index":345,"text":{"DP/%E6%A6%82%E7%8E%87DP/":{}},"title":{}}],["4n",{"_index":887,"text":{"Others/Time/":{},"Others/Time/#3":{}},"title":{}}],["5",{"_index":12,"text":{"":{},"#_1":{},"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/exem/":{},"Others/exem/#_1":{},"Others/exem/#_2":{},"Others/exem/#_3":{},"Others/exem/#_5":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_2":{},"faq/#git":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Others/Time/#5":{}}}],["50",{"_index":295,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["51",{"_index":296,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["52",{"_index":297,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["53",{"_index":298,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["54",{"_index":299,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["5418",{"_index":905,"text":{"Others/exem/":{},"Others/exem/#_2":{}},"title":{}}],["55",{"_index":310,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["56",{"_index":311,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["57",{"_index":312,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["58",{"_index":313,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["59",{"_index":314,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["5977",{"_index":929,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["5e5",{"_index":472,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{}},"title":{}}],["6",{"_index":30,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/exem/":{},"Others/exem/#_1":{},"Others/exem/#_3":{},"Others/exem/#_6":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_2":{},"faq/#git":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{"Others/Time/#6":{}}}],["60",{"_index":315,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["6008",{"_index":850,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/exem/":{},"Others/exem/#_4":{}},"title":{}}],["6015",{"_index":797,"text":{"Graph/ISAP/":{},"Others/exem/":{},"Others/exem/#_4":{}},"title":{}}],["61",{"_index":316,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["62",{"_index":276,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["63",{"_index":317,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["64",{"_index":318,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["65",{"_index":346,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["66",{"_index":347,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["67",{"_index":348,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["68",{"_index":349,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["69",{"_index":350,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["6f",{"_index":751,"text":{"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{}},"title":{}}],["7",{"_index":13,"text":{"":{},"#_1":{},"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/exem/":{},"Others/exem/#_3":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_1":{},"faq/#_2":{},"faq/#git":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{}}],["70",{"_index":351,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["71",{"_index":352,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["72",{"_index":353,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["73",{"_index":354,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["74",{"_index":355,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["75",{"_index":367,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["76",{"_index":368,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["77",{"_index":369,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["78",{"_index":370,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["79",{"_index":371,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["8",{"_index":11,"text":{"":{},"#_1":{},"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/exem/":{},"Others/exem/#_3":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_1":{},"faq/#_2":{},"faq/#git":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{}}],["80",{"_index":372,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["81",{"_index":373,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["82",{"_index":402,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["83",{"_index":403,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["84",{"_index":404,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["85",{"_index":405,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["86",{"_index":406,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["87",{"_index":407,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["88",{"_index":408,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["89",{"_index":409,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["9",{"_index":10,"text":{"":{},"#_1":{},"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/exem/":{},"Others/exem/#_3":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#_2":{},"faq/#git":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{}}],["90",{"_index":410,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["91",{"_index":411,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["92",{"_index":412,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["93",{"_index":413,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["94",{"_index":414,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["95",{"_index":415,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["96",{"_index":416,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["97",{"_index":417,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["98",{"_index":418,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["99",{"_index":419,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["99991",{"_index":383,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/RMQ/":{}},"title":{}}],["_cost",{"_index":868,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["_m",{"_index":782,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["_n",{"_index":781,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["_nex",{"_index":869,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["_s",{"_index":783,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["_static",{"_index":37,"text":{"faq/":{},"faq/#_2":{}},"title":{}}],["_t",{"_index":784,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["_to",{"_index":866,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["_w",{"_index":867,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["a/b",{"_index":661,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{}},"title":{}}],["a1",{"_index":979,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["a_star",{"_index":967,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["ab",{"_index":962,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["ac",{"_index":896,"text":{"Others/Time/":{},"Others/Time/#5":{},"Others/exem/":{},"Others/exem/#_5":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}}}],["ac/problems/tag/104",{"_index":909,"text":{"Others/exem/":{},"Others/exem/#_2":{}},"title":{}}],["ac_automaton",{"_index":995,"text":{"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["add",{"_index":87,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"faq/":{},"faq/#git":{}},"title":{}}],["addedg",{"_index":779,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["af",{"_index":733,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{}},"title":{}}],["aizu",{"_index":752,"text":{"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Others/exem/":{},"Others/exem/#_6":{}},"title":{}}],["algorithm",{"_index":380,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["along",{"_index":163,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["alpha",{"_index":988,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["alphat",{"_index":980,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["amn",{"_index":549,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{}},"title":{}}],["an",{"_index":285,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["ang",{"_index":728,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{}},"title":{}}],["anoth",{"_index":142,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["ansi",{"_index":671,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{}},"title":{}}],["ansx",{"_index":670,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{}},"title":{}}],["area",{"_index":70,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"faq/":{},"faq/#git":{}},"title":{}}],["ask",{"_index":433,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["associ",{"_index":164,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["astar",{"_index":956,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["atan2",{"_index":729,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{}},"title":{}}],["auto",{"_index":220,"text":{"home/":{},"home/#_2":{}},"title":{}}],["ay",{"_index":563,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{}},"title":{}}],["b",{"_index":301,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/DeSearch/":{}},"title":{}}],["bad",{"_index":744,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{}},"title":{}}],["base",{"_index":38,"text":{"Graph/Dinic/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"faq/":{},"faq/#_2":{},"faq/#git":{}},"title":{}}],["beta",{"_index":981,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["between",{"_index":113,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["bf",{"_index":786,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Others/Time/":{},"Others/Time/#1":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/BFS/":{}},"title":{}}],["binari",{"_index":105,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["bisect",{"_index":103,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["bit",{"_index":957,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["bitre",{"_index":473,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{}},"title":{}}],["bitree_2",{"_index":480,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{}},"title":{}}],["bits/stdc",{"_index":213,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"home/":{},"home/#_2":{}},"title":{}}],["bk",{"_index":560,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{}},"title":{}}],["block",{"_index":429,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{}},"title":{}}],["blog",{"_index":235,"text":{"home/":{},"home/#_2":{}},"title":{}}],["blog_typ",{"_index":231,"text":{"home/":{},"home/#_2":{}},"title":{}}],["blog_type_pk",{"_index":229,"text":{"home/":{},"home/#_2":{}},"title":{}}],["blogs_with_typ",{"_index":228,"text":{"home/":{},"home/#_2":{}},"title":{}}],["blogtyp",{"_index":233,"text":{"home/":{},"home/#_2":{}},"title":{}}],["bool",{"_index":447,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/BFS/":{},"Search/DFS/":{}},"title":{}}],["branch",{"_index":129,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["break",{"_index":462,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{}},"title":{}}],["buff",{"_index":818,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["bug",{"_index":110,"text":{"DP/%E6%A6%82%E7%8E%87DP/":{},"faq/":{},"faq/#git":{}},"title":{}}],["bug,j",{"_index":339,"text":{"DP/%E6%A6%82%E7%8E%87DP/":{}},"title":{}}],["build",{"_index":183,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#mkdocs":{}},"title":{}}],["buildgraph",{"_index":780,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["build\u547d\u4ee4\u540e\u751f\u6210\u7684\u9759\u6001\u6587\u4ef6\uff0c\u7531html",{"_index":44,"text":{"faq/":{},"faq/#_2":{}},"title":{}}],["builtin",{"_index":189,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["bzoj",{"_index":659,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{}},"title":{}}],["c",{"_index":211,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"home/":{},"home/#_2":{}},"title":{}}],["ca",{"_index":482,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{}},"title":{}}],["caldi",{"_index":492,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Others/Time/":{},"Others/Time/#3":{}},"title":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1":{}}}],["caldis(int",{"_index":493,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1":{}},"title":{}}],["calsiz",{"_index":555,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{}},"title":{}}],["cantor",{"_index":961,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["cap",{"_index":776,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["case",{"_index":466,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["cd",{"_index":558,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{}},"title":{}}],["cf148d",{"_index":300,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{}},"title":{}}],["cgl_4_b",{"_index":753,"text":{"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Others/exem/":{},"Others/exem/#_6":{}},"title":{}}],["ch_size",{"_index":994,"text":{"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["chang",{"_index":85,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"faq/":{},"faq/#git":{}},"title":{}}],["char",{"_index":435,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["cin",{"_index":1002,"text":{"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{}},"title":{}}],["class",{"_index":246,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["clone",{"_index":74,"text":{"faq/":{},"faq/#_5":{},"faq/#git":{}},"title":{}}],["cmath",{"_index":376,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["cmp",{"_index":666,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["cname",{"_index":45,"text":{"faq/":{},"faq/#_2":{}},"title":{}}],["cnt",{"_index":288,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["co",{"_index":764,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["collabor",{"_index":152,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["com/username/wiki",{"_index":201,"text":{"faq/":{},"faq/#_5":{}},"title":{}}],["com:username/wiki",{"_index":203,"text":{"faq/":{},"faq/#_5":{}},"title":{}}],["command",{"_index":182,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["commit",{"_index":108,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["common",{"_index":128,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["const",{"_index":278,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["content",{"_index":89,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["context",{"_index":230,"text":{"home/":{},"home/#_2":{}},"title":{}}],["continu",{"_index":286,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["cost",{"_index":835,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["cout",{"_index":221,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"home/":{},"home/#_2":{}},"title":{}}],["cout<<l",{"_index":459,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["cout<<l<<endl",{"_index":654,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{}},"title":{}}],["cover",{"_index":676,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["creat",{"_index":79,"text":{"faq/":{},"faq/#git":{},"faq/#mkdocs":{}},"title":{}}],["cstdio",{"_index":377,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["cstdlib",{"_index":954,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["cstring",{"_index":378,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["cur",{"_index":777,"text":{"Graph/Dinic/":{},"Graph/ISAP/":{}},"title":{}}],["current",{"_index":84,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["d",{"_index":293,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["d%d",{"_index":292,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{}},"title":{}}],["d%d%d",{"_index":365,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["d%d%d%d",{"_index":483,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["d%d%d%d%d",{"_index":485,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["d%d%lld",{"_index":477,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{}},"title":{}}],["d,%d",{"_index":993,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["d1",{"_index":864,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["d2",{"_index":865,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["d\\n",{"_index":821,"text":{"Graph/ISAP/":{}},"title":{}}],["data_structur",{"_index":39,"text":{"faq/":{},"faq/#_2":{}},"title":{}}],["day",{"_index":801,"text":{"Graph/ISAP/":{}},"title":{}}],["dcmp",{"_index":731,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["debug",{"_index":437,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["deep",{"_index":627,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["def",{"_index":227,"text":{"home/":{},"home/#_2":{}},"title":{}}],["defin",{"_index":381,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/DFS/":{}},"title":{}}],["delet",{"_index":131,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["delta",{"_index":788,"text":{"Graph/Dinic/":{},"Graph/ISAP/":{}},"title":{}}],["dep",{"_index":624,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["deploy",{"_index":185,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["deploy\u548cnew",{"_index":194,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["depth",{"_index":976,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["desktop",{"_index":52,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["destop",{"_index":204,"text":{"faq/":{},"faq/#_5":{}},"title":{}}],["develop",{"_index":137,"text":{"faq/":{},"faq/#git":{},"faq/#mkdocs":{}},"title":{}}],["df",{"_index":280,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Others/Time/":{},"Others/Time/#1":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/DFS/":{}},"title":{}}],["dfs1",{"_index":626,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["dfs2",{"_index":629,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["dfscnt",{"_index":620,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["dfz",{"_index":487,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k_1":{}},"title":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{}}}],["dfz(int",{"_index":499,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz_1":{}},"title":{}}],["di",{"_index":495,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["di[]\u6570\u7ec4,di",{"_index":569,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1":{}},"title":{}}],["diam",{"_index":754,"text":{"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{}},"title":{}}],["diff",{"_index":111,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"faq/":{},"faq/#git":{}},"title":{}}],["digitdp",{"_index":279,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{}},"title":{}}],["dinic",{"_index":770,"text":{"Graph/Dinic/":{},"Others/Time/":{},"Others/Time/#4":{}},"title":{"Graph/Dinic/":{}}}],["dir",{"_index":749,"text":{"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["directori",{"_index":77,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["dis[",{"_index":843,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["discret",{"_index":451,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["dn",{"_index":46,"text":{"faq/":{},"faq/#_2":{}},"title":{}}],["doc",{"_index":36,"text":{"faq/":{},"faq/#_2":{}},"title":{}}],["docs\u6587\u4ef6\u5939\u5b58\u653emarkdown",{"_index":40,"text":{"faq/":{},"faq/#_2":{}},"title":{}}],["document",{"_index":168,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["doubl",{"_index":306,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["download",{"_index":155,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["dp",{"_index":18,"text":{"":{},"#_2":{},"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/ST/":{},"Others/Time/":{},"Others/Time/#2":{},"Others/Time/#3":{}},"title":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{}}}],["dp[i][",{"_index":360,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{}},"title":{}}],["dp[i][0/1",{"_index":332,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{}},"title":{}}],["dp[i][j",{"_index":250,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{}},"title":{}}],["dp[n][m]=0",{"_index":340,"text":{"DP/%E6%A6%82%E7%8E%87DP/":{}},"title":{}}],["dp\uff1ahdu",{"_index":904,"text":{"Others/exem/":{},"Others/exem/#_2":{}},"title":{}}],["dp\uff1ahttp",{"_index":908,"text":{"Others/exem/":{},"Others/exem/#_2":{}},"title":{}}],["dp\uff1anoi1995",{"_index":907,"text":{"Others/exem/":{},"Others/exem/#_2":{}},"title":{}}],["dp\uff1ap1352",{"_index":906,"text":{"Others/exem/":{},"Others/exem/#_2":{}},"title":{}}],["dx",{"_index":943,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/DFS/":{}},"title":{}}],["dx,di",{"_index":944,"text":{"Search/DFS/":{}},"title":{}}],["dxi",{"_index":972,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["dy",{"_index":945,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/DFS/":{}},"title":{}}],["e",{"_index":778,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["edg",{"_index":327,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["edp",{"_index":338,"text":{"DP/%E6%A6%82%E7%8E%87DP/":{}},"title":{}}],["eg",{"_index":552,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{}},"title":{}}],["ek",{"_index":793,"text":{"Graph/EK/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/Time/#4":{}},"title":{"Graph/EK/":{}}}],["empti",{"_index":80,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/BFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["emtpi",{"_index":938,"text":{"Search/BFS/":{}},"title":{}}],["enabl",{"_index":178,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["endl",{"_index":1004,"text":{"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{}},"title":{}}],["eof",{"_index":990,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["ep",{"_index":759,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["etc",{"_index":114,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["etot",{"_index":550,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["evalu",{"_index":983,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["everyday",{"_index":86,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["examin",{"_index":99,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["exist",{"_index":82,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["exit",{"_index":172,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["explor",{"_index":468,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["extens",{"_index":28,"text":{"faq/":{},"faq/#_1":{}},"title":{}}],["f",{"_index":321,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["f(i,j,k",{"_index":210,"text":{"home/":{},"home/#_2":{}},"title":{}}],["f[i",{"_index":325,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{}},"title":{}}],["f_{i,j,k",{"_index":209,"text":{"home/":{},"home/#_2":{}},"title":{}}],["fa",{"_index":491,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["fa),u",{"_index":568,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1":{}},"title":{}}],["fa,int",{"_index":570,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{}},"title":{}}],["fab",{"_index":755,"text":{"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["fact",{"_index":958,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["fail",{"_index":997,"text":{"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["fals",{"_index":734,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/BFS/":{},"Search/DFS/":{}},"title":{}}],["fetch",{"_index":154,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["file",{"_index":88,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["filter",{"_index":236,"text":{"home/":{},"home/#_2":{}},"title":{}}],["fin",{"_index":872,"text":{"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{}},"title":{}}],["find",{"_index":107,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"faq/":{},"faq/#git":{}},"title":{}}],["findx",{"_index":456,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["first",{"_index":747,"text":{"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["flag",{"_index":768,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["flow",{"_index":787,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["floyd",{"_index":362,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{}},"title":{}}],["for(int",{"_index":655,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{}},"title":{}}],["fork",{"_index":198,"text":{"faq/":{},"faq/#_5":{}},"title":{}}],["friend",{"_index":446,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["front",{"_index":561,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/BFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["g",{"_index":330,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["gap",{"_index":795,"text":{"Graph/ISAP/":{}},"title":{}}],["gcc",{"_index":806,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["gcd",{"_index":665,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{}},"title":{}}],["get",{"_index":0,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{"":{}}}],["get_maxflow",{"_index":789,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{}},"title":{}}],["get_mcmf",{"_index":846,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["get_num",{"_index":335,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{}},"title":{}}],["get_object_or_404",{"_index":232,"text":{"home/":{},"home/#_2":{}},"title":{}}],["get_root",{"_index":329,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{}},"title":{}}],["getchar",{"_index":992,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["getlin",{"_index":1003,"text":{"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{}},"title":{}}],["getroot",{"_index":489,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{}},"title":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot_1":{}}}],["getroot(u,fa,sum",{"_index":490,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot":{}},"title":{}}],["getroot(u,fa,sum),u",{"_index":566,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot_1":{}},"title":{}}],["gh",{"_index":184,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["git",{"_index":35,"text":{"faq/":{},"faq/#_2":{},"faq/#_5":{},"faq/#git":{}},"title":{"faq/#git":{}}}],["git@github",{"_index":202,"text":{"faq/":{},"faq/#_5":{}},"title":{}}],["github",{"_index":50,"text":{"faq/":{},"faq/#_2":{},"faq/#_4":{},"faq/#git":{},"faq/#mkdocs":{}},"title":{}}],["github\u7684\u540c\u5b66\u53ef\u4ee5\u76f4\u63a5\u63d0\u4ea4pr",{"_index":238,"text":{"home/":{},"home/#_3":{}},"title":{}}],["go",{"_index":6,"text":{"":{}},"title":{"#lets-go":{}}}],["good",{"_index":741,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{}},"title":{}}],["gpg",{"_index":151,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["graham",{"_index":737,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Others/Time/":{},"Others/Time/#6":{}},"title":{}}],["graham\uff1apoj",{"_index":937,"text":{"Others/exem/":{},"Others/exem/#_6":{}},"title":{}}],["grep",{"_index":115,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["grow",{"_index":125,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["gt",{"_index":205,"text":{},"title":{"faq/#_4":{},"faq/#_5":{}}}],["gui",{"_index":51,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["h",{"_index":180,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{}}],["hai",{"_index":746,"text":{"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{}},"title":{}}],["hdoj1078",{"_index":901,"text":{"Others/exem/":{},"Others/exem/#_1":{}},"title":{}}],["hdu",{"_index":645,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Others/exem/":{},"Others/exem/#_1":{}},"title":{}}],["hdu1251",{"_index":935,"text":{"Others/exem/":{},"Others/exem/#_5":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{}},"title":{}}],["hdu1281",{"_index":932,"text":{"Others/exem/":{},"Others/exem/#_4":{}},"title":{}}],["hdu1542",{"_index":915,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["hdu1892",{"_index":478,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{}},"title":{}}],["hdu2089",{"_index":275,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{}},"title":{}}],["hdu2222",{"_index":936,"text":{"Others/exem/":{},"Others/exem/#_5":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["hdu2255",{"_index":823,"text":{"Graph/KM%E7%AE%97%E6%B3%95/":{},"Others/exem/":{},"Others/exem/#_4":{}},"title":{}}],["hdu3468",{"_index":398,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{}},"title":{}}],["hdu3911",{"_index":914,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["hdu5418",{"_index":356,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{}},"title":{}}],["head",{"_index":145,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"faq/":{},"faq/#git":{}},"title":{}}],["hello",{"_index":223,"text":{"home/":{},"home/#_2":{}},"title":{}}],["help",{"_index":72,"text":{"faq/":{},"faq/#git":{},"faq/#mkdocs":{}},"title":{}}],["hh",{"_index":974,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["hi",{"_index":798,"text":{"Graph/ISAP/":{}},"title":{}}],["histori",{"_index":100,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["hrbust",{"_index":898,"text":{"Others/exem/":{},"Others/exem/#_1":{},"Search/DFS/":{}},"title":{}}],["hrbust_acm\u2018",{"_index":3,"text":{"":{}},"title":{"#hrbust_acms-wiki":{}}}],["html",{"_index":43,"text":{"faq/":{},"faq/#_2":{},"home/":{},"home/#_2":{}},"title":{}}],["https://github",{"_index":200,"text":{"faq/":{},"faq/#_5":{}},"title":{}}],["i+1",{"_index":862,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["i+m",{"_index":858,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["i+n",{"_index":860,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["i=1,2",{"_index":852,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["i=1;i<=4*n;i",{"_index":656,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{}},"title":{}}],["id",{"_index":664,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{}},"title":{}}],["ida",{"_index":968,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["ida_star",{"_index":977,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["idastar",{"_index":971,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["imax",{"_index":393,"text":{"Data_Structure/RMQ/":{}},"title":{}}],["imin",{"_index":391,"text":{"Data_Structure/RMQ/":{}},"title":{}}],["includ",{"_index":212,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"home/":{},"home/#_2":{}},"title":{}}],["index",{"_index":90,"text":{"faq/":{},"faq/#git":{}},"title":{"Data_Structure/":{},"Others/":{},"Search/":{},"String/":{}}}],["inf",{"_index":358,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["inf,",{"_index":861,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["inf,f",{"_index":859,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["info",{"_index":206,"text":{"home/":{},"home/#_1":{}},"title":{}}],["init",{"_index":78,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["init_st",{"_index":396,"text":{"Data_Structure/ST/":{}},"title":{}}],["inlin",{"_index":619,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["inq",{"_index":838,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["insert",{"_index":999,"text":{"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["int",{"_index":216,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"home/":{},"home/#_2":{}},"title":{}}],["integr",{"_index":158,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["intervaldp",{"_index":247,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{}},"title":{}}],["introduc",{"_index":109,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["ios::sync_with_stdio(fals",{"_index":819,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["iostream",{"_index":379,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["isap",{"_index":794,"text":{"Graph/ISAP/":{},"Others/Time/":{},"Others/Time/#4":{}},"title":{"Graph/ISAP/":{}}}],["i\u623f\u5b50\u6ca1\u5339\u914d\u8fc7\u6216i",{"_index":830,"text":{"Graph/KM%E7%AE%97%E6%B3%95/":{}},"title":{}}],["j",{"_index":251,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/ST/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["jg",{"_index":557,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{}},"title":{}}],["join",{"_index":134,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["k",{"_index":256,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k_1":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/ST/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/ISAP/":{},"Others/Time/":{},"Others/Time/#5":{},"Others/Time/#6":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k_1":{}}}],["km",{"_index":822,"text":{"Graph/KM%E7%AE%97%E6%B3%95/":{},"Others/Time/":{},"Others/Time/#4":{},"Others/exem/":{},"Others/exem/#_4":{}},"title":{"Graph/KM%E7%AE%97%E6%B3%95/":{}}}],["knode",{"_index":442,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["l",{"_index":385,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["l1",{"_index":742,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{}},"title":{}}],["l2",{"_index":743,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{}},"title":{}}],["lack",{"_index":829,"text":{"Graph/KM%E7%AE%97%E6%B3%95/":{}},"title":{}}],["last",{"_index":748,"text":{"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{}},"title":{}}],["latex",{"_index":208,"text":{"home/":{},"home/#_2":{}},"title":{}}],["laz",{"_index":637,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["laz2",{"_index":718,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["lazi",{"_index":643,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{}},"title":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}}}],["laz\uff0claz2",{"_index":719,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["len",{"_index":255,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["length",{"_index":761,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["let\u2019",{"_index":5,"text":{"":{}},"title":{"#lets-go":{}}}],["lf",{"_index":740,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{}},"title":{}}],["lf%lf%lf%lf",{"_index":464,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["limit",{"_index":283,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{}},"title":{}}],["lin",{"_index":826,"text":{"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{}},"title":{}}],["line",{"_index":117,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"faq/":{},"faq/#git":{}},"title":{}}],["list",{"_index":130,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["ll",{"_index":254,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["lld",{"_index":434,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["lld/%lld",{"_index":673,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{}},"title":{}}],["lld\\n",{"_index":849,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["lmax0",{"_index":649,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{}},"title":{}}],["lmax1",{"_index":650,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{}},"title":{}}],["local",{"_index":159,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["log",{"_index":120,"text":{"Data_Structure/ST/":{},"Others/Time/":{},"Others/Time/#3":{},"Others/Time/#6":{},"faq/":{},"faq/#git":{}},"title":{}}],["loj",{"_index":796,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/exem/":{},"Others/exem/#_2":{}},"title":{}}],["long",{"_index":243,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["lowbit",{"_index":474,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{}},"title":{}}],["lower_bound",{"_index":457,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{}},"title":{}}],["ls",{"_index":617,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["lson",{"_index":384,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/RMQ/":{}},"title":{}}],["m",{"_index":166,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/Time/#3":{},"Others/Time/#4":{},"Others/Time/#5":{},"Others/Time/#6":{},"Search/DFS/":{},"Search/DeSearch/":{},"faq/":{},"faq/#git":{}},"title":{}}],["main",{"_index":217,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"home/":{},"home/#_2":{}},"title":{}}],["map",{"_index":375,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/RMQ/":{}},"title":{}}],["mark",{"_index":126,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["markdown",{"_index":29,"text":{"faq/":{},"faq/#_1":{},"faq/#mkdocs":{},"home/":{},"home/#_1":{},"home/#_2":{},"home/#_3":{}},"title":{}}],["match",{"_index":118,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["materi",{"_index":26,"text":{"faq/":{},"faq/#_1":{},"home/":{},"home/#_1":{}},"title":{}}],["math",{"_index":969,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["max",{"_index":257,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["maxflow",{"_index":790,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["maxn",{"_index":245,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["maxson",{"_index":628,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["maxt",{"_index":554,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{}},"title":{}}],["mcmf",{"_index":836,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["md",{"_index":49,"text":{"faq/":{},"faq/#_2":{}},"title":{}}],["mem",{"_index":769,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["mem(a",{"_index":757,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["memset",{"_index":289,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/ST/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["memset(a",{"_index":758,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["merg",{"_index":133,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["messag",{"_index":181,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["mid",{"_index":461,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["min",{"_index":361,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/RMQ/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["mincost",{"_index":847,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["mincostmaxflow",{"_index":837,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["minimax",{"_index":989,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["minimaxsearch",{"_index":982,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["minn",{"_index":975,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["mkdoc",{"_index":25,"text":{"faq/":{},"faq/#_1":{},"faq/#_2":{},"faq/#mkdocs":{},"home/":{},"home/#_1":{}},"title":{"faq/#mkdocs":{}}}],["mkdocs\u8fd8\u672a\u652f\u6301python",{"_index":24,"text":{"faq/":{},"faq/#_1":{}},"title":{}}],["mo",{"_index":674,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{}},"title":{}}],["mod",{"_index":303,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/RMQ/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{}},"title":{}}],["more",{"_index":136,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["moteam",{"_index":669,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{}},"title":{}}],["move",{"_index":92,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["mp",{"_index":824,"text":{"Graph/KM%E7%AE%97%E6%B3%95/":{}},"title":{}}],["mv",{"_index":91,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["n",{"_index":225,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/Time/#3":{},"Others/Time/#4":{},"Others/Time/#6":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"Search/DeSearch/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"home/":{},"home/#_2":{}},"title":{}}],["n(n>m",{"_index":853,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["n*m",{"_index":886,"text":{"Others/Time/":{},"Others/Time/#3":{},"Search/DFS/":{}},"title":{}}],["n\\n",{"_index":470,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["n^2",{"_index":876,"text":{"Others/Time/":{},"Others/Time/#1":{}},"title":{}}],["namespac",{"_index":214,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"home/":{},"home/#_2":{}},"title":{}}],["nay",{"_index":564,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{}},"title":{}}],["net/contest/76505",{"_index":911,"text":{"Others/exem/":{},"Others/exem/#_2":{}},"title":{}}],["new",{"_index":76,"text":{"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"faq/":{},"faq/#git":{},"faq/#mkdocs":{}},"title":{}}],["nex",{"_index":775,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["next",{"_index":328,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["node",{"_index":441,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["normal",{"_index":750,"text":{"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["now",{"_index":281,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/ISAP/":{}},"title":{}}],["num",{"_index":287,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{}},"title":{}}],["nx",{"_index":964,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["nxt",{"_index":551,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["ny",{"_index":965,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["n\u4e2a\u70b9/\u72b6\u6001,m",{"_index":873,"text":{"Others/Time/":{},"Others/Time/#1":{}},"title":{}}],["o",{"_index":724,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["o(1",{"_index":883,"text":{"Others/Time/":{},"Others/Time/#3":{}},"title":{}}],["o(10*n",{"_index":888,"text":{"Others/Time/":{},"Others/Time/#3":{}},"title":{}}],["o(2^n",{"_index":880,"text":{"Others/Time/":{},"Others/Time/#2":{}},"title":{}}],["o(\\log",{"_index":882,"text":{"Others/Time/":{},"Others/Time/#3":{}},"title":{}}],["o(m+n",{"_index":891,"text":{"Others/Time/":{},"Others/Time/#4":{}},"title":{}}],["o(n",{"_index":874,"text":{"Others/Time/":{},"Others/Time/#1":{},"Others/Time/#2":{},"Others/Time/#3":{},"Others/Time/#5":{},"Others/Time/#6":{}},"title":{}}],["o(n*k",{"_index":897,"text":{"Others/Time/":{},"Others/Time/#5":{}},"title":{}}],["o(n*m",{"_index":885,"text":{"Others/Time/":{},"Others/Time/#3":{},"Others/Time/#4":{},"Others/Time/#5":{}},"title":{}}],["o(n*m*m",{"_index":892,"text":{"Others/Time/":{},"Others/Time/#4":{}},"title":{}}],["o(n*n*m",{"_index":893,"text":{"Others/Time/":{},"Others/Time/#4":{}},"title":{}}],["o(n*sqrt(m",{"_index":895,"text":{"Others/Time/":{},"Others/Time/#4":{}},"title":{}}],["o(n\\log",{"_index":884,"text":{"Others/Time/":{},"Others/Time/#3":{}},"title":{}}],["o(n^2",{"_index":881,"text":{"Others/Time/":{},"Others/Time/#2":{}},"title":{}}],["o(n^2*2^n",{"_index":877,"text":{"Others/Time/":{},"Others/Time/#2":{}},"title":{}}],["o(n^3",{"_index":878,"text":{"Others/Time/":{},"Others/Time/#2":{}},"title":{}}],["o(n^{2",{"_index":890,"text":{"Others/Time/":{},"Others/Time/#4":{}},"title":{}}],["o(n^{3",{"_index":889,"text":{"Others/Time/":{},"Others/Time/#4":{}},"title":{}}],["o(n^{\\frac{1}{2",{"_index":875,"text":{"Others/Time/":{},"Others/Time/#1":{}},"title":{}}],["o(size[dp",{"_index":879,"text":{"Others/Time/":{},"Others/Time/#2":{}},"title":{}}],["o(v+e+\\log",{"_index":894,"text":{"Others/Time/":{},"Others/Time/#4":{}},"title":{}}],["object",{"_index":123,"text":{"faq/":{},"faq/#git":{},"home/":{},"home/#_2":{}},"title":{}}],["on",{"_index":83,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["onleft",{"_index":730,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{}},"title":{}}],["onseg",{"_index":766,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["op",{"_index":642,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["oper",{"_index":448,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["opt",{"_index":476,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{}},"title":{}}],["optimize(2",{"_index":807,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["option",{"_index":169,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["output",{"_index":179,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["p",{"_index":432,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["p1",{"_index":341,"text":{"DP/%E6%A6%82%E7%8E%87DP/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{}},"title":{}}],["p2",{"_index":342,"text":{"DP/%E6%A6%82%E7%8E%87DP/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{}},"title":{}}],["p3",{"_index":343,"text":{"DP/%E6%A6%82%E7%8E%87DP/":{}},"title":{}}],["p3368",{"_index":471,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{}},"title":{}}],["p3376",{"_index":771,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{}},"title":{}}],["p3376\u3001loj",{"_index":933,"text":{"Others/exem/":{},"Others/exem/#_4":{}},"title":{}}],["p3381",{"_index":833,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["p3381\u3001loj",{"_index":934,"text":{"Others/exem/":{},"Others/exem/#_4":{}},"title":{}}],["p3384",{"_index":573,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{}},"title":{}}],["p3384\uff0chysbz",{"_index":916,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["p3806",{"_index":486,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k":{}},"title":{}}],["p3865",{"_index":395,"text":{"Data_Structure/ST/":{},"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["p4",{"_index":344,"text":{"DP/%E6%A6%82%E7%8E%87DP/":{}},"title":{}}],["p4178",{"_index":565,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k_1":{}},"title":{}}],["p4315",{"_index":675,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["p4315\uff0chysbz",{"_index":920,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["page",{"_index":186,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["pair<ll",{"_index":844,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["pan",{"_index":978,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["pattern",{"_index":119,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["pb",{"_index":816,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["pdp",{"_index":305,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{}},"title":{}}],["pip",{"_index":20,"text":{"faq/":{},"faq/#_1":{}},"title":{}}],["pk",{"_index":234,"text":{"home/":{},"home/#_2":{}},"title":{}}],["po",{"_index":430,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["point",{"_index":727,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["poj",{"_index":725,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Others/exem/":{},"Others/exem/#_3":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["poj1077",{"_index":903,"text":{"Others/exem/":{},"Others/exem/#_1":{}},"title":{}}],["poj1274",{"_index":871,"text":{"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{}},"title":{}}],["poj1274\u3001poj1469\u3001poj3041\u3001poj1325\u3001poj1466\u3001poj2226",{"_index":931,"text":{"Others/exem/":{},"Others/exem/#_4":{}},"title":{}}],["poj1568",{"_index":902,"text":{"Others/exem/":{},"Others/exem/#_1":{}},"title":{}}],["poj2096",{"_index":336,"text":{"DP/%E6%A6%82%E7%8E%87DP/":{}},"title":{}}],["poj2155",{"_index":912,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["poj2318",{"_index":756,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Others/exem/":{},"Others/exem/#_6":{}},"title":{}}],["poj3264",{"_index":374,"text":{"Data_Structure/RMQ/":{}},"title":{}}],["poj3468",{"_index":644,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["poj3525",{"_index":745,"text":{"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Others/exem/":{},"Others/exem/#_6":{}},"title":{}}],["pop",{"_index":562,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/BFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["pr",{"_index":197,"text":{"faq/":{},"faq/#_5":{}},"title":{}}],["pragma",{"_index":805,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["pre",{"_index":282,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["print",{"_index":116,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["printan",{"_index":308,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{}},"title":{}}],["printf",{"_index":222,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"home/":{},"home/#_2":{}},"title":{}}],["printf(\"%d",{"_index":657,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Graph/ISAP/":{}},"title":{}}],["printf(\"%lld",{"_index":848,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["priority_queu",{"_index":841,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["project",{"_index":167,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["pr\uff08pull",{"_index":195,"text":{"faq/":{},"faq/#_5":{}},"title":{}}],["public",{"_index":248,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["pull",{"_index":157,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["push",{"_index":160,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/BFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{}},"title":{}}],["push(make_pair",{"_index":842,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["push_back",{"_index":219,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"home/":{},"home/#_2":{}},"title":{}}],["push_up",{"_index":389,"text":{"Data_Structure/RMQ/":{}},"title":{}}],["pushdown",{"_index":638,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["pushup",{"_index":458,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["put",{"_index":438,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["pymdown",{"_index":27,"text":{"faq/":{},"faq/#_1":{}},"title":{}}],["python",{"_index":19,"text":{"faq/":{},"faq/#_1":{},"home/":{},"home/#_2":{}},"title":{}}],["q",{"_index":173,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/RMQ/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/BFS/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#mkdocs":{}},"title":{}}],["ql",{"_index":639,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["qpath",{"_index":632,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["qq",{"_index":239,"text":{"Search/DFS/":{},"home/":{},"home/#_3":{}},"title":{}}],["qr",{"_index":640,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["qson",{"_index":634,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{}},"title":{}}],["queri",{"_index":397,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/ST/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["query_max",{"_index":392,"text":{"Data_Structure/RMQ/":{}},"title":{}}],["query_min",{"_index":390,"text":{"Data_Structure/RMQ/":{}},"title":{}}],["queue",{"_index":559,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/BFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["quiet",{"_index":174,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["r",{"_index":388,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["r,0",{"_index":857,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["r,p",{"_index":856,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["r<<endl",{"_index":460,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["r[i",{"_index":854,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["r[i],0",{"_index":855,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["rad",{"_index":763,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["raw",{"_index":449,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["re",{"_index":641,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["read",{"_index":785,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["read(a",{"_index":808,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["readc(a",{"_index":814,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["readl",{"_index":839,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["readl(a",{"_index":810,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["readm",{"_index":48,"text":{"faq/":{},"faq/#_2":{}},"title":{}}],["reads(a",{"_index":812,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["reappli",{"_index":140,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["rebas",{"_index":139,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["record",{"_index":132,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["ref",{"_index":156,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["reiniti",{"_index":81,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["relif",{"_index":199,"text":{"faq/":{},"faq/#_5":{}},"title":{}}],["remot",{"_index":162,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["remov",{"_index":98,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["renam",{"_index":93,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["render",{"_index":237,"text":{"home/":{},"home/#_2":{}},"title":{}}],["rep",{"_index":454,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["rep(i",{"_index":436,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["rep(i,1,2*n)cout<<raw[i",{"_index":453,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["rep(i,1,cnt)cout<<b[i",{"_index":455,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["repositori",{"_index":75,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["request",{"_index":196,"text":{"faq/":{},"faq/#_5":{},"home/":{},"home/#_2":{}},"title":{}}],["reset",{"_index":144,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["restor",{"_index":95,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["ret",{"_index":959,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["return",{"_index":226,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"home/":{},"home/#_2":{}},"title":{}}],["revers",{"_index":739,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{}},"title":{}}],["revis",{"_index":102,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["rh",{"_index":960,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["ri",{"_index":851,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["rldu",{"_index":973,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["rm",{"_index":97,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["rmax0",{"_index":651,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{}},"title":{}}],["rmax1",{"_index":652,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{}},"title":{}}],["rmq",{"_index":366,"text":{"Data_Structure/RMQ/":{},"Others/Time/":{},"Others/Time/#3":{}},"title":{"Data_Structure/RMQ/":{}}}],["rmq\uff1apoj3264",{"_index":913,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["rnk",{"_index":625,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["root",{"_index":323,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot_1":{}}}],["rotat",{"_index":762,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["rs",{"_index":618,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["rson",{"_index":387,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/RMQ/":{}},"title":{}}],["rt",{"_index":386,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{}},"title":{}}],["run",{"_index":188,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["s",{"_index":337,"text":{"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["scanf",{"_index":291,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["scanf(\"%",{"_index":813,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["scanf(\"%c",{"_index":815,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["scanf(\"%d",{"_index":809,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["scanf(\"%lld",{"_index":811,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["search",{"_index":106,"text":{"Search/DFS/":{},"faq/":{},"faq/#git":{}},"title":{}}],["second",{"_index":845,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["see",{"_index":71,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["seg",{"_index":767,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["segmenttre",{"_index":636,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["serv",{"_index":187,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["server",{"_index":190,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["show",{"_index":112,"text":{"faq/":{},"faq/#git":{},"faq/#mkdocs":{}},"title":{}}],["sign",{"_index":150,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"faq/":{},"faq/#git":{}},"title":{}}],["silenc",{"_index":175,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["sin",{"_index":765,"text":{"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["site",{"_index":41,"text":{"faq/":{},"faq/#_2":{},"faq/#mkdocs":{}},"title":{}}],["siz",{"_index":553,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["size",{"_index":333,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["sizeof",{"_index":290,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["sizeof(a",{"_index":817,"text":{"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["solv",{"_index":253,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{}},"title":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{}}}],["son",{"_index":622,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["sort",{"_index":452,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{}},"title":{}}],["sovl",{"_index":488,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#k_1":{}},"title":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{}}}],["sovle(int",{"_index":498,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{}},"title":{}}],["sovledi",{"_index":497,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{}},"title":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{}}}],["spaf",{"_index":870,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["specifi",{"_index":146,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["spfa",{"_index":832,"text":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/Time/#4":{}},"title":{"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}}}],["sqr",{"_index":735,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["sqrt",{"_index":431,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Others/Time/":{},"Others/Time/#3":{}},"title":{}}],["st",{"_index":394,"text":{"Data_Structure/ST/":{},"Others/Time/":{},"Others/Time/#3":{},"Others/exem/":{},"Others/exem/#_3":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{"Data_Structure/ST/":{}}}],["sta",{"_index":732,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{}},"title":{}}],["start",{"_index":1,"text":{"faq/":{},"faq/#git":{}},"title":{"":{}}}],["state",{"_index":101,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"faq/":{},"faq/#git":{}},"title":{}}],["station",{"_index":820,"text":{"Graph/ISAP/":{}},"title":{}}],["statu",{"_index":124,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["std",{"_index":215,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"home/":{},"home/#_2":{}},"title":{}}],["stdio",{"_index":940,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{}},"title":{}}],["str",{"_index":942,"text":{"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["string",{"_index":941,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/DFS/":{}},"title":{}}],["strlen",{"_index":946,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["struct",{"_index":440,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["sub",{"_index":672,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{}},"title":{}}],["sum",{"_index":249,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["sum[i",{"_index":252,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{}},"title":{}}],["swap",{"_index":484,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["switch",{"_index":147,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["swp",{"_index":653,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{}},"title":{}}],["symlink",{"_index":94,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["sz",{"_index":320,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{}},"title":{}}],["sz[i",{"_index":324,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{}},"title":{}}],["t",{"_index":364,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/BFS/":{},"Search/DFS/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["tag",{"_index":148,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["tc",{"_index":635,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["temp",{"_index":475,"text":{"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Graph/ISAP/":{}},"title":{}}],["test",{"_index":465,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["tid",{"_index":623,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["tip",{"_index":143,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["tle",{"_index":991,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["tmp",{"_index":791,"text":{"Graph/Dinic/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["today",{"_index":804,"text":{"Graph/ISAP/":{}},"title":{}}],["togeth",{"_index":138,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["top",{"_index":141,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"faq/":{},"faq/#git":{}},"title":{}}],["topf",{"_index":630,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["tot",{"_index":998,"text":{"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["total",{"_index":467,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{}},"title":{}}],["tp",{"_index":496,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{}},"title":{}}],["tr",{"_index":1001,"text":{"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{}},"title":{}}],["tree",{"_index":96,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"faq/":{},"faq/#git":{}},"title":{}}],["tree0",{"_index":647,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{}},"title":{}}],["tree1",{"_index":648,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{}},"title":{}}],["tree1[i",{"_index":658,"text":{"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{}},"title":{}}],["treechainsubdivis",{"_index":621,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["treenum",{"_index":331,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{}},"title":{}}],["treeroot",{"_index":319,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{}},"title":{}}],["trie",{"_index":996,"text":{"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["true",{"_index":736,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/BFS/":{},"Search/DFS/":{}},"title":{}}],["tutori",{"_index":73,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["tweak",{"_index":127,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["two",{"_index":135,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["type",{"_index":122,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["typedef",{"_index":277,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["typora",{"_index":207,"text":{"home/":{},"home/#_2":{}},"title":{}}],["u",{"_index":326,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["u),u",{"_index":572,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#4-dfzdfz_1":{}},"title":{}}],["u,int",{"_index":494,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#2-caldiscaldis_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{}},"title":{}}],["uniqu",{"_index":738,"text":{"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{}},"title":{}}],["unsolv",{"_index":966,"text":{"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{}},"title":{}}],["up",{"_index":284,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{}},"title":{}}],["upalpha",{"_index":986,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["upbeta",{"_index":987,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["updat",{"_index":161,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Graph/EK/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"faq/":{},"faq/#git":{}},"title":{}}],["updateadd",{"_index":720,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["updatefu",{"_index":721,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["updpath",{"_index":631,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{}},"title":{}}],["updpathadd",{"_index":722,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["updpathfu",{"_index":723,"text":{"Data_Structure/%E8%BE%B9%E5%89%96/":{}},"title":{}}],["updson",{"_index":633,"text":{"Data_Structure/%E7%82%B9%E5%88%A8/":{}},"title":{}}],["url",{"_index":165,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["us",{"_index":104,"text":{"DP/%E6%95%B0%E4%BD%8DDP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{},"faq/":{},"faq/#git":{},"home/":{},"home/#_2":{}},"title":{}}],["u\u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9,sum",{"_index":567,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#1-rootgetroot_1":{}},"title":{}}],["v",{"_index":170,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Others/Time/":{},"Others/Time/#4":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"faq/":{},"faq/#mkdocs":{},"home/":{},"home/#_2":{}},"title":{}}],["val",{"_index":450,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["variou",{"_index":121,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["vector",{"_index":218,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/RMQ/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"home/":{},"home/#_2":{}},"title":{}}],["verbos",{"_index":177,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["verifi",{"_index":149,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["version",{"_index":171,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["vi",{"_index":322,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/EK/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/BFS/":{},"Search/DFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["vis[po",{"_index":1000,"text":{"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{}},"title":{}}],["vix",{"_index":828,"text":{"Graph/KM%E7%AE%97%E6%B3%95/":{}},"title":{}}],["viy",{"_index":827,"text":{"Graph/KM%E7%AE%97%E6%B3%95/":{}},"title":{}}],["vjudg",{"_index":910,"text":{"Others/exem/":{},"Others/exem/#_2":{}},"title":{}}],["void",{"_index":307,"text":{"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E6%A0%91%E5%BD%A2DP/":{},"DP/%E6%A6%82%E7%8E%87DP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Data_Structure/RMQ/":{},"Data_Structure/ST/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/BFS/":{},"String/%E5%AD%97%E5%85%B8%E6%A0%91/":{},"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/":{}},"title":{}}],["w",{"_index":244,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{},"DP/%E6%9C%9F%E6%9C%9BDP/":{},"DP/%E7%8A%B6%E5%8E%8BDP/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#5-dfzsolve_1":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["w),u",{"_index":571,"text":{"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/":{},"Data_Structure/%E7%82%B9%E5%88%86%E6%B2%BB/#3-sovledissovle_1":{}},"title":{}}],["w[i",{"_index":241,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{}},"title":{}}],["w[i]+w[i+1",{"_index":242,"text":{"DP/%E5%8C%BA%E9%97%B4DP/":{}},"title":{}}],["warn",{"_index":176,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["way",{"_index":792,"text":{"Graph/Dinic/":{},"Graph/EK/":{},"Graph/ISAP/":{},"Graph/SPFA%E8%B4%B9%E7%94%A8%E6%B5%81/":{}},"title":{}}],["wiki",{"_index":4,"text":{"":{},"#_1":{},"faq/":{},"faq/#_4":{}},"title":{"#hrbust_acms-wiki":{},"home/":{}}}],["wiki\u7684\u6839\u76ee\u5f55\u4f7f\u7528mkdoc",{"_index":191,"text":{"faq/":{},"faq/#mkdocs":{}},"title":{}}],["word",{"_index":939,"text":{"Search/DFS/":{}},"title":{}}],["work",{"_index":69,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["workflow",{"_index":153,"text":{"faq/":{},"faq/#git":{}},"title":{}}],["world",{"_index":224,"text":{"home/":{},"home/#_2":{}},"title":{}}],["x",{"_index":23,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{},"faq/":{},"faq/#_1":{},"home/":{},"home/#_2":{}},"title":{}}],["x1",{"_index":443,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["x2",{"_index":463,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["x[i",{"_index":831,"text":{"Graph/KM%E7%AE%97%E6%B3%95/":{}},"title":{}}],["xx",{"_index":667,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{}},"title":{}}],["xxxx",{"_index":42,"text":{"faq/":{},"faq/#_2":{}},"title":{}}],["x\uff0cy\uff0c\u95ee[x",{"_index":401,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{}},"title":{}}],["y",{"_index":334,"text":{"DP/%E6%A0%91%E5%BD%A2DP/":{},"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%841/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/":{},"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Data_Structure/%E8%BE%B9%E5%89%96/":{},"Geometry/%E5%87%B8%E5%8C%85%E7%9A%84%E6%B1%82%E5%8F%96/":{},"Geometry/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{},"Graph/KM%E7%AE%97%E6%B3%95/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/DFS/":{}},"title":{}}],["y1",{"_index":444,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["y2",{"_index":445,"text":{"Data_Structure/%E6%89%AB%E6%8F%8F%E7%BA%BF/":{},"Data_Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%842/":{},"Data_Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91lazy/":{},"Geometry/%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E7%9A%84%E8%BF%90%E7%94%A8/":{}},"title":{}}],["ye",{"_index":948,"text":{"Search/DFS/":{}},"title":{}}],["yesterday",{"_index":802,"text":{"Graph/ISAP/":{}},"title":{}}],["yml",{"_index":47,"text":{"faq/":{},"faq/#_2":{}},"title":{}}],["yy",{"_index":668,"text":{"Data_Structure/%E8%8E%AB%E9%98%9F/":{},"Search/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{}},"title":{}}],["y\uff0cz",{"_index":399,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{}},"title":{}}],["z",{"_index":400,"text":{"Data_Structure/%E5%88%86%E5%9D%97/":{},"Data_Structure/%E7%82%B9%E5%88%A8/":{},"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/BFS/":{},"Search/DFS/":{}},"title":{}}],["zdp",{"_index":363,"text":{"DP/%E7%8A%B6%E5%8E%8BDP/":{}},"title":{}}],["zoj",{"_index":923,"text":{"Others/exem/":{},"Others/exem/#_3":{}},"title":{}}],["zt",{"_index":947,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{},"Search/DFS/":{}},"title":{}}],["zz",{"_index":984,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}],["zzt",{"_index":985,"text":{"Search/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E6%90%9C%E7%B4%A2-alpha-beta%E5%89%AA%E6%9E%9D/":{}},"title":{}}]],"pipeline":["stemmer"],"version":"2.3.8"}}